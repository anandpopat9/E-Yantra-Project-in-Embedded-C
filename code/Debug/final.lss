
final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ab8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001b  00800200  00800200  00002b2c  2**0
                  ALLOC
  2 .stab         000033fc  00000000  00000000  00002b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000009aa  00000000  00000000  00005f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000068d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003bd7  00000000  00000000  00006958  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000346  00000000  00000000  0000a52f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f2e  00000000  00000000  0000a875  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000500  00000000  00000000  0000b7a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000596  00000000  00000000  0000bca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001ca7  00000000  00000000  0000c23a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b3 00 	jmp	0x166	; 0x166 <__ctors_end>
       4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
       c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      14:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_5>
      18:	0c 94 81 01 	jmp	0x302	; 0x302 <__vector_6>
      1c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      20:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      24:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      28:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      30:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      34:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      38:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      3c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      40:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      44:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      48:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      4c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      50:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      54:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      58:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      5c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      60:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      64:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      68:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      6c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      70:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      74:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      78:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      7c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      80:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      84:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      88:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      8c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      90:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      94:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      98:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      9c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      a8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      ac:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      b8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      bc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      c8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      cc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d4:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      d8:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      dc:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e0:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__bad_interrupt>
      e4:	07 63       	ori	r16, 0x37	; 55
      e6:	42 36       	cpi	r20, 0x62	; 98
      e8:	b7 9b       	sbis	0x16, 7	; 22
      ea:	d8 a7       	lds	r29, 0x78
      ec:	1a 39       	cpi	r17, 0x9A	; 154
      ee:	68 56       	subi	r22, 0x68	; 104
      f0:	18 ae       	sts	0xb8, r17
      f2:	ba ab       	sts	0x5a, r27
      f4:	55 8c       	ldd	r5, Z+29	; 0x1d
      f6:	1d 3c       	cpi	r17, 0xCD	; 205
      f8:	b7 cc       	rjmp	.-1682   	; 0xfffffa68 <__eeprom_end+0xff7efa68>
      fa:	57 63       	ori	r21, 0x37	; 55
      fc:	bd 6d       	ori	r27, 0xDD	; 221
      fe:	ed fd       	.word	0xfded	; ????
     100:	75 3e       	cpi	r23, 0xE5	; 229
     102:	f6 17       	cp	r31, r22
     104:	72 31       	cpi	r23, 0x12	; 18
     106:	bf 00       	.word	0x00bf	; ????
     108:	00 00       	nop
     10a:	80 3f       	cpi	r24, 0xF0	; 240
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 00       	nop
     110:	be 92       	st	-X, r11
     112:	24 49       	sbci	r18, 0x94	; 148
     114:	12 3e       	cpi	r17, 0xE2	; 226
     116:	ab aa       	sts	0x9b, r26
     118:	aa 2a       	or	r10, r26
     11a:	be cd       	rjmp	.-1156   	; 0xfffffc98 <__eeprom_end+0xff7efc98>
     11c:	cc cc       	rjmp	.-1640   	; 0xfffffab6 <__eeprom_end+0xff7efab6>
     11e:	4c 3e       	cpi	r20, 0xEC	; 236
     120:	00 00       	nop
     122:	00 80       	ld	r0, Z
     124:	be ab       	sts	0x5e, r27
     126:	aa aa       	sts	0x9a, r26
     128:	aa 3e       	cpi	r26, 0xEA	; 234
     12a:	00 00       	nop
     12c:	00 00       	nop
     12e:	bf 00       	.word	0x00bf	; ????
     130:	00 00       	nop
     132:	80 3f       	cpi	r24, 0xF0	; 240
     134:	00 00       	nop
     136:	00 00       	nop
     138:	00 08       	sbc	r0, r0
     13a:	41 78       	andi	r20, 0x81	; 129
     13c:	d3 bb       	out	0x13, r29	; 19
     13e:	43 87       	std	Z+11, r20	; 0x0b
     140:	d1 13       	cpse	r29, r17
     142:	3d 19       	sub	r19, r13
     144:	0e 3c       	cpi	r16, 0xCE	; 206
     146:	c3 bd       	out	0x23, r28	; 35
     148:	42 82       	std	Z+2, r4	; 0x02
     14a:	ad 2b       	or	r26, r29
     14c:	3e 68       	ori	r19, 0x8E	; 142
     14e:	ec 82       	std	Y+4, r14	; 0x04
     150:	76 be       	out	0x36, r7	; 54
     152:	d9 8f       	std	Y+25, r29	; 0x19
     154:	e1 a9       	sts	0x41, r30
     156:	3e 4c       	sbci	r19, 0xCE	; 206
     158:	80 ef       	ldi	r24, 0xF0	; 240
     15a:	ff be       	out	0x3f, r15	; 63
     15c:	01 c4       	rjmp	.+2050   	; 0x960 <detection_right>
     15e:	ff 7f       	andi	r31, 0xFF	; 255
     160:	3f 00       	.word	0x003f	; ????
     162:	00 00       	nop
	...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d1 e2       	ldi	r29, 0x21	; 33
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61
     172:	00 e0       	ldi	r16, 0x00	; 0
     174:	0c bf       	out	0x3c, r16	; 60

00000176 <__do_copy_data>:
     176:	12 e0       	ldi	r17, 0x02	; 2
     178:	a0 e0       	ldi	r26, 0x00	; 0
     17a:	b2 e0       	ldi	r27, 0x02	; 2
     17c:	e8 eb       	ldi	r30, 0xB8	; 184
     17e:	fa e2       	ldi	r31, 0x2A	; 42
     180:	00 e0       	ldi	r16, 0x00	; 0
     182:	0b bf       	out	0x3b, r16	; 59
     184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x14>
     186:	07 90       	elpm	r0, Z+
     188:	0d 92       	st	X+, r0
     18a:	a0 30       	cpi	r26, 0x00	; 0
     18c:	b1 07       	cpc	r27, r17
     18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0x10>

00000190 <__do_clear_bss>:
     190:	12 e0       	ldi	r17, 0x02	; 2
     192:	a0 e0       	ldi	r26, 0x00	; 0
     194:	b2 e0       	ldi	r27, 0x02	; 2
     196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
     198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
     19a:	ab 31       	cpi	r26, 0x1B	; 27
     19c:	b1 07       	cpc	r27, r17
     19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
     1a0:	0e 94 cd 11 	call	0x239a	; 0x239a <main>
     1a4:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <_exit>

000001a8 <__bad_interrupt>:
     1a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ac <adc_pin_config>:
	sei();   // Enables the global interrupt
}

void adc_pin_config (void)
{
	DDRF = 0x00; //set PORTF direction as input
     1ac:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00; //set PORTF pins floating
     1ae:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00; //set PORTK direction as input
     1b0:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00; //set PORTK pins floating
     1b4:	10 92 08 01 	sts	0x0108, r1
}
     1b8:	08 95       	ret

000001ba <servo1_pin_config>:


//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     1ba:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     1bc:	2d 9a       	sbi	0x05, 5	; 5
}
     1be:	08 95       	ret

000001c0 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     1c0:	26 9a       	sbi	0x04, 6	; 4
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     1c2:	2e 9a       	sbi	0x05, 6	; 5
}
     1c4:	08 95       	ret

000001c6 <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     1c6:	27 9a       	sbi	0x04, 7	; 4
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     1c8:	2f 9a       	sbi	0x05, 7	; 5
}
     1ca:	08 95       	ret

000001cc <adc_init>:
 OCR1CH = 0x03;
 OCR1CL = 0xFF; //Servo 3 off
} 
void adc_init()
{
	ADCSRA = 0x00;
     1cc:	ea e7       	ldi	r30, 0x7A	; 122
     1ce:	f0 e0       	ldi	r31, 0x00	; 0
     1d0:	10 82       	st	Z, r1
	ADCSRB = 0x00; //MUX5 = 0
     1d2:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20; //Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     1d6:	80 e2       	ldi	r24, 0x20	; 32
     1d8:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     1dc:	80 e8       	ldi	r24, 0x80	; 128
     1de:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86; //ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     1e0:	86 e8       	ldi	r24, 0x86	; 134
     1e2:	80 83       	st	Z, r24
}
     1e4:	08 95       	ret

000001e6 <Sharp_GP2D12_estimation>:




unsigned int Sharp_GP2D12_estimation(unsigned char adc_reading)
{
     1e6:	0f 93       	push	r16
     1e8:	1f 93       	push	r17
	float distance;
	unsigned int distanceInt;
	distance = (int)(10.00*(2799.6*(1.00/(pow(adc_reading,1.1546)))));
     1ea:	68 2f       	mov	r22, r24
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	80 e0       	ldi	r24, 0x00	; 0
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 04 13 	call	0x2608	; 0x2608 <__floatunsisf>
     1f6:	2f ee       	ldi	r18, 0xEF	; 239
     1f8:	39 ec       	ldi	r19, 0xC9	; 201
     1fa:	43 e9       	ldi	r20, 0x93	; 147
     1fc:	5f e3       	ldi	r21, 0x3F	; 63
     1fe:	0e 94 f5 13 	call	0x27ea	; 0x27ea <pow>
     202:	b6 2f       	mov	r27, r22
     204:	a7 2f       	mov	r26, r23
     206:	38 2f       	mov	r19, r24
     208:	29 2f       	mov	r18, r25
     20a:	60 e0       	ldi	r22, 0x00	; 0
     20c:	70 e0       	ldi	r23, 0x00	; 0
     20e:	80 e8       	ldi	r24, 0x80	; 128
     210:	9f e3       	ldi	r25, 0x3F	; 63
     212:	42 2f       	mov	r20, r18
     214:	0b 2f       	mov	r16, r27
     216:	1a 2f       	mov	r17, r26
     218:	23 2f       	mov	r18, r19
     21a:	34 2f       	mov	r19, r20
     21c:	a9 01       	movw	r20, r18
     21e:	98 01       	movw	r18, r16
     220:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__divsf3>
     224:	2a e9       	ldi	r18, 0x9A	; 154
     226:	39 ef       	ldi	r19, 0xF9	; 249
     228:	4e e2       	ldi	r20, 0x2E	; 46
     22a:	55 e4       	ldi	r21, 0x45	; 69
     22c:	0e 94 92 13 	call	0x2724	; 0x2724 <__mulsf3>
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	40 e2       	ldi	r20, 0x20	; 32
     236:	51 e4       	ldi	r21, 0x41	; 65
     238:	0e 94 92 13 	call	0x2724	; 0x2724 <__mulsf3>
     23c:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__fixsfsi>
     240:	88 27       	eor	r24, r24
     242:	77 fd       	sbrc	r23, 7
     244:	80 95       	com	r24
     246:	98 2f       	mov	r25, r24
     248:	0e 94 06 13 	call	0x260c	; 0x260c <__floatsisf>
	distanceInt = (int)distance;
     24c:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__fixsfsi>
	if(distanceInt>800)
	{
		distanceInt=800;
	}
	return distanceInt;
     250:	86 2f       	mov	r24, r22
     252:	97 2f       	mov	r25, r23
     254:	23 e0       	ldi	r18, 0x03	; 3
     256:	81 32       	cpi	r24, 0x21	; 33
     258:	92 07       	cpc	r25, r18
     25a:	10 f0       	brcs	.+4      	; 0x260 <Sharp_GP2D12_estimation+0x7a>
     25c:	80 e2       	ldi	r24, 0x20	; 32
     25e:	93 e0       	ldi	r25, 0x03	; 3
}
     260:	1f 91       	pop	r17
     262:	0f 91       	pop	r16
     264:	08 95       	ret

00000266 <interrupt_switch_config>:



void interrupt_switch_config (void)
{
	DDRE = DDRE & 0x7F;  //PORTE 7 pin set as input
     266:	6f 98       	cbi	0x0d, 7	; 13
	PORTE = PORTE | 0x80; //PORTE7 internal pull-up enabled
     268:	77 9a       	sbi	0x0e, 7	; 14
}
     26a:	08 95       	ret

0000026c <motion_pin_config>:


void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F; //set direction of the PORTA 3 to PORTA 0 pins as output
     26c:	81 b1       	in	r24, 0x01	; 1
     26e:	8f 60       	ori	r24, 0x0F	; 15
     270:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0; // set initial value of the PORTA 3 to PORTA 0 pins to logic 0
     272:	82 b1       	in	r24, 0x02	; 2
     274:	80 7f       	andi	r24, 0xF0	; 240
     276:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18; //Setting PL3 and PL4 pins as output for PWM generation
     278:	ea e0       	ldi	r30, 0x0A	; 10
     27a:	f1 e0       	ldi	r31, 0x01	; 1
     27c:	80 81       	ld	r24, Z
     27e:	88 61       	ori	r24, 0x18	; 24
     280:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM
     282:	eb e0       	ldi	r30, 0x0B	; 11
     284:	f1 e0       	ldi	r31, 0x01	; 1
     286:	80 81       	ld	r24, Z
     288:	88 61       	ori	r24, 0x18	; 24
     28a:	80 83       	st	Z, r24
}
     28c:	08 95       	ret

0000028e <MOSFET_switch_config>:

void MOSFET_switch_config (void)
{
	DDRH = DDRH | 0x0C; //make PORTH 3 and PORTH 1 pins as output
     28e:	e1 e0       	ldi	r30, 0x01	; 1
     290:	f1 e0       	ldi	r31, 0x01	; 1
     292:	80 81       	ld	r24, Z
     294:	8c 60       	ori	r24, 0x0C	; 12
     296:	80 83       	st	Z, r24
	PORTH = PORTH & 0xF3; //set PORTH 3 and PORTH 1 pins to 0
     298:	e2 e0       	ldi	r30, 0x02	; 2
     29a:	f1 e0       	ldi	r31, 0x01	; 1
     29c:	80 81       	ld	r24, Z
     29e:	83 7f       	andi	r24, 0xF3	; 243
     2a0:	80 83       	st	Z, r24
	DDRG = DDRG | 0x04; //make PORTG 2 pin as output
     2a2:	9a 9a       	sbi	0x13, 2	; 19
	PORTG = PORTG & 0xFB; //set PORTG 2 pin to 0
     2a4:	a2 98       	cbi	0x14, 2	; 20
}
     2a6:	08 95       	ret

000002a8 <left_encoder_pin_config>:
void left_encoder_pin_config (void)
{
	DDRE = DDRE & 0xEF; //Set the direction of the PORTE 4 pin as input
     2a8:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     2aa:	74 9a       	sbi	0x0e, 4	; 14
}
     2ac:	08 95       	ret

000002ae <right_encoder_pin_config>:


void right_encoder_pin_config (void)
{
	DDRE = DDRE & 0xDF; //Set the direction of the PORTE 4 pin as input
     2ae:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     2b0:	75 9a       	sbi	0x0e, 5	; 14
}
     2b2:	08 95       	ret

000002b4 <port_init>:


//Function to initialize ports
void port_init()
{
	motion_pin_config(); //robot motion pins config
     2b4:	0e 94 36 01 	call	0x26c	; 0x26c <motion_pin_config>
	left_encoder_pin_config(); //left encoder pin config
     2b8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <left_encoder_pin_config>
	right_encoder_pin_config(); //right encoder pin config
     2bc:	0e 94 57 01 	call	0x2ae	; 0x2ae <right_encoder_pin_config>
}
     2c0:	08 95       	ret

000002c2 <port_init2>:
void port_init2()
{
	interrupt_switch_config ();
     2c2:	0e 94 33 01 	call	0x266	; 0x266 <interrupt_switch_config>
	MOSFET_switch_config ();
     2c6:	0e 94 47 01 	call	0x28e	; 0x28e <MOSFET_switch_config>
	adc_pin_config();
     2ca:	0e 94 d6 00 	call	0x1ac	; 0x1ac <adc_pin_config>
}
     2ce:	08 95       	ret

000002d0 <port_init1>:
void port_init1(void)
{
	servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
     2d0:	0e 94 dd 00 	call	0x1ba	; 0x1ba <servo1_pin_config>
	servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
     2d4:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <servo2_pin_config>
	servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation
     2d8:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <servo3_pin_config>
}
     2dc:	08 95       	ret

000002de <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     2de:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     2e0:	ea e6       	ldi	r30, 0x6A	; 106
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	80 81       	ld	r24, Z
     2e6:	82 60       	ori	r24, 0x02	; 2
     2e8:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     2ea:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     2ec:	78 94       	sei
}
     2ee:	08 95       	ret

000002f0 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     2f0:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     2f2:	ea e6       	ldi	r30, 0x6A	; 106
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	80 81       	ld	r24, Z
     2f8:	88 60       	ori	r24, 0x08	; 8
     2fa:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     2fc:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     2fe:	78 94       	sei
}
     300:	08 95       	ret

00000302 <__vector_6>:
	PORTK = 0x00; //set PORTK pins floating
}

//ISR for right position encoder
ISR(INT5_vect)
{
     302:	1f 92       	push	r1
     304:	0f 92       	push	r0
     306:	0f b6       	in	r0, 0x3f	; 63
     308:	0f 92       	push	r0
     30a:	11 24       	eor	r1, r1
     30c:	8f 93       	push	r24
     30e:	9f 93       	push	r25
     310:	af 93       	push	r26
     312:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     314:	80 91 00 02 	lds	r24, 0x0200
     318:	90 91 01 02 	lds	r25, 0x0201
     31c:	a0 91 02 02 	lds	r26, 0x0202
     320:	b0 91 03 02 	lds	r27, 0x0203
     324:	01 96       	adiw	r24, 0x01	; 1
     326:	a1 1d       	adc	r26, r1
     328:	b1 1d       	adc	r27, r1
     32a:	80 93 00 02 	sts	0x0200, r24
     32e:	90 93 01 02 	sts	0x0201, r25
     332:	a0 93 02 02 	sts	0x0202, r26
     336:	b0 93 03 02 	sts	0x0203, r27
}
     33a:	bf 91       	pop	r27
     33c:	af 91       	pop	r26
     33e:	9f 91       	pop	r25
     340:	8f 91       	pop	r24
     342:	0f 90       	pop	r0
     344:	0f be       	out	0x3f, r0	; 63
     346:	0f 90       	pop	r0
     348:	1f 90       	pop	r1
     34a:	18 95       	reti

0000034c <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     34c:	1f 92       	push	r1
     34e:	0f 92       	push	r0
     350:	0f b6       	in	r0, 0x3f	; 63
     352:	0f 92       	push	r0
     354:	11 24       	eor	r1, r1
     356:	8f 93       	push	r24
     358:	9f 93       	push	r25
     35a:	af 93       	push	r26
     35c:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     35e:	80 91 04 02 	lds	r24, 0x0204
     362:	90 91 05 02 	lds	r25, 0x0205
     366:	a0 91 06 02 	lds	r26, 0x0206
     36a:	b0 91 07 02 	lds	r27, 0x0207
     36e:	01 96       	adiw	r24, 0x01	; 1
     370:	a1 1d       	adc	r26, r1
     372:	b1 1d       	adc	r27, r1
     374:	80 93 04 02 	sts	0x0204, r24
     378:	90 93 05 02 	sts	0x0205, r25
     37c:	a0 93 06 02 	sts	0x0206, r26
     380:	b0 93 07 02 	sts	0x0207, r27
}
     384:	bf 91       	pop	r27
     386:	af 91       	pop	r26
     388:	9f 91       	pop	r25
     38a:	8f 91       	pop	r24
     38c:	0f 90       	pop	r0
     38e:	0f be       	out	0x3f, r0	; 63
     390:	0f 90       	pop	r0
     392:	1f 90       	pop	r1
     394:	18 95       	reti

00000396 <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
     396:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     398:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
     39a:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 		// reading the PORTA original status
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     39c:	98 2b       	or	r25, r24
	PORTA = PortARestore; 		// executing the command
     39e:	92 b9       	out	0x02, r25	; 2
}
     3a0:	08 95       	ret

000003a2 <forward>:

void forward (void) //both wheels forward
{
	motion_set(0x06);
     3a2:	86 e0       	ldi	r24, 0x06	; 6
     3a4:	0e 94 cb 01 	call	0x396	; 0x396 <motion_set>
}
     3a8:	08 95       	ret

000003aa <back>:

void back (void) //both wheels backward
{
	motion_set(0x09);
     3aa:	89 e0       	ldi	r24, 0x09	; 9
     3ac:	0e 94 cb 01 	call	0x396	; 0x396 <motion_set>
}
     3b0:	08 95       	ret

000003b2 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
     3b2:	85 e0       	ldi	r24, 0x05	; 5
     3b4:	0e 94 cb 01 	call	0x396	; 0x396 <motion_set>
}
     3b8:	08 95       	ret

000003ba <right>:

void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
     3ba:	8a e0       	ldi	r24, 0x0A	; 10
     3bc:	0e 94 cb 01 	call	0x396	; 0x396 <motion_set>
}
     3c0:	08 95       	ret

000003c2 <soft_left>:

void soft_left (void) //Left wheel stationary, Right wheel forward
{
	motion_set(0x04);
     3c2:	84 e0       	ldi	r24, 0x04	; 4
     3c4:	0e 94 cb 01 	call	0x396	; 0x396 <motion_set>
}
     3c8:	08 95       	ret

000003ca <soft_right>:

void soft_right (void) //Left wheel forward, Right wheel is stationary
{
	motion_set(0x02);
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	0e 94 cb 01 	call	0x396	; 0x396 <motion_set>
}
     3d0:	08 95       	ret

000003d2 <soft_left_2>:

void soft_left_2 (void) //Left wheel backward, right wheel stationary
{
	motion_set(0x01);
     3d2:	81 e0       	ldi	r24, 0x01	; 1
     3d4:	0e 94 cb 01 	call	0x396	; 0x396 <motion_set>
}
     3d8:	08 95       	ret

000003da <soft_right_2>:

void soft_right_2 (void) //Left wheel stationary, Right wheel backward
{
	motion_set(0x08);
     3da:	88 e0       	ldi	r24, 0x08	; 8
     3dc:	0e 94 cb 01 	call	0x396	; 0x396 <motion_set>
}
     3e0:	08 95       	ret

000003e2 <stop>:

void stop (void)
{
	motion_set(0x00);
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	0e 94 cb 01 	call	0x396	; 0x396 <motion_set>
}
     3e8:	08 95       	ret

000003ea <angle_rotate>:


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     3ea:	0f 93       	push	r16
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
     3f0:	bc 01       	movw	r22, r24
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 04 13 	call	0x2608	; 0x2608 <__floatunsisf>
     3fa:	28 e4       	ldi	r18, 0x48	; 72
     3fc:	31 ee       	ldi	r19, 0xE1	; 225
     3fe:	42 e8       	ldi	r20, 0x82	; 130
     400:	50 e4       	ldi	r21, 0x40	; 64
     402:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     406:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <__fixunssfsi>
     40a:	dc 01       	movw	r26, r24
     40c:	cb 01       	movw	r24, r22
     40e:	a0 e0       	ldi	r26, 0x00	; 0
     410:	b0 e0       	ldi	r27, 0x00	; 0
	ShaftCountRight = 0;
     412:	10 92 00 02 	sts	0x0200, r1
     416:	10 92 01 02 	sts	0x0201, r1
     41a:	10 92 02 02 	sts	0x0202, r1
     41e:	10 92 03 02 	sts	0x0203, r1
	ShaftCountLeft = 0;
     422:	10 92 04 02 	sts	0x0204, r1
     426:	10 92 05 02 	sts	0x0205, r1
     42a:	10 92 06 02 	sts	0x0206, r1
     42e:	10 92 07 02 	sts	0x0207, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     432:	f1 e0       	ldi	r31, 0x01	; 1
     434:	c0 e0       	ldi	r28, 0x00	; 0
     436:	40 91 00 02 	lds	r20, 0x0200
     43a:	50 91 01 02 	lds	r21, 0x0201
     43e:	60 91 02 02 	lds	r22, 0x0202
     442:	70 91 03 02 	lds	r23, 0x0203
     446:	00 91 04 02 	lds	r16, 0x0204
     44a:	10 91 05 02 	lds	r17, 0x0205
     44e:	20 91 06 02 	lds	r18, 0x0206
     452:	30 91 07 02 	lds	r19, 0x0207
     456:	ef 2f       	mov	r30, r31
     458:	48 17       	cp	r20, r24
     45a:	59 07       	cpc	r21, r25
     45c:	6a 07       	cpc	r22, r26
     45e:	7b 07       	cpc	r23, r27
     460:	08 f4       	brcc	.+2      	; 0x464 <angle_rotate+0x7a>
     462:	ec 2f       	mov	r30, r28
     464:	ee 23       	and	r30, r30
     466:	49 f4       	brne	.+18     	; 0x47a <angle_rotate+0x90>
     468:	4f 2f       	mov	r20, r31
     46a:	08 17       	cp	r16, r24
     46c:	19 07       	cpc	r17, r25
     46e:	2a 07       	cpc	r18, r26
     470:	3b 07       	cpc	r19, r27
     472:	08 f4       	brcc	.+2      	; 0x476 <angle_rotate+0x8c>
     474:	4c 2f       	mov	r20, r28
     476:	44 23       	and	r20, r20
     478:	f1 f2       	breq	.-68     	; 0x436 <angle_rotate+0x4c>
		break;
	}
	stop(); //Stop robot
     47a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
}
     47e:	cf 91       	pop	r28
     480:	1f 91       	pop	r17
     482:	0f 91       	pop	r16
     484:	08 95       	ret

00000486 <linear_distance_mm>:
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     486:	bc 01       	movw	r22, r24
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 04 13 	call	0x2608	; 0x2608 <__floatunsisf>
     490:	25 ee       	ldi	r18, 0xE5	; 229
     492:	30 ed       	ldi	r19, 0xD0	; 208
     494:	4a ea       	ldi	r20, 0xAA	; 170
     496:	50 e4       	ldi	r21, 0x40	; 64
     498:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     49c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <__fixunssfsi>
     4a0:	46 2f       	mov	r20, r22
     4a2:	57 2f       	mov	r21, r23
     4a4:	68 2f       	mov	r22, r24
     4a6:	79 2f       	mov	r23, r25
	
	ShaftCountRight = 0;
     4a8:	10 92 00 02 	sts	0x0200, r1
     4ac:	10 92 01 02 	sts	0x0201, r1
     4b0:	10 92 02 02 	sts	0x0202, r1
     4b4:	10 92 03 02 	sts	0x0203, r1
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
     4b8:	80 91 00 02 	lds	r24, 0x0200
     4bc:	90 91 01 02 	lds	r25, 0x0201
     4c0:	a0 91 02 02 	lds	r26, 0x0202
     4c4:	b0 91 03 02 	lds	r27, 0x0203
     4c8:	48 17       	cp	r20, r24
     4ca:	59 07       	cpc	r21, r25
     4cc:	6a 07       	cpc	r22, r26
     4ce:	7b 07       	cpc	r23, r27
     4d0:	98 f7       	brcc	.-26     	; 0x4b8 <linear_distance_mm+0x32>
		{
			break;
		}
	}
	stop(); //Stop robot
     4d2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
}
     4d6:	08 95       	ret

000004d8 <linear1_distance_mm>:
int linear1_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     4d8:	bc 01       	movw	r22, r24
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 04 13 	call	0x2608	; 0x2608 <__floatunsisf>
     4e2:	25 ee       	ldi	r18, 0xE5	; 229
     4e4:	30 ed       	ldi	r19, 0xD0	; 208
     4e6:	4a ea       	ldi	r20, 0xAA	; 170
     4e8:	50 e4       	ldi	r21, 0x40	; 64
     4ea:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     4ee:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <__fixunssfsi>
     4f2:	46 2f       	mov	r20, r22
     4f4:	57 2f       	mov	r21, r23
     4f6:	68 2f       	mov	r22, r24
     4f8:	79 2f       	mov	r23, r25
	
	ShaftCountRight = 0;
     4fa:	10 92 00 02 	sts	0x0200, r1
     4fe:	10 92 01 02 	sts	0x0201, r1
     502:	10 92 02 02 	sts	0x0202, r1
     506:	10 92 03 02 	sts	0x0203, r1
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
     50a:	80 91 00 02 	lds	r24, 0x0200
     50e:	90 91 01 02 	lds	r25, 0x0201
     512:	a0 91 02 02 	lds	r26, 0x0202
     516:	b0 91 03 02 	lds	r27, 0x0203
     51a:	48 17       	cp	r20, r24
     51c:	59 07       	cpc	r21, r25
     51e:	6a 07       	cpc	r22, r26
     520:	7b 07       	cpc	r23, r27
     522:	98 f7       	brcc	.-26     	; 0x50a <linear1_distance_mm+0x32>
		{
			break;
		}
	}
	stop();
     524:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
	return 1; //Stop robot
}
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	08 95       	ret

0000052e <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	ec 01       	movw	r28, r24
	forward();
     534:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linear_distance_mm(DistanceInMM);
     538:	ce 01       	movw	r24, r28
     53a:	0e 94 43 02 	call	0x486	; 0x486 <linear_distance_mm>
}
     53e:	df 91       	pop	r29
     540:	cf 91       	pop	r28
     542:	08 95       	ret

00000544 <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ec 01       	movw	r28, r24
	back();
     54a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
	linear_distance_mm(DistanceInMM);
     54e:	ce 01       	movw	r24, r28
     550:	0e 94 43 02 	call	0x486	; 0x486 <linear_distance_mm>
}
     554:	df 91       	pop	r29
     556:	cf 91       	pop	r28
     558:	08 95       	ret

0000055a <left_degrees>:

void left_degrees(unsigned int Degrees)
{
     55a:	cf 93       	push	r28
     55c:	df 93       	push	r29
     55e:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
     560:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <left>
	angle_rotate(Degrees);
     564:	ce 01       	movw	r24, r28
     566:	0e 94 f5 01 	call	0x3ea	; 0x3ea <angle_rotate>
}
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	08 95       	ret

00000570 <right_degrees>:



void right_degrees(unsigned int Degrees)
{
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
     576:	0e 94 dd 01 	call	0x3ba	; 0x3ba <right>
	angle_rotate(Degrees);
     57a:	ce 01       	movw	r24, r28
     57c:	0e 94 f5 01 	call	0x3ea	; 0x3ea <angle_rotate>
}
     580:	df 91       	pop	r29
     582:	cf 91       	pop	r28
     584:	08 95       	ret

00000586 <soft_left_degrees>:


void soft_left_degrees(unsigned int Degrees)
{
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
     58a:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left(); //Turn soft left
     58c:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <soft_left>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     590:	ce 01       	movw	r24, r28
     592:	88 0f       	add	r24, r24
     594:	99 1f       	adc	r25, r25
     596:	0e 94 f5 01 	call	0x3ea	; 0x3ea <angle_rotate>
}
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <soft_right_degrees>:

void soft_right_degrees(unsigned int Degrees)
{
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right();  //Turn soft right
     5a6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <soft_right>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     5aa:	ce 01       	movw	r24, r28
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	0e 94 f5 01 	call	0x3ea	; 0x3ea <angle_rotate>
}
     5b4:	df 91       	pop	r29
     5b6:	cf 91       	pop	r28
     5b8:	08 95       	ret

000005ba <soft_left_2_degrees>:

void soft_left_2_degrees(unsigned int Degrees)
{
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_left_2(); //Turn reverse soft left
     5c0:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <soft_left_2>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     5c4:	ce 01       	movw	r24, r28
     5c6:	88 0f       	add	r24, r24
     5c8:	99 1f       	adc	r25, r25
     5ca:	0e 94 f5 01 	call	0x3ea	; 0x3ea <angle_rotate>
}
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <soft_right_2_degrees>:

void soft_right_2_degrees(unsigned int Degrees)
{
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	ec 01       	movw	r28, r24
	// 176 pulses for 360 degrees rotation 2.045 degrees per count
	soft_right_2();  //Turn reverse soft right
     5da:	0e 94 ed 01 	call	0x3da	; 0x3da <soft_right_2>
	Degrees=Degrees*2;
	angle_rotate(Degrees);
     5de:	ce 01       	movw	r24, r28
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	0e 94 f5 01 	call	0x3ea	; 0x3ea <angle_rotate>
}
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <init_devices>:

//Function to initialize all the devices
void init_devices()
{
	cli(); //Clears the global interrupt
     5ee:	f8 94       	cli
	port_init();  //Initializes all the ports
     5f0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <port_init>
	left_position_encoder_interrupt_init();
     5f4:	0e 94 6f 01 	call	0x2de	; 0x2de <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
     5f8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <right_position_encoder_interrupt_init>
	sei();   // Enables the global interrupt
     5fc:	78 94       	sei
}
     5fe:	08 95       	ret

00000600 <timer1_init>:
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 52.25Hz 
void timer1_init(void)
{
 TCCR1B = 0x00; //stop
     600:	e1 e8       	ldi	r30, 0x81	; 129
     602:	f0 e0       	ldi	r31, 0x00	; 0
     604:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     606:	8c ef       	ldi	r24, 0xFC	; 252
     608:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
     612:	93 e0       	ldi	r25, 0x03	; 3
     614:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     618:	8f ef       	ldi	r24, 0xFF	; 255
     61a:	80 93 88 00 	sts	0x0088, r24
 OCR1BH = 0x03;	//Output compare Register high value for servo 2
     61e:	90 93 8b 00 	sts	0x008B, r25
 OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     622:	80 93 8a 00 	sts	0x008A, r24
 OCR1CH = 0x03;	//Output compare Register high value for servo 3
     626:	90 93 8d 00 	sts	0x008D, r25
 OCR1CL = 0xFF;	//Output Compare Register low Value For servo 3
     62a:	80 93 8c 00 	sts	0x008C, r24
 ICR1H  = 0x03;	
     62e:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
     632:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     636:	8b ea       	ldi	r24, 0xAB	; 171
     638:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     63c:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     640:	8c e0       	ldi	r24, 0x0C	; 12
     642:	80 83       	st	Z, r24
}
     644:	08 95       	ret

00000646 <timer5_init>:
void timer5_init()
{
	TCCR5B = 0x00; //Stop
     646:	e1 e2       	ldi	r30, 0x21	; 33
     648:	f1 e0       	ldi	r31, 0x01	; 1
     64a:	10 82       	st	Z, r1
	TCNT5H = 0xFF; //Counter higher 8-bit value to which OCR5xH value is compared with
     64c:	8f ef       	ldi	r24, 0xFF	; 255
     64e:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01; //Counter lower 8-bit value to which OCR5xH value is compared with
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00; //Output compare register high value for Left Motor
     658:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF; //Output compare register low value for Left Motor
     65c:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00; //Output compare register high value for Right Motor
     660:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF; //Output compare register low value for Right Motor
     664:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00; //Output compare register high value for Motor C1
     668:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF; //Output compare register low value for Motor C1
     66c:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9; //COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1
     670:	89 ea       	ldi	r24, 0xA9	; 169
     672:	80 93 20 01 	sts	0x0120, r24
	// COM5C0=0
	//For Overriding normal port functionality to OCRnA outputs. WGM51=0, WGM50=1 Along With GM52 //in
	//TCCR5B for Selecting FAST PWM 8-bit Mode
	TCCR5B = 0x0B; //WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     676:	8b e0       	ldi	r24, 0x0B	; 11
     678:	80 83       	st	Z, r24
}
     67a:	08 95       	ret

0000067c <velocity>:
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     67c:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     680:	60 93 2a 01 	sts	0x012A, r22
}
     684:	08 95       	ret

00000686 <init_devices1>:
//Function to initialize all the peripherals
void init_devices1(void)
{
 cli(); //disable all interrupts
     686:	f8 94       	cli
 port_init1();
     688:	0e 94 68 01 	call	0x2d0	; 0x2d0 <port_init1>
 timer1_init();
     68c:	0e 94 00 03 	call	0x600	; 0x600 <timer1_init>
 sei(); //re-enable interrupts 
     690:	78 94       	sei
}
     692:	08 95       	ret

00000694 <init_devices2>:
void init_devices2(void)
{
	cli(); //disable all interrupts
     694:	f8 94       	cli
	timer5_init();
     696:	0e 94 23 03 	call	0x646	; 0x646 <timer5_init>
	adc_init();
     69a:	0e 94 e6 00 	call	0x1cc	; 0x1cc <adc_init>
	sei(); //re-enable interrupts
     69e:	78 94       	sei
}
     6a0:	08 95       	ret

000006a2 <servo_1>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR1AH = 0x00;
     6a2:	10 92 89 00 	sts	0x0089, r1

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
     6a6:	68 2f       	mov	r22, r24
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 04 13 	call	0x2608	; 0x2608 <__floatunsisf>
     6b2:	2b e7       	ldi	r18, 0x7B	; 123
     6b4:	34 e1       	ldi	r19, 0x14	; 20
     6b6:	4e ee       	ldi	r20, 0xEE	; 238
     6b8:	5f e3       	ldi	r21, 0x3F	; 63
     6ba:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__divsf3>
     6be:	20 e0       	ldi	r18, 0x00	; 0
     6c0:	30 e0       	ldi	r19, 0x00	; 0
     6c2:	4c e0       	ldi	r20, 0x0C	; 12
     6c4:	52 e4       	ldi	r21, 0x42	; 66
     6c6:	0e 94 07 12 	call	0x240e	; 0x240e <__addsf3>
 OCR1AH = 0x00;
 OCR1AL = (unsigned char) PositionPanServo;
     6ca:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <__fixunssfsi>
     6ce:	60 93 88 00 	sts	0x0088, r22
}
     6d2:	08 95       	ret

000006d4 <servo_2>:
//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
 OCR1BH = 0x00;
     6d4:	10 92 8b 00 	sts	0x008B, r1

//Function to rotate Servo 2 by a specified angle in the multiples of 1.86 degrees
void servo_2(unsigned char degrees)
{
 float PositionTiltServo = 0;
 PositionTiltServo = ((float)degrees / 1.86) + 35.0;
     6d8:	68 2f       	mov	r22, r24
     6da:	70 e0       	ldi	r23, 0x00	; 0
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 04 13 	call	0x2608	; 0x2608 <__floatunsisf>
     6e4:	2b e7       	ldi	r18, 0x7B	; 123
     6e6:	34 e1       	ldi	r19, 0x14	; 20
     6e8:	4e ee       	ldi	r20, 0xEE	; 238
     6ea:	5f e3       	ldi	r21, 0x3F	; 63
     6ec:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__divsf3>
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	4c e0       	ldi	r20, 0x0C	; 12
     6f6:	52 e4       	ldi	r21, 0x42	; 66
     6f8:	0e 94 07 12 	call	0x240e	; 0x240e <__addsf3>
 OCR1BH = 0x00;
 OCR1BL = (unsigned char) PositionTiltServo;
     6fc:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <__fixunssfsi>
     700:	60 93 8a 00 	sts	0x008A, r22
}
     704:	08 95       	ret

00000706 <servo_3>:
//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 1.86) + 35.0;
 OCR1CH = 0x00;
     706:	10 92 8d 00 	sts	0x008D, r1

//Function to rotate Servo 3 by a specified angle in the multiples of 1.86 degrees
void servo_3(unsigned char degrees)
{
 float PositionServo = 0;
 PositionServo = ((float)degrees / 1.86) + 35.0;
     70a:	68 2f       	mov	r22, r24
     70c:	70 e0       	ldi	r23, 0x00	; 0
     70e:	80 e0       	ldi	r24, 0x00	; 0
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	0e 94 04 13 	call	0x2608	; 0x2608 <__floatunsisf>
     716:	2b e7       	ldi	r18, 0x7B	; 123
     718:	34 e1       	ldi	r19, 0x14	; 20
     71a:	4e ee       	ldi	r20, 0xEE	; 238
     71c:	5f e3       	ldi	r21, 0x3F	; 63
     71e:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__divsf3>
     722:	20 e0       	ldi	r18, 0x00	; 0
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	4c e0       	ldi	r20, 0x0C	; 12
     728:	52 e4       	ldi	r21, 0x42	; 66
     72a:	0e 94 07 12 	call	0x240e	; 0x240e <__addsf3>
 OCR1CH = 0x00;
 OCR1CL = (unsigned char) PositionServo;
     72e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <__fixunssfsi>
     732:	60 93 8c 00 	sts	0x008C, r22
}
     736:	08 95       	ret

00000738 <servo_1_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03; 
     738:	83 e0       	ldi	r24, 0x03	; 3
     73a:	80 93 89 00 	sts	0x0089, r24
 OCR1AL = 0xFF; //Servo 1 off
     73e:	8f ef       	ldi	r24, 0xFF	; 255
     740:	80 93 88 00 	sts	0x0088, r24
}
     744:	08 95       	ret

00000746 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
 OCR1BH = 0x03;
     746:	83 e0       	ldi	r24, 0x03	; 3
     748:	80 93 8b 00 	sts	0x008B, r24
 OCR1BL = 0xFF; //Servo 2 off
     74c:	8f ef       	ldi	r24, 0xFF	; 255
     74e:	80 93 8a 00 	sts	0x008A, r24
}
     752:	08 95       	ret

00000754 <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
 OCR1CH = 0x03;
     754:	83 e0       	ldi	r24, 0x03	; 3
     756:	80 93 8d 00 	sts	0x008D, r24
 OCR1CL = 0xFF; //Servo 3 off
     75a:	8f ef       	ldi	r24, 0xFF	; 255
     75c:	80 93 8c 00 	sts	0x008C, r24
} 
     760:	08 95       	ret

00000762 <ADC_Conversion>:
}

unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	if(Ch>7)
     762:	88 30       	cpi	r24, 0x08	; 8
     764:	18 f0       	brcs	.+6      	; 0x76c <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
     766:	98 e0       	ldi	r25, 0x08	; 8
     768:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;
     76c:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;
     76e:	80 62       	ori	r24, 0x20	; 32
     770:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40; //Set start conversion bit
     774:	ea e7       	ldi	r30, 0x7A	; 122
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	80 81       	ld	r24, Z
     77a:	80 64       	ori	r24, 0x40	; 64
     77c:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0); //Wait for ADC conversion to complete
     77e:	80 81       	ld	r24, Z
     780:	84 ff       	sbrs	r24, 4
     782:	fd cf       	rjmp	.-6      	; 0x77e <ADC_Conversion+0x1c>
	a=ADCH;
     784:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     788:	ea e7       	ldi	r30, 0x7A	; 122
     78a:	f0 e0       	ldi	r31, 0x00	; 0
     78c:	90 81       	ld	r25, Z
     78e:	90 61       	ori	r25, 0x10	; 16
     790:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     792:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     796:	08 95       	ret

00000798 <rotate>:

	void rotate(void)
	{
		
		
		servo_1(90);
     798:	8a e5       	ldi	r24, 0x5A	; 90
     79a:	0e 94 51 03 	call	0x6a2	; 0x6a2 <servo_1>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     79e:	8f ef       	ldi	r24, 0xFF	; 255
     7a0:	9f ef       	ldi	r25, 0xFF	; 255
     7a2:	a9 e5       	ldi	r26, 0x59	; 89
     7a4:	81 50       	subi	r24, 0x01	; 1
     7a6:	90 40       	sbci	r25, 0x00	; 0
     7a8:	a0 40       	sbci	r26, 0x00	; 0
     7aa:	e1 f7       	brne	.-8      	; 0x7a4 <rotate+0xc>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <rotate+0x16>
     7ae:	00 00       	nop
		//Moves robot forward 100mm
		
		_delay_ms(2000);

		servo_1(11);
     7b0:	8b e0       	ldi	r24, 0x0B	; 11
     7b2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <servo_1>
     7b6:	8f ef       	ldi	r24, 0xFF	; 255
     7b8:	9f ef       	ldi	r25, 0xFF	; 255
     7ba:	a9 e5       	ldi	r26, 0x59	; 89
     7bc:	81 50       	subi	r24, 0x01	; 1
     7be:	90 40       	sbci	r25, 0x00	; 0
     7c0:	a0 40       	sbci	r26, 0x00	; 0
     7c2:	e1 f7       	brne	.-8      	; 0x7bc <rotate+0x24>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <rotate+0x2e>
     7c6:	00 00       	nop
		_delay_ms(2000);
		
		servo_2(180);
     7c8:	84 eb       	ldi	r24, 0xB4	; 180
     7ca:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <servo_2>
     7ce:	8f ef       	ldi	r24, 0xFF	; 255
     7d0:	9f ef       	ldi	r25, 0xFF	; 255
     7d2:	a9 e5       	ldi	r26, 0x59	; 89
     7d4:	81 50       	subi	r24, 0x01	; 1
     7d6:	90 40       	sbci	r25, 0x00	; 0
     7d8:	a0 40       	sbci	r26, 0x00	; 0
     7da:	e1 f7       	brne	.-8      	; 0x7d4 <rotate+0x3c>
     7dc:	00 c0       	rjmp	.+0      	; 0x7de <rotate+0x46>
     7de:	00 00       	nop
		_delay_ms(2000);
		init_devices1();
     7e0:	0e 94 43 03 	call	0x686	; 0x686 <init_devices1>
		servo_1(90);
     7e4:	8a e5       	ldi	r24, 0x5A	; 90
     7e6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <servo_1>
     7ea:	8f ef       	ldi	r24, 0xFF	; 255
     7ec:	9f ef       	ldi	r25, 0xFF	; 255
     7ee:	a9 e5       	ldi	r26, 0x59	; 89
     7f0:	81 50       	subi	r24, 0x01	; 1
     7f2:	90 40       	sbci	r25, 0x00	; 0
     7f4:	a0 40       	sbci	r26, 0x00	; 0
     7f6:	e1 f7       	brne	.-8      	; 0x7f0 <rotate+0x58>
     7f8:	00 c0       	rjmp	.+0      	; 0x7fa <rotate+0x62>
     7fa:	00 00       	nop
		_delay_ms(2000);
		servo_2(0);
     7fc:	80 e0       	ldi	r24, 0x00	; 0
     7fe:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <servo_2>
		
		
		stopp:stop();
     802:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
		
	}
     806:	08 95       	ret

00000808 <linef>:
	
	void linef(unsigned int DistanceInMM)
	{
     808:	cf 92       	push	r12
     80a:	df 92       	push	r13
     80c:	ef 92       	push	r14
     80e:	ff 92       	push	r15
     810:	1f 93       	push	r17
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
		bool left1,center1, right1,s=0;
		
		float ReqdShaftCount = 0;
		unsigned long int ReqdShaftCountInt = 0;

		ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     816:	bc 01       	movw	r22, r24
     818:	80 e0       	ldi	r24, 0x00	; 0
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 04 13 	call	0x2608	; 0x2608 <__floatunsisf>
     820:	25 ee       	ldi	r18, 0xE5	; 229
     822:	30 ed       	ldi	r19, 0xD0	; 208
     824:	4a ea       	ldi	r20, 0xAA	; 170
     826:	50 e4       	ldi	r21, 0x40	; 64
     828:	0e 94 6b 12 	call	0x24d6	; 0x24d6 <__divsf3>
		ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     82c:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <__fixunssfsi>
     830:	c6 2e       	mov	r12, r22
     832:	d7 2e       	mov	r13, r23
     834:	e8 2e       	mov	r14, r24
     836:	f9 2e       	mov	r15, r25
		
		ShaftCountRight = 0;
     838:	10 92 00 02 	sts	0x0200, r1
     83c:	10 92 01 02 	sts	0x0201, r1
     840:	10 92 02 02 	sts	0x0202, r1
     844:	10 92 03 02 	sts	0x0203, r1
		while( TRUE )
		{
			left1	= ADC_Conversion( wl_left );        // left white line sensor sens value
			right1	= ADC_Conversion( wl_right );       // right white line sensor sens value
			center1	= ADC_Conversion( wl_center );  
			s=ShaftCountRight > ReqdShaftCountInt;										    // centre white line sensor sens value
     848:	10 e0       	ldi	r17, 0x00	; 0
		ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
		
		ShaftCountRight = 0;
		while( TRUE )
		{
			left1	= ADC_Conversion( wl_left );        // left white line sensor sens value
     84a:	83 e0       	ldi	r24, 0x03	; 3
     84c:	0e 94 b1 03 	call	0x762	; 0x762 <ADC_Conversion>
     850:	c8 2f       	mov	r28, r24
			right1	= ADC_Conversion( wl_right );       // right white line sensor sens value
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	0e 94 b1 03 	call	0x762	; 0x762 <ADC_Conversion>
     858:	d8 2f       	mov	r29, r24
			center1	= ADC_Conversion( wl_center );  
     85a:	82 e0       	ldi	r24, 0x02	; 2
     85c:	0e 94 b1 03 	call	0x762	; 0x762 <ADC_Conversion>
			s=ShaftCountRight > ReqdShaftCountInt;										    // centre white line sensor sens value
     860:	40 91 00 02 	lds	r20, 0x0200
     864:	50 91 01 02 	lds	r21, 0x0201
     868:	60 91 02 02 	lds	r22, 0x0202
     86c:	70 91 03 02 	lds	r23, 0x0203
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	c4 16       	cp	r12, r20
     874:	d5 06       	cpc	r13, r21
     876:	e6 06       	cpc	r14, r22
     878:	f7 06       	cpc	r15, r23
     87a:	08 f0       	brcs	.+2      	; 0x87e <linef+0x76>
     87c:	91 2f       	mov	r25, r17

			
			 if( left1 < WLTHRESHOLD && right1 < WLTHRESHOLD && center1 > WLTHRESHOLD && !s ) // if centre white line sensor is on black line than forward bot
     87e:	c8 32       	cpi	r28, 0x28	; 40
     880:	58 f4       	brcc	.+22     	; 0x898 <linef+0x90>
     882:	d8 32       	cpi	r29, 0x28	; 40
     884:	48 f4       	brcc	.+18     	; 0x898 <linef+0x90>
     886:	89 32       	cpi	r24, 0x29	; 41
     888:	38 f0       	brcs	.+14     	; 0x898 <linef+0x90>
     88a:	99 23       	and	r25, r25
     88c:	29 f4       	brne	.+10     	; 0x898 <linef+0x90>
			velocity( 255, 255 );
     88e:	8f ef       	ldi	r24, 0xFF	; 255
     890:	6f ef       	ldi	r22, 0xFF	; 255
     892:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
     896:	d9 cf       	rjmp	.-78     	; 0x84a <linef+0x42>
			else if( center1 < WLTHRESHOLD && right1 < WLTHRESHOLD && left1 > WLTHRESHOLD && !s) // if left white line sensor is on black line than stops right wheel and initialze left wheel
     898:	88 32       	cpi	r24, 0x28	; 40
     89a:	b0 f4       	brcc	.+44     	; 0x8c8 <linef+0xc0>
     89c:	d8 32       	cpi	r29, 0x28	; 40
     89e:	48 f4       	brcc	.+18     	; 0x8b2 <linef+0xaa>
     8a0:	c9 32       	cpi	r28, 0x29	; 41
     8a2:	38 f0       	brcs	.+14     	; 0x8b2 <linef+0xaa>
     8a4:	99 23       	and	r25, r25
     8a6:	29 f4       	brne	.+10     	; 0x8b2 <linef+0xaa>
			velocity( 0, 255 );
     8a8:	81 2f       	mov	r24, r17
     8aa:	6f ef       	ldi	r22, 0xFF	; 255
     8ac:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
     8b0:	cc cf       	rjmp	.-104    	; 0x84a <linef+0x42>
			else if( center1 < WLTHRESHOLD && left1 < WLTHRESHOLD && right1 > WLTHRESHOLD && !s) // if right white line sensor is on black line than stops left wheel and initialze right wheel
     8b2:	c8 32       	cpi	r28, 0x28	; 40
     8b4:	48 f4       	brcc	.+18     	; 0x8c8 <linef+0xc0>
     8b6:	d9 32       	cpi	r29, 0x29	; 41
     8b8:	38 f0       	brcs	.+14     	; 0x8c8 <linef+0xc0>
     8ba:	99 23       	and	r25, r25
     8bc:	29 f4       	brne	.+10     	; 0x8c8 <linef+0xc0>
			velocity( 255, 0 );
     8be:	8f ef       	ldi	r24, 0xFF	; 255
     8c0:	61 2f       	mov	r22, r17
     8c2:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
     8c6:	c1 cf       	rjmp	.-126    	; 0x84a <linef+0x42>
			else if(s==1)
     8c8:	91 30       	cpi	r25, 0x01	; 1
     8ca:	09 f0       	breq	.+2      	; 0x8ce <linef+0xc6>
     8cc:	be cf       	rjmp	.-132    	; 0x84a <linef+0x42>
			break;
			
			
		}
		stop();
     8ce:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
		velocity(255,255);
     8d2:	8f ef       	ldi	r24, 0xFF	; 255
     8d4:	6f ef       	ldi	r22, 0xFF	; 255
     8d6:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
	}
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	1f 91       	pop	r17
     8e0:	ff 90       	pop	r15
     8e2:	ef 90       	pop	r14
     8e4:	df 90       	pop	r13
     8e6:	cf 90       	pop	r12
     8e8:	08 95       	ret

000008ea <linef1>:
	void linef1(void)
	{
     8ea:	cf 93       	push	r28
     8ec:	df 93       	push	r29
		bool left1,center1, right1;
		while( TRUE )
		{
			left1	= ADC_Conversion( wl_left );        // left white line sensor sens value
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	0e 94 b1 03 	call	0x762	; 0x762 <ADC_Conversion>
     8f4:	c8 2f       	mov	r28, r24
			right1	= ADC_Conversion( wl_right );       // right white line sensor sens value
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	0e 94 b1 03 	call	0x762	; 0x762 <ADC_Conversion>
     8fc:	d8 2f       	mov	r29, r24
			center1	= ADC_Conversion( wl_center );
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	0e 94 b1 03 	call	0x762	; 0x762 <ADC_Conversion>
											    // centre white line sensor sens value

			if( center1 > WLTHRESHOLD && left1 > WLTHRESHOLD || center1 > WLTHRESHOLD && right1 > WLTHRESHOLD  )     // if all white line sensors are on white surface than stops it
     904:	89 32       	cpi	r24, 0x29	; 41
     906:	20 f0       	brcs	.+8      	; 0x910 <linef1+0x26>
     908:	c9 32       	cpi	r28, 0x29	; 41
     90a:	08 f5       	brcc	.+66     	; 0x94e <linef1+0x64>
     90c:	d9 32       	cpi	r29, 0x29	; 41
     90e:	f8 f4       	brcc	.+62     	; 0x94e <linef1+0x64>
			break;
			else if( left1 < WLTHRESHOLD && right1 < WLTHRESHOLD && center1 > WLTHRESHOLD  ) // if centre white line sensor is on black line than forward bot
     910:	c8 32       	cpi	r28, 0x28	; 40
     912:	48 f4       	brcc	.+18     	; 0x926 <linef1+0x3c>
     914:	d8 32       	cpi	r29, 0x28	; 40
     916:	38 f4       	brcc	.+14     	; 0x926 <linef1+0x3c>
     918:	89 32       	cpi	r24, 0x29	; 41
     91a:	28 f0       	brcs	.+10     	; 0x926 <linef1+0x3c>
			velocity( 255, 255 );
     91c:	8f ef       	ldi	r24, 0xFF	; 255
     91e:	6f ef       	ldi	r22, 0xFF	; 255
     920:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
     924:	e4 cf       	rjmp	.-56     	; 0x8ee <linef1+0x4>
			else if( center1 < WLTHRESHOLD && right1 < WLTHRESHOLD && left1 > WLTHRESHOLD) // if left white line sensor is on black line than stops right wheel and initialze left wheel
     926:	88 32       	cpi	r24, 0x28	; 40
     928:	10 f7       	brcc	.-60     	; 0x8ee <linef1+0x4>
     92a:	d8 32       	cpi	r29, 0x28	; 40
     92c:	38 f4       	brcc	.+14     	; 0x93c <linef1+0x52>
     92e:	c9 32       	cpi	r28, 0x29	; 41
     930:	28 f0       	brcs	.+10     	; 0x93c <linef1+0x52>
			velocity( 0, 255 );
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	6f ef       	ldi	r22, 0xFF	; 255
     936:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
     93a:	d9 cf       	rjmp	.-78     	; 0x8ee <linef1+0x4>
			else if( center1 < WLTHRESHOLD && left1 < WLTHRESHOLD && right1 > WLTHRESHOLD) // if right white line sensor is on black line than stops left wheel and initialze right wheel
     93c:	c8 32       	cpi	r28, 0x28	; 40
     93e:	b8 f6       	brcc	.-82     	; 0x8ee <linef1+0x4>
     940:	d9 32       	cpi	r29, 0x29	; 41
     942:	a8 f2       	brcs	.-86     	; 0x8ee <linef1+0x4>
			velocity( 255, 0 );
     944:	8f ef       	ldi	r24, 0xFF	; 255
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
     94c:	d0 cf       	rjmp	.-96     	; 0x8ee <linef1+0x4>
			
			
		}
		stop();
     94e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
		velocity(255,255);
     952:	8f ef       	ldi	r24, 0xFF	; 255
     954:	6f ef       	ldi	r22, 0xFF	; 255
     956:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
	}
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	08 95       	ret

00000960 <detection_right>:
	
	void detection_right(void)
	{
		sharp = ADC_Conversion(9);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	0e 94 b1 03 	call	0x762	; 0x762 <ADC_Conversion>
     966:	80 93 18 02 	sts	0x0218, r24
		value1 = Sharp_GP2D12_estimation(sharp);
     96a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Sharp_GP2D12_estimation>
     96e:	90 93 1a 02 	sts	0x021A, r25
     972:	80 93 19 02 	sts	0x0219, r24
		
		if( value1 > 50 && value1 < 150 )
     976:	c3 97       	sbiw	r24, 0x33	; 51
     978:	83 36       	cpi	r24, 0x63	; 99
     97a:	91 05       	cpc	r25, r1
     97c:	08 f0       	brcs	.+2      	; 0x980 <detection_right+0x20>
     97e:	f4 c0       	rjmp	.+488    	; 0xb68 <detection_right+0x208>
		{
			velocity(255,255);
     980:	8f ef       	ldi	r24, 0xFF	; 255
     982:	6f ef       	ldi	r22, 0xFF	; 255
     984:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
     988:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(32);
     98c:	80 e2       	ldi	r24, 0x20	; 32
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
     994:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     998:	8f ef       	ldi	r24, 0xFF	; 255
     99a:	9f eb       	ldi	r25, 0xBF	; 191
     99c:	a1 e2       	ldi	r26, 0x21	; 33
     99e:	81 50       	subi	r24, 0x01	; 1
     9a0:	90 40       	sbci	r25, 0x00	; 0
     9a2:	a0 40       	sbci	r26, 0x00	; 0
     9a4:	e1 f7       	brne	.-8      	; 0x99e <detection_right+0x3e>
     9a6:	00 c0       	rjmp	.+0      	; 0x9a8 <detection_right+0x48>
     9a8:	00 00       	nop
			_delay_ms(750);
			left_degrees(93);
     9aa:	8d e5       	ldi	r24, 0x5D	; 93
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
			stop();
     9b2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     9b6:	8f ef       	ldi	r24, 0xFF	; 255
     9b8:	9f eb       	ldi	r25, 0xBF	; 191
     9ba:	a1 e2       	ldi	r26, 0x21	; 33
     9bc:	81 50       	subi	r24, 0x01	; 1
     9be:	90 40       	sbci	r25, 0x00	; 0
     9c0:	a0 40       	sbci	r26, 0x00	; 0
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <detection_right+0x5c>
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <detection_right+0x66>
     9c6:	00 00       	nop
			_delay_ms(750);
			
			velocity(255,255);
     9c8:	8f ef       	ldi	r24, 0xFF	; 255
     9ca:	6f ef       	ldi	r22, 0xFF	; 255
     9cc:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			back();
     9d0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
			linef(15);
     9d4:	8f e0       	ldi	r24, 0x0F	; 15
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
     9dc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	9f eb       	ldi	r25, 0xBF	; 191
     9e4:	a1 e2       	ldi	r26, 0x21	; 33
     9e6:	81 50       	subi	r24, 0x01	; 1
     9e8:	90 40       	sbci	r25, 0x00	; 0
     9ea:	a0 40       	sbci	r26, 0x00	; 0
     9ec:	e1 f7       	brne	.-8      	; 0x9e6 <detection_right+0x86>
     9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <detection_right+0x90>
     9f0:	00 00       	nop
			_delay_ms(750);
			
			rotate();
     9f2:	0e 94 cc 03 	call	0x798	; 0x798 <rotate>
			stop();
     9f6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     9fa:	8f ef       	ldi	r24, 0xFF	; 255
     9fc:	9f eb       	ldi	r25, 0xBF	; 191
     9fe:	a1 e2       	ldi	r26, 0x21	; 33
     a00:	81 50       	subi	r24, 0x01	; 1
     a02:	90 40       	sbci	r25, 0x00	; 0
     a04:	a0 40       	sbci	r26, 0x00	; 0
     a06:	e1 f7       	brne	.-8      	; 0xa00 <detection_right+0xa0>
     a08:	00 c0       	rjmp	.+0      	; 0xa0a <detection_right+0xaa>
     a0a:	00 00       	nop
			
			_delay_ms(750);
			
			back();
     a0c:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
			linef(70);
     a10:	86 e4       	ldi	r24, 0x46	; 70
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			
			
			velocity( 255, 255 );
     a18:	8f ef       	ldi	r24, 0xFF	; 255
     a1a:	6f ef       	ldi	r22, 0xFF	; 255
     a1c:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
     a20:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(40);
     a24:	88 e2       	ldi	r24, 0x28	; 40
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
     a2c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     a30:	8f ef       	ldi	r24, 0xFF	; 255
     a32:	9f eb       	ldi	r25, 0xBF	; 191
     a34:	a1 e2       	ldi	r26, 0x21	; 33
     a36:	81 50       	subi	r24, 0x01	; 1
     a38:	90 40       	sbci	r25, 0x00	; 0
     a3a:	a0 40       	sbci	r26, 0x00	; 0
     a3c:	e1 f7       	brne	.-8      	; 0xa36 <detection_right+0xd6>
     a3e:	00 c0       	rjmp	.+0      	; 0xa40 <detection_right+0xe0>
     a40:	00 00       	nop
			_delay_ms(750);
			forward();
     a42:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(35);
     a46:	83 e2       	ldi	r24, 0x23	; 35
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
     a4e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	9f eb       	ldi	r25, 0xBF	; 191
     a56:	a1 e2       	ldi	r26, 0x21	; 33
     a58:	81 50       	subi	r24, 0x01	; 1
     a5a:	90 40       	sbci	r25, 0x00	; 0
     a5c:	a0 40       	sbci	r26, 0x00	; 0
     a5e:	e1 f7       	brne	.-8      	; 0xa58 <detection_right+0xf8>
     a60:	00 c0       	rjmp	.+0      	; 0xa62 <detection_right+0x102>
     a62:	00 00       	nop
			_delay_ms(750);
			left_degrees(93);
     a64:	8d e5       	ldi	r24, 0x5D	; 93
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
			stop();
     a6c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     a70:	8f ef       	ldi	r24, 0xFF	; 255
     a72:	9f eb       	ldi	r25, 0xBF	; 191
     a74:	a1 e2       	ldi	r26, 0x21	; 33
     a76:	81 50       	subi	r24, 0x01	; 1
     a78:	90 40       	sbci	r25, 0x00	; 0
     a7a:	a0 40       	sbci	r26, 0x00	; 0
     a7c:	e1 f7       	brne	.-8      	; 0xa76 <detection_right+0x116>
     a7e:	00 c0       	rjmp	.+0      	; 0xa80 <detection_right+0x120>
     a80:	00 00       	nop
			_delay_ms(750);
			
			velocity(255,255);
     a82:	8f ef       	ldi	r24, 0xFF	; 255
     a84:	6f ef       	ldi	r22, 0xFF	; 255
     a86:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
     a8a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef1();
     a8e:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			stop();
     a92:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     a96:	8f ef       	ldi	r24, 0xFF	; 255
     a98:	9f eb       	ldi	r25, 0xBF	; 191
     a9a:	a1 e2       	ldi	r26, 0x21	; 33
     a9c:	81 50       	subi	r24, 0x01	; 1
     a9e:	90 40       	sbci	r25, 0x00	; 0
     aa0:	a0 40       	sbci	r26, 0x00	; 0
     aa2:	e1 f7       	brne	.-8      	; 0xa9c <detection_right+0x13c>
     aa4:	00 c0       	rjmp	.+0      	; 0xaa6 <detection_right+0x146>
     aa6:	00 00       	nop
			
			_delay_ms(750);
			
			velocity(255,255);
     aa8:	8f ef       	ldi	r24, 0xFF	; 255
     aaa:	6f ef       	ldi	r22, 0xFF	; 255
     aac:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
     ab0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(40);
     ab4:	88 e2       	ldi	r24, 0x28	; 40
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
     abc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     ac0:	8f ef       	ldi	r24, 0xFF	; 255
     ac2:	9f eb       	ldi	r25, 0xBF	; 191
     ac4:	a1 e2       	ldi	r26, 0x21	; 33
     ac6:	81 50       	subi	r24, 0x01	; 1
     ac8:	90 40       	sbci	r25, 0x00	; 0
     aca:	a0 40       	sbci	r26, 0x00	; 0
     acc:	e1 f7       	brne	.-8      	; 0xac6 <detection_right+0x166>
     ace:	00 c0       	rjmp	.+0      	; 0xad0 <detection_right+0x170>
     ad0:	00 00       	nop
			
			_delay_ms(750);
			
			velocity(255,255);
     ad2:	8f ef       	ldi	r24, 0xFF	; 255
     ad4:	6f ef       	ldi	r22, 0xFF	; 255
     ad6:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
     ada:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef1();
     ade:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			stop();
     ae2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     ae6:	8f ef       	ldi	r24, 0xFF	; 255
     ae8:	9f eb       	ldi	r25, 0xBF	; 191
     aea:	a1 e2       	ldi	r26, 0x21	; 33
     aec:	81 50       	subi	r24, 0x01	; 1
     aee:	90 40       	sbci	r25, 0x00	; 0
     af0:	a0 40       	sbci	r26, 0x00	; 0
     af2:	e1 f7       	brne	.-8      	; 0xaec <detection_right+0x18c>
     af4:	00 c0       	rjmp	.+0      	; 0xaf6 <detection_right+0x196>
     af6:	00 00       	nop
			
			_delay_ms(750);
			
				velocity(255,255);
     af8:	8f ef       	ldi	r24, 0xFF	; 255
     afa:	6f ef       	ldi	r22, 0xFF	; 255
     afc:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
				forward();
     b00:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
				linef(72);
     b04:	88 e4       	ldi	r24, 0x48	; 72
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	0e 94 04 04 	call	0x808	; 0x808 <linef>
				stop();
     b0c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     b10:	8f ef       	ldi	r24, 0xFF	; 255
     b12:	9f eb       	ldi	r25, 0xBF	; 191
     b14:	a1 e2       	ldi	r26, 0x21	; 33
     b16:	81 50       	subi	r24, 0x01	; 1
     b18:	90 40       	sbci	r25, 0x00	; 0
     b1a:	a0 40       	sbci	r26, 0x00	; 0
     b1c:	e1 f7       	brne	.-8      	; 0xb16 <detection_right+0x1b6>
     b1e:	00 c0       	rjmp	.+0      	; 0xb20 <detection_right+0x1c0>
     b20:	00 00       	nop
				
				_delay_ms(750);
			
			right_degrees(93);
     b22:	8d e5       	ldi	r24, 0x5D	; 93
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
			stop();
     b2a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     b2e:	8f ef       	ldi	r24, 0xFF	; 255
     b30:	9f eb       	ldi	r25, 0xBF	; 191
     b32:	a1 e2       	ldi	r26, 0x21	; 33
     b34:	81 50       	subi	r24, 0x01	; 1
     b36:	90 40       	sbci	r25, 0x00	; 0
     b38:	a0 40       	sbci	r26, 0x00	; 0
     b3a:	e1 f7       	brne	.-8      	; 0xb34 <detection_right+0x1d4>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <detection_right+0x1de>
     b3e:	00 00       	nop
			
			_delay_ms(750);
			
			velocity(255,255);
     b40:	8f ef       	ldi	r24, 0xFF	; 255
     b42:	6f ef       	ldi	r22, 0xFF	; 255
     b44:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
     b48:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef1();
     b4c:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			stop();
     b50:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     b54:	8f ef       	ldi	r24, 0xFF	; 255
     b56:	9f eb       	ldi	r25, 0xBF	; 191
     b58:	a1 e2       	ldi	r26, 0x21	; 33
     b5a:	81 50       	subi	r24, 0x01	; 1
     b5c:	90 40       	sbci	r25, 0x00	; 0
     b5e:	a0 40       	sbci	r26, 0x00	; 0
     b60:	e1 f7       	brne	.-8      	; 0xb5a <detection_right+0x1fa>
     b62:	00 c0       	rjmp	.+0      	; 0xb64 <detection_right+0x204>
     b64:	00 00       	nop
     b66:	08 95       	ret
			
			
		}
		else
		{
			stop();
     b68:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     b6c:	8f ef       	ldi	r24, 0xFF	; 255
     b6e:	9f eb       	ldi	r25, 0xBF	; 191
     b70:	a1 e2       	ldi	r26, 0x21	; 33
     b72:	81 50       	subi	r24, 0x01	; 1
     b74:	90 40       	sbci	r25, 0x00	; 0
     b76:	a0 40       	sbci	r26, 0x00	; 0
     b78:	e1 f7       	brne	.-8      	; 0xb72 <detection_right+0x212>
     b7a:	00 c0       	rjmp	.+0      	; 0xb7c <detection_right+0x21c>
     b7c:	00 00       	nop
			_delay_ms(750);
			
			right_degrees(90);
     b7e:	8a e5       	ldi	r24, 0x5A	; 90
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
			stop();
     b86:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     b8a:	8f ef       	ldi	r24, 0xFF	; 255
     b8c:	9f eb       	ldi	r25, 0xBF	; 191
     b8e:	a1 e2       	ldi	r26, 0x21	; 33
     b90:	81 50       	subi	r24, 0x01	; 1
     b92:	90 40       	sbci	r25, 0x00	; 0
     b94:	a0 40       	sbci	r26, 0x00	; 0
     b96:	e1 f7       	brne	.-8      	; 0xb90 <detection_right+0x230>
     b98:	00 c0       	rjmp	.+0      	; 0xb9a <detection_right+0x23a>
     b9a:	00 00       	nop
			
			_delay_ms(750);
			
			right_degrees(90);
     b9c:	8a e5       	ldi	r24, 0x5A	; 90
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
			stop();
     ba4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     ba8:	8f ef       	ldi	r24, 0xFF	; 255
     baa:	9f eb       	ldi	r25, 0xBF	; 191
     bac:	a1 e2       	ldi	r26, 0x21	; 33
     bae:	81 50       	subi	r24, 0x01	; 1
     bb0:	90 40       	sbci	r25, 0x00	; 0
     bb2:	a0 40       	sbci	r26, 0x00	; 0
     bb4:	e1 f7       	brne	.-8      	; 0xbae <detection_right+0x24e>
     bb6:	00 c0       	rjmp	.+0      	; 0xbb8 <detection_right+0x258>
     bb8:	00 00       	nop
			
			_delay_ms(750);
			
			velocity(255,255);
     bba:	8f ef       	ldi	r24, 0xFF	; 255
     bbc:	6f ef       	ldi	r22, 0xFF	; 255
     bbe:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
     bc2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef1();
     bc6:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			stop();
     bca:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     bce:	8f ef       	ldi	r24, 0xFF	; 255
     bd0:	9f eb       	ldi	r25, 0xBF	; 191
     bd2:	a1 e2       	ldi	r26, 0x21	; 33
     bd4:	81 50       	subi	r24, 0x01	; 1
     bd6:	90 40       	sbci	r25, 0x00	; 0
     bd8:	a0 40       	sbci	r26, 0x00	; 0
     bda:	e1 f7       	brne	.-8      	; 0xbd4 <detection_right+0x274>
     bdc:	00 c0       	rjmp	.+0      	; 0xbde <detection_right+0x27e>
     bde:	00 00       	nop
			
			_delay_ms(750);
			
			velocity(255,255);
     be0:	8f ef       	ldi	r24, 0xFF	; 255
     be2:	6f ef       	ldi	r22, 0xFF	; 255
     be4:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
     be8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(40);
     bec:	88 e2       	ldi	r24, 0x28	; 40
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
     bf4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     bf8:	8f ef       	ldi	r24, 0xFF	; 255
     bfa:	9f eb       	ldi	r25, 0xBF	; 191
     bfc:	a1 e2       	ldi	r26, 0x21	; 33
     bfe:	81 50       	subi	r24, 0x01	; 1
     c00:	90 40       	sbci	r25, 0x00	; 0
     c02:	a0 40       	sbci	r26, 0x00	; 0
     c04:	e1 f7       	brne	.-8      	; 0xbfe <detection_right+0x29e>
     c06:	00 c0       	rjmp	.+0      	; 0xc08 <detection_right+0x2a8>
     c08:	00 00       	nop
			
			_delay_ms(750);
			
			velocity(255,255);
     c0a:	8f ef       	ldi	r24, 0xFF	; 255
     c0c:	6f ef       	ldi	r22, 0xFF	; 255
     c0e:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
     c12:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef1();
     c16:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			stop();
     c1a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     c1e:	8f ef       	ldi	r24, 0xFF	; 255
     c20:	9f eb       	ldi	r25, 0xBF	; 191
     c22:	a1 e2       	ldi	r26, 0x21	; 33
     c24:	81 50       	subi	r24, 0x01	; 1
     c26:	90 40       	sbci	r25, 0x00	; 0
     c28:	a0 40       	sbci	r26, 0x00	; 0
     c2a:	e1 f7       	brne	.-8      	; 0xc24 <detection_right+0x2c4>
     c2c:	00 c0       	rjmp	.+0      	; 0xc2e <detection_right+0x2ce>
     c2e:	00 00       	nop
			
			_delay_ms(750);
			
			velocity(255,255);
     c30:	8f ef       	ldi	r24, 0xFF	; 255
     c32:	6f ef       	ldi	r22, 0xFF	; 255
     c34:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
     c38:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(72);
     c3c:	88 e4       	ldi	r24, 0x48	; 72
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
     c44:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     c48:	8f ef       	ldi	r24, 0xFF	; 255
     c4a:	9f eb       	ldi	r25, 0xBF	; 191
     c4c:	a1 e2       	ldi	r26, 0x21	; 33
     c4e:	81 50       	subi	r24, 0x01	; 1
     c50:	90 40       	sbci	r25, 0x00	; 0
     c52:	a0 40       	sbci	r26, 0x00	; 0
     c54:	e1 f7       	brne	.-8      	; 0xc4e <detection_right+0x2ee>
     c56:	00 c0       	rjmp	.+0      	; 0xc58 <detection_right+0x2f8>
     c58:	00 00       	nop
			
			_delay_ms(750);
			
			right_degrees(93);
     c5a:	8d e5       	ldi	r24, 0x5D	; 93
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
			stop();
     c62:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     c66:	8f ef       	ldi	r24, 0xFF	; 255
     c68:	9f eb       	ldi	r25, 0xBF	; 191
     c6a:	a1 e2       	ldi	r26, 0x21	; 33
     c6c:	81 50       	subi	r24, 0x01	; 1
     c6e:	90 40       	sbci	r25, 0x00	; 0
     c70:	a0 40       	sbci	r26, 0x00	; 0
     c72:	e1 f7       	brne	.-8      	; 0xc6c <detection_right+0x30c>
     c74:	00 c0       	rjmp	.+0      	; 0xc76 <detection_right+0x316>
     c76:	00 00       	nop
			
			_delay_ms(750);
			
			velocity(255,255);
     c78:	8f ef       	ldi	r24, 0xFF	; 255
     c7a:	6f ef       	ldi	r22, 0xFF	; 255
     c7c:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
     c80:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef1();
     c84:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			stop();
     c88:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     c8c:	8f ef       	ldi	r24, 0xFF	; 255
     c8e:	9f eb       	ldi	r25, 0xBF	; 191
     c90:	a1 e2       	ldi	r26, 0x21	; 33
     c92:	81 50       	subi	r24, 0x01	; 1
     c94:	90 40       	sbci	r25, 0x00	; 0
     c96:	a0 40       	sbci	r26, 0x00	; 0
     c98:	e1 f7       	brne	.-8      	; 0xc92 <detection_right+0x332>
     c9a:	00 c0       	rjmp	.+0      	; 0xc9c <detection_right+0x33c>
     c9c:	00 00       	nop
     c9e:	08 95       	ret

00000ca0 <short_right_long_left_detection>:
		_delay_ms(750);
	
}
void short_right_long_left_detection(void){
	
	velocity(255,255);
     ca0:	8f ef       	ldi	r24, 0xFF	; 255
     ca2:	6f ef       	ldi	r22, 0xFF	; 255
     ca4:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
	forward();
     ca8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef(32);
     cac:	80 e2       	ldi	r24, 0x20	; 32
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	0e 94 04 04 	call	0x808	; 0x808 <linef>
	stop();
     cb4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     cb8:	8f ef       	ldi	r24, 0xFF	; 255
     cba:	9f eb       	ldi	r25, 0xBF	; 191
     cbc:	a1 e2       	ldi	r26, 0x21	; 33
     cbe:	81 50       	subi	r24, 0x01	; 1
     cc0:	90 40       	sbci	r25, 0x00	; 0
     cc2:	a0 40       	sbci	r26, 0x00	; 0
     cc4:	e1 f7       	brne	.-8      	; 0xcbe <short_right_long_left_detection+0x1e>
     cc6:	00 c0       	rjmp	.+0      	; 0xcc8 <short_right_long_left_detection+0x28>
     cc8:	00 00       	nop
	_delay_ms(750);
	right_degrees(93);
     cca:	8d e5       	ldi	r24, 0x5D	; 93
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
	stop();
     cd2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     cd6:	8f ef       	ldi	r24, 0xFF	; 255
     cd8:	9f eb       	ldi	r25, 0xBF	; 191
     cda:	a1 e2       	ldi	r26, 0x21	; 33
     cdc:	81 50       	subi	r24, 0x01	; 1
     cde:	90 40       	sbci	r25, 0x00	; 0
     ce0:	a0 40       	sbci	r26, 0x00	; 0
     ce2:	e1 f7       	brne	.-8      	; 0xcdc <short_right_long_left_detection+0x3c>
     ce4:	00 c0       	rjmp	.+0      	; 0xce6 <short_right_long_left_detection+0x46>
     ce6:	00 00       	nop
	_delay_ms(750);
	
	velocity(255,255);
     ce8:	8f ef       	ldi	r24, 0xFF	; 255
     cea:	6f ef       	ldi	r22, 0xFF	; 255
     cec:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
	back();
     cf0:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
	linef(15);
     cf4:	8f e0       	ldi	r24, 0x0F	; 15
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	0e 94 04 04 	call	0x808	; 0x808 <linef>
	stop();
     cfc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     d00:	8f ef       	ldi	r24, 0xFF	; 255
     d02:	9f eb       	ldi	r25, 0xBF	; 191
     d04:	a1 e2       	ldi	r26, 0x21	; 33
     d06:	81 50       	subi	r24, 0x01	; 1
     d08:	90 40       	sbci	r25, 0x00	; 0
     d0a:	a0 40       	sbci	r26, 0x00	; 0
     d0c:	e1 f7       	brne	.-8      	; 0xd06 <short_right_long_left_detection+0x66>
     d0e:	00 c0       	rjmp	.+0      	; 0xd10 <short_right_long_left_detection+0x70>
     d10:	00 00       	nop
	_delay_ms(750);
	
	rotate();
     d12:	0e 94 cc 03 	call	0x798	; 0x798 <rotate>
	stop();
     d16:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
	
	back();
     d1a:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
	linef1();
     d1e:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
	
	
	velocity( 255, 255 );
     d22:	8f ef       	ldi	r24, 0xFF	; 255
     d24:	6f ef       	ldi	r22, 0xFF	; 255
     d26:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
	forward();
     d2a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef(40);
     d2e:	88 e2       	ldi	r24, 0x28	; 40
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 04 04 	call	0x808	; 0x808 <linef>
	stop();
     d36:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     d3a:	8f ef       	ldi	r24, 0xFF	; 255
     d3c:	9f eb       	ldi	r25, 0xBF	; 191
     d3e:	a1 e2       	ldi	r26, 0x21	; 33
     d40:	81 50       	subi	r24, 0x01	; 1
     d42:	90 40       	sbci	r25, 0x00	; 0
     d44:	a0 40       	sbci	r26, 0x00	; 0
     d46:	e1 f7       	brne	.-8      	; 0xd40 <short_right_long_left_detection+0xa0>
     d48:	00 c0       	rjmp	.+0      	; 0xd4a <short_right_long_left_detection+0xaa>
     d4a:	00 00       	nop
	_delay_ms(750);
	forward();
     d4c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef(32);
     d50:	80 e2       	ldi	r24, 0x20	; 32
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 04 04 	call	0x808	; 0x808 <linef>
	stop();
     d58:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	9f eb       	ldi	r25, 0xBF	; 191
     d60:	a1 e2       	ldi	r26, 0x21	; 33
     d62:	81 50       	subi	r24, 0x01	; 1
     d64:	90 40       	sbci	r25, 0x00	; 0
     d66:	a0 40       	sbci	r26, 0x00	; 0
     d68:	e1 f7       	brne	.-8      	; 0xd62 <short_right_long_left_detection+0xc2>
     d6a:	00 c0       	rjmp	.+0      	; 0xd6c <short_right_long_left_detection+0xcc>
     d6c:	00 00       	nop
	_delay_ms(750);
	right_degrees(93);
     d6e:	8d e5       	ldi	r24, 0x5D	; 93
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
	stop();
     d76:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     d7a:	8f ef       	ldi	r24, 0xFF	; 255
     d7c:	9f eb       	ldi	r25, 0xBF	; 191
     d7e:	a1 e2       	ldi	r26, 0x21	; 33
     d80:	81 50       	subi	r24, 0x01	; 1
     d82:	90 40       	sbci	r25, 0x00	; 0
     d84:	a0 40       	sbci	r26, 0x00	; 0
     d86:	e1 f7       	brne	.-8      	; 0xd80 <short_right_long_left_detection+0xe0>
     d88:	00 c0       	rjmp	.+0      	; 0xd8a <short_right_long_left_detection+0xea>
     d8a:	00 00       	nop
	_delay_ms(750);
	forward();
     d8c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef1();
     d90:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
	stop();
     d94:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     d98:	8f ef       	ldi	r24, 0xFF	; 255
     d9a:	9f eb       	ldi	r25, 0xBF	; 191
     d9c:	a1 e2       	ldi	r26, 0x21	; 33
     d9e:	81 50       	subi	r24, 0x01	; 1
     da0:	90 40       	sbci	r25, 0x00	; 0
     da2:	a0 40       	sbci	r26, 0x00	; 0
     da4:	e1 f7       	brne	.-8      	; 0xd9e <short_right_long_left_detection+0xfe>
     da6:	00 c0       	rjmp	.+0      	; 0xda8 <short_right_long_left_detection+0x108>
     da8:	00 00       	nop
	_delay_ms(750);
	forward();
     daa:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef(40);
     dae:	88 e2       	ldi	r24, 0x28	; 40
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 04 04 	call	0x808	; 0x808 <linef>
	stop();
     db6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     dba:	8f ef       	ldi	r24, 0xFF	; 255
     dbc:	9f eb       	ldi	r25, 0xBF	; 191
     dbe:	a1 e2       	ldi	r26, 0x21	; 33
     dc0:	81 50       	subi	r24, 0x01	; 1
     dc2:	90 40       	sbci	r25, 0x00	; 0
     dc4:	a0 40       	sbci	r26, 0x00	; 0
     dc6:	e1 f7       	brne	.-8      	; 0xdc0 <short_right_long_left_detection+0x120>
     dc8:	00 c0       	rjmp	.+0      	; 0xdca <short_right_long_left_detection+0x12a>
     dca:	00 00       	nop
	_delay_ms(750);
	forward();
     dcc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef(35);
     dd0:	83 e2       	ldi	r24, 0x23	; 35
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 04 04 	call	0x808	; 0x808 <linef>
	stop();
     dd8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     ddc:	8f ef       	ldi	r24, 0xFF	; 255
     dde:	9f eb       	ldi	r25, 0xBF	; 191
     de0:	a1 e2       	ldi	r26, 0x21	; 33
     de2:	81 50       	subi	r24, 0x01	; 1
     de4:	90 40       	sbci	r25, 0x00	; 0
     de6:	a0 40       	sbci	r26, 0x00	; 0
     de8:	e1 f7       	brne	.-8      	; 0xde2 <short_right_long_left_detection+0x142>
     dea:	00 c0       	rjmp	.+0      	; 0xdec <short_right_long_left_detection+0x14c>
     dec:	00 00       	nop
	_delay_ms(750);
	left_degrees(93);
     dee:	8d e5       	ldi	r24, 0x5D	; 93
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
	stop();
     df6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     dfa:	8f ef       	ldi	r24, 0xFF	; 255
     dfc:	9f eb       	ldi	r25, 0xBF	; 191
     dfe:	a1 e2       	ldi	r26, 0x21	; 33
     e00:	81 50       	subi	r24, 0x01	; 1
     e02:	90 40       	sbci	r25, 0x00	; 0
     e04:	a0 40       	sbci	r26, 0x00	; 0
     e06:	e1 f7       	brne	.-8      	; 0xe00 <short_right_long_left_detection+0x160>
     e08:	00 c0       	rjmp	.+0      	; 0xe0a <short_right_long_left_detection+0x16a>
     e0a:	00 00       	nop
	_delay_ms(750);
	forward();
     e0c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef1();
     e10:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
	stop();
     e14:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     e18:	8f ef       	ldi	r24, 0xFF	; 255
     e1a:	9f eb       	ldi	r25, 0xBF	; 191
     e1c:	a1 e2       	ldi	r26, 0x21	; 33
     e1e:	81 50       	subi	r24, 0x01	; 1
     e20:	90 40       	sbci	r25, 0x00	; 0
     e22:	a0 40       	sbci	r26, 0x00	; 0
     e24:	e1 f7       	brne	.-8      	; 0xe1e <short_right_long_left_detection+0x17e>
     e26:	00 c0       	rjmp	.+0      	; 0xe28 <short_right_long_left_detection+0x188>
     e28:	00 00       	nop
	_delay_ms(750);
	forward();
     e2a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef(40);
     e2e:	88 e2       	ldi	r24, 0x28	; 40
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 04 04 	call	0x808	; 0x808 <linef>
	stop();
     e36:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
	forward();
     e3a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef1();
     e3e:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
	stop();
     e42:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     e46:	8f ef       	ldi	r24, 0xFF	; 255
     e48:	9f eb       	ldi	r25, 0xBF	; 191
     e4a:	a1 e2       	ldi	r26, 0x21	; 33
     e4c:	81 50       	subi	r24, 0x01	; 1
     e4e:	90 40       	sbci	r25, 0x00	; 0
     e50:	a0 40       	sbci	r26, 0x00	; 0
     e52:	e1 f7       	brne	.-8      	; 0xe4c <short_right_long_left_detection+0x1ac>
     e54:	00 c0       	rjmp	.+0      	; 0xe56 <short_right_long_left_detection+0x1b6>
     e56:	00 00       	nop
	_delay_ms(750);

	forward();
     e58:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef(40);
     e5c:	88 e2       	ldi	r24, 0x28	; 40
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 04 04 	call	0x808	; 0x808 <linef>
	stop();
     e64:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     e68:	8f ef       	ldi	r24, 0xFF	; 255
     e6a:	9f eb       	ldi	r25, 0xBF	; 191
     e6c:	a1 e2       	ldi	r26, 0x21	; 33
     e6e:	81 50       	subi	r24, 0x01	; 1
     e70:	90 40       	sbci	r25, 0x00	; 0
     e72:	a0 40       	sbci	r26, 0x00	; 0
     e74:	e1 f7       	brne	.-8      	; 0xe6e <short_right_long_left_detection+0x1ce>
     e76:	00 c0       	rjmp	.+0      	; 0xe78 <short_right_long_left_detection+0x1d8>
     e78:	00 00       	nop
	_delay_ms(750);
	detection_right();
     e7a:	0e 94 b0 04 	call	0x960	; 0x960 <detection_right>
     e7e:	8f ef       	ldi	r24, 0xFF	; 255
     e80:	9f ef       	ldi	r25, 0xFF	; 255
     e82:	a9 e5       	ldi	r26, 0x59	; 89
     e84:	81 50       	subi	r24, 0x01	; 1
     e86:	90 40       	sbci	r25, 0x00	; 0
     e88:	a0 40       	sbci	r26, 0x00	; 0
     e8a:	e1 f7       	brne	.-8      	; 0xe84 <short_right_long_left_detection+0x1e4>
     e8c:	00 c0       	rjmp	.+0      	; 0xe8e <short_right_long_left_detection+0x1ee>
     e8e:	00 00       	nop
	_delay_ms(2000);
	
	velocity(255,255);
     e90:	8f ef       	ldi	r24, 0xFF	; 255
     e92:	6f ef       	ldi	r22, 0xFF	; 255
     e94:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
	forward();
     e98:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef(40);
     e9c:	88 e2       	ldi	r24, 0x28	; 40
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	0e 94 04 04 	call	0x808	; 0x808 <linef>
	stop();
     ea4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     ea8:	8f ef       	ldi	r24, 0xFF	; 255
     eaa:	9f eb       	ldi	r25, 0xBF	; 191
     eac:	a1 e2       	ldi	r26, 0x21	; 33
     eae:	81 50       	subi	r24, 0x01	; 1
     eb0:	90 40       	sbci	r25, 0x00	; 0
     eb2:	a0 40       	sbci	r26, 0x00	; 0
     eb4:	e1 f7       	brne	.-8      	; 0xeae <short_right_long_left_detection+0x20e>
     eb6:	00 c0       	rjmp	.+0      	; 0xeb8 <short_right_long_left_detection+0x218>
     eb8:	00 00       	nop
	_delay_ms(750);
	
	/////
	
	velocity(255,255);
     eba:	8f ef       	ldi	r24, 0xFF	; 255
     ebc:	6f ef       	ldi	r22, 0xFF	; 255
     ebe:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
	forward();
     ec2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef(32);
     ec6:	80 e2       	ldi	r24, 0x20	; 32
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 04 04 	call	0x808	; 0x808 <linef>
	stop();
     ece:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     ed2:	8f ef       	ldi	r24, 0xFF	; 255
     ed4:	9f eb       	ldi	r25, 0xBF	; 191
     ed6:	a1 e2       	ldi	r26, 0x21	; 33
     ed8:	81 50       	subi	r24, 0x01	; 1
     eda:	90 40       	sbci	r25, 0x00	; 0
     edc:	a0 40       	sbci	r26, 0x00	; 0
     ede:	e1 f7       	brne	.-8      	; 0xed8 <short_right_long_left_detection+0x238>
     ee0:	00 c0       	rjmp	.+0      	; 0xee2 <short_right_long_left_detection+0x242>
     ee2:	00 00       	nop
	_delay_ms(750);
	left_degrees(93);
     ee4:	8d e5       	ldi	r24, 0x5D	; 93
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
	stop();
     eec:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     ef0:	8f ef       	ldi	r24, 0xFF	; 255
     ef2:	9f eb       	ldi	r25, 0xBF	; 191
     ef4:	a1 e2       	ldi	r26, 0x21	; 33
     ef6:	81 50       	subi	r24, 0x01	; 1
     ef8:	90 40       	sbci	r25, 0x00	; 0
     efa:	a0 40       	sbci	r26, 0x00	; 0
     efc:	e1 f7       	brne	.-8      	; 0xef6 <short_right_long_left_detection+0x256>
     efe:	00 c0       	rjmp	.+0      	; 0xf00 <short_right_long_left_detection+0x260>
     f00:	00 00       	nop
	_delay_ms(750);
	velocity(255,255);
     f02:	8f ef       	ldi	r24, 0xFF	; 255
     f04:	6f ef       	ldi	r22, 0xFF	; 255
     f06:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
	forward();
     f0a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef1();
     f0e:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
	stop();
     f12:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     f16:	8f ef       	ldi	r24, 0xFF	; 255
     f18:	9f eb       	ldi	r25, 0xBF	; 191
     f1a:	a1 e2       	ldi	r26, 0x21	; 33
     f1c:	81 50       	subi	r24, 0x01	; 1
     f1e:	90 40       	sbci	r25, 0x00	; 0
     f20:	a0 40       	sbci	r26, 0x00	; 0
     f22:	e1 f7       	brne	.-8      	; 0xf1c <short_right_long_left_detection+0x27c>
     f24:	00 c0       	rjmp	.+0      	; 0xf26 <short_right_long_left_detection+0x286>
     f26:	00 00       	nop
	
	_delay_ms(750);
	
	velocity(255,255);
     f28:	8f ef       	ldi	r24, 0xFF	; 255
     f2a:	6f ef       	ldi	r22, 0xFF	; 255
     f2c:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
	forward();
     f30:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef(70);
     f34:	86 e4       	ldi	r24, 0x46	; 70
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 04 04 	call	0x808	; 0x808 <linef>
	stop();
     f3c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     f40:	8f ef       	ldi	r24, 0xFF	; 255
     f42:	9f eb       	ldi	r25, 0xBF	; 191
     f44:	a1 e2       	ldi	r26, 0x21	; 33
     f46:	81 50       	subi	r24, 0x01	; 1
     f48:	90 40       	sbci	r25, 0x00	; 0
     f4a:	a0 40       	sbci	r26, 0x00	; 0
     f4c:	e1 f7       	brne	.-8      	; 0xf46 <short_right_long_left_detection+0x2a6>
     f4e:	00 c0       	rjmp	.+0      	; 0xf50 <short_right_long_left_detection+0x2b0>
     f50:	00 00       	nop
	
	_delay_ms(750);
	
	rotate();
     f52:	0e 94 cc 03 	call	0x798	; 0x798 <rotate>
	stop();
     f56:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     f5a:	8f ef       	ldi	r24, 0xFF	; 255
     f5c:	9f eb       	ldi	r25, 0xBF	; 191
     f5e:	a1 e2       	ldi	r26, 0x21	; 33
     f60:	81 50       	subi	r24, 0x01	; 1
     f62:	90 40       	sbci	r25, 0x00	; 0
     f64:	a0 40       	sbci	r26, 0x00	; 0
     f66:	e1 f7       	brne	.-8      	; 0xf60 <short_right_long_left_detection+0x2c0>
     f68:	00 c0       	rjmp	.+0      	; 0xf6a <short_right_long_left_detection+0x2ca>
     f6a:	00 00       	nop
	
	_delay_ms(750);
	
	left_degrees(90);
     f6c:	8a e5       	ldi	r24, 0x5A	; 90
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
	stop();
     f74:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     f78:	8f ef       	ldi	r24, 0xFF	; 255
     f7a:	9f eb       	ldi	r25, 0xBF	; 191
     f7c:	a1 e2       	ldi	r26, 0x21	; 33
     f7e:	81 50       	subi	r24, 0x01	; 1
     f80:	90 40       	sbci	r25, 0x00	; 0
     f82:	a0 40       	sbci	r26, 0x00	; 0
     f84:	e1 f7       	brne	.-8      	; 0xf7e <short_right_long_left_detection+0x2de>
     f86:	00 c0       	rjmp	.+0      	; 0xf88 <short_right_long_left_detection+0x2e8>
     f88:	00 00       	nop
	
	_delay_ms(750);
	
	left_degrees(90);
     f8a:	8a e5       	ldi	r24, 0x5A	; 90
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
	stop();
     f92:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     f96:	8f ef       	ldi	r24, 0xFF	; 255
     f98:	9f eb       	ldi	r25, 0xBF	; 191
     f9a:	a1 e2       	ldi	r26, 0x21	; 33
     f9c:	81 50       	subi	r24, 0x01	; 1
     f9e:	90 40       	sbci	r25, 0x00	; 0
     fa0:	a0 40       	sbci	r26, 0x00	; 0
     fa2:	e1 f7       	brne	.-8      	; 0xf9c <short_right_long_left_detection+0x2fc>
     fa4:	00 c0       	rjmp	.+0      	; 0xfa6 <short_right_long_left_detection+0x306>
     fa6:	00 00       	nop
	
	_delay_ms(750);
	
	velocity(255,255);
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	6f ef       	ldi	r22, 0xFF	; 255
     fac:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
	forward();
     fb0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef1();
     fb4:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
	stop();
     fb8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     fbc:	8f ef       	ldi	r24, 0xFF	; 255
     fbe:	9f eb       	ldi	r25, 0xBF	; 191
     fc0:	a1 e2       	ldi	r26, 0x21	; 33
     fc2:	81 50       	subi	r24, 0x01	; 1
     fc4:	90 40       	sbci	r25, 0x00	; 0
     fc6:	a0 40       	sbci	r26, 0x00	; 0
     fc8:	e1 f7       	brne	.-8      	; 0xfc2 <short_right_long_left_detection+0x322>
     fca:	00 c0       	rjmp	.+0      	; 0xfcc <short_right_long_left_detection+0x32c>
     fcc:	00 00       	nop
	
	_delay_ms(750);
	
	velocity(255,255);
     fce:	8f ef       	ldi	r24, 0xFF	; 255
     fd0:	6f ef       	ldi	r22, 0xFF	; 255
     fd2:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
	forward();
     fd6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef(72);
     fda:	88 e4       	ldi	r24, 0x48	; 72
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 04 04 	call	0x808	; 0x808 <linef>
	stop();
     fe2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
     fe6:	8f ef       	ldi	r24, 0xFF	; 255
     fe8:	9f eb       	ldi	r25, 0xBF	; 191
     fea:	a1 e2       	ldi	r26, 0x21	; 33
     fec:	81 50       	subi	r24, 0x01	; 1
     fee:	90 40       	sbci	r25, 0x00	; 0
     ff0:	a0 40       	sbci	r26, 0x00	; 0
     ff2:	e1 f7       	brne	.-8      	; 0xfec <short_right_long_left_detection+0x34c>
     ff4:	00 c0       	rjmp	.+0      	; 0xff6 <short_right_long_left_detection+0x356>
     ff6:	00 00       	nop
	
	_delay_ms(750);
	
	left_degrees(93);
     ff8:	8d e5       	ldi	r24, 0x5D	; 93
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
	stop();
    1000:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	9f eb       	ldi	r25, 0xBF	; 191
    1008:	a1 e2       	ldi	r26, 0x21	; 33
    100a:	81 50       	subi	r24, 0x01	; 1
    100c:	90 40       	sbci	r25, 0x00	; 0
    100e:	a0 40       	sbci	r26, 0x00	; 0
    1010:	e1 f7       	brne	.-8      	; 0x100a <short_right_long_left_detection+0x36a>
    1012:	00 c0       	rjmp	.+0      	; 0x1014 <short_right_long_left_detection+0x374>
    1014:	00 00       	nop
	
	_delay_ms(750);
	
	velocity(255,255);
    1016:	8f ef       	ldi	r24, 0xFF	; 255
    1018:	6f ef       	ldi	r22, 0xFF	; 255
    101a:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
	back();
    101e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
	linef1();
    1022:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
	stop();
    1026:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    102a:	8f ef       	ldi	r24, 0xFF	; 255
    102c:	9f eb       	ldi	r25, 0xBF	; 191
    102e:	a1 e2       	ldi	r26, 0x21	; 33
    1030:	81 50       	subi	r24, 0x01	; 1
    1032:	90 40       	sbci	r25, 0x00	; 0
    1034:	a0 40       	sbci	r26, 0x00	; 0
    1036:	e1 f7       	brne	.-8      	; 0x1030 <short_right_long_left_detection+0x390>
    1038:	00 c0       	rjmp	.+0      	; 0x103a <short_right_long_left_detection+0x39a>
    103a:	00 00       	nop
	
	_delay_ms(750);
	
	
}
    103c:	08 95       	ret

0000103e <detection_left>:
		
	}
	
	void detection_left(void)
	{
		sharp = ADC_Conversion(13);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    103e:	8d e0       	ldi	r24, 0x0D	; 13
    1040:	0e 94 b1 03 	call	0x762	; 0x762 <ADC_Conversion>
    1044:	80 93 18 02 	sts	0x0218, r24
		value1 = Sharp_GP2D12_estimation(sharp);
    1048:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Sharp_GP2D12_estimation>
    104c:	90 93 1a 02 	sts	0x021A, r25
    1050:	80 93 19 02 	sts	0x0219, r24
		
		if( value1 > 50 && value1 < 150 )
    1054:	c3 97       	sbiw	r24, 0x33	; 51
    1056:	83 36       	cpi	r24, 0x63	; 99
    1058:	91 05       	cpc	r25, r1
    105a:	08 f0       	brcs	.+2      	; 0x105e <detection_left+0x20>
    105c:	f4 c0       	rjmp	.+488    	; 0x1246 <detection_left+0x208>
		{
			velocity(255,255);
    105e:	8f ef       	ldi	r24, 0xFF	; 255
    1060:	6f ef       	ldi	r22, 0xFF	; 255
    1062:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
    1066:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(32);
    106a:	80 e2       	ldi	r24, 0x20	; 32
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    1072:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1076:	8f ef       	ldi	r24, 0xFF	; 255
    1078:	9f eb       	ldi	r25, 0xBF	; 191
    107a:	a1 e2       	ldi	r26, 0x21	; 33
    107c:	81 50       	subi	r24, 0x01	; 1
    107e:	90 40       	sbci	r25, 0x00	; 0
    1080:	a0 40       	sbci	r26, 0x00	; 0
    1082:	e1 f7       	brne	.-8      	; 0x107c <detection_left+0x3e>
    1084:	00 c0       	rjmp	.+0      	; 0x1086 <detection_left+0x48>
    1086:	00 00       	nop
			_delay_ms(750);
			right_degrees(93);
    1088:	8d e5       	ldi	r24, 0x5D	; 93
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
			stop();
    1090:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1094:	8f ef       	ldi	r24, 0xFF	; 255
    1096:	9f eb       	ldi	r25, 0xBF	; 191
    1098:	a1 e2       	ldi	r26, 0x21	; 33
    109a:	81 50       	subi	r24, 0x01	; 1
    109c:	90 40       	sbci	r25, 0x00	; 0
    109e:	a0 40       	sbci	r26, 0x00	; 0
    10a0:	e1 f7       	brne	.-8      	; 0x109a <detection_left+0x5c>
    10a2:	00 c0       	rjmp	.+0      	; 0x10a4 <detection_left+0x66>
    10a4:	00 00       	nop
			_delay_ms(750);
			
			velocity(255,255);
    10a6:	8f ef       	ldi	r24, 0xFF	; 255
    10a8:	6f ef       	ldi	r22, 0xFF	; 255
    10aa:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			back();
    10ae:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
			linef(15);
    10b2:	8f e0       	ldi	r24, 0x0F	; 15
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    10ba:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    10be:	8f ef       	ldi	r24, 0xFF	; 255
    10c0:	9f eb       	ldi	r25, 0xBF	; 191
    10c2:	a1 e2       	ldi	r26, 0x21	; 33
    10c4:	81 50       	subi	r24, 0x01	; 1
    10c6:	90 40       	sbci	r25, 0x00	; 0
    10c8:	a0 40       	sbci	r26, 0x00	; 0
    10ca:	e1 f7       	brne	.-8      	; 0x10c4 <detection_left+0x86>
    10cc:	00 c0       	rjmp	.+0      	; 0x10ce <detection_left+0x90>
    10ce:	00 00       	nop
			_delay_ms(750);
			
			rotate();
    10d0:	0e 94 cc 03 	call	0x798	; 0x798 <rotate>
			stop();
    10d4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    10d8:	8f ef       	ldi	r24, 0xFF	; 255
    10da:	9f eb       	ldi	r25, 0xBF	; 191
    10dc:	a1 e2       	ldi	r26, 0x21	; 33
    10de:	81 50       	subi	r24, 0x01	; 1
    10e0:	90 40       	sbci	r25, 0x00	; 0
    10e2:	a0 40       	sbci	r26, 0x00	; 0
    10e4:	e1 f7       	brne	.-8      	; 0x10de <detection_left+0xa0>
    10e6:	00 c0       	rjmp	.+0      	; 0x10e8 <detection_left+0xaa>
    10e8:	00 00       	nop
			
			_delay_ms(750);
			
			back();
    10ea:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
			linef(70);
    10ee:	86 e4       	ldi	r24, 0x46	; 70
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			
			
			velocity( 255, 255 );
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    10f8:	6f ef       	ldi	r22, 0xFF	; 255
    10fa:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
    10fe:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(40);
    1102:	88 e2       	ldi	r24, 0x28	; 40
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    110a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    110e:	8f ef       	ldi	r24, 0xFF	; 255
    1110:	9f eb       	ldi	r25, 0xBF	; 191
    1112:	a1 e2       	ldi	r26, 0x21	; 33
    1114:	81 50       	subi	r24, 0x01	; 1
    1116:	90 40       	sbci	r25, 0x00	; 0
    1118:	a0 40       	sbci	r26, 0x00	; 0
    111a:	e1 f7       	brne	.-8      	; 0x1114 <detection_left+0xd6>
    111c:	00 c0       	rjmp	.+0      	; 0x111e <detection_left+0xe0>
    111e:	00 00       	nop
			_delay_ms(750);
			forward();
    1120:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(35);
    1124:	83 e2       	ldi	r24, 0x23	; 35
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    112c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1130:	8f ef       	ldi	r24, 0xFF	; 255
    1132:	9f eb       	ldi	r25, 0xBF	; 191
    1134:	a1 e2       	ldi	r26, 0x21	; 33
    1136:	81 50       	subi	r24, 0x01	; 1
    1138:	90 40       	sbci	r25, 0x00	; 0
    113a:	a0 40       	sbci	r26, 0x00	; 0
    113c:	e1 f7       	brne	.-8      	; 0x1136 <detection_left+0xf8>
    113e:	00 c0       	rjmp	.+0      	; 0x1140 <detection_left+0x102>
    1140:	00 00       	nop
			_delay_ms(750);
			right_degrees(93);
    1142:	8d e5       	ldi	r24, 0x5D	; 93
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
			stop();
    114a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    114e:	8f ef       	ldi	r24, 0xFF	; 255
    1150:	9f eb       	ldi	r25, 0xBF	; 191
    1152:	a1 e2       	ldi	r26, 0x21	; 33
    1154:	81 50       	subi	r24, 0x01	; 1
    1156:	90 40       	sbci	r25, 0x00	; 0
    1158:	a0 40       	sbci	r26, 0x00	; 0
    115a:	e1 f7       	brne	.-8      	; 0x1154 <detection_left+0x116>
    115c:	00 c0       	rjmp	.+0      	; 0x115e <detection_left+0x120>
    115e:	00 00       	nop
			_delay_ms(750);
			
			velocity(255,255);
    1160:	8f ef       	ldi	r24, 0xFF	; 255
    1162:	6f ef       	ldi	r22, 0xFF	; 255
    1164:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
    1168:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef1();
    116c:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			stop();
    1170:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1174:	8f ef       	ldi	r24, 0xFF	; 255
    1176:	9f eb       	ldi	r25, 0xBF	; 191
    1178:	a1 e2       	ldi	r26, 0x21	; 33
    117a:	81 50       	subi	r24, 0x01	; 1
    117c:	90 40       	sbci	r25, 0x00	; 0
    117e:	a0 40       	sbci	r26, 0x00	; 0
    1180:	e1 f7       	brne	.-8      	; 0x117a <detection_left+0x13c>
    1182:	00 c0       	rjmp	.+0      	; 0x1184 <detection_left+0x146>
    1184:	00 00       	nop
			
			_delay_ms(750);
			
			velocity(255,255);
    1186:	8f ef       	ldi	r24, 0xFF	; 255
    1188:	6f ef       	ldi	r22, 0xFF	; 255
    118a:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
    118e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(40);
    1192:	88 e2       	ldi	r24, 0x28	; 40
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    119a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    119e:	8f ef       	ldi	r24, 0xFF	; 255
    11a0:	9f eb       	ldi	r25, 0xBF	; 191
    11a2:	a1 e2       	ldi	r26, 0x21	; 33
    11a4:	81 50       	subi	r24, 0x01	; 1
    11a6:	90 40       	sbci	r25, 0x00	; 0
    11a8:	a0 40       	sbci	r26, 0x00	; 0
    11aa:	e1 f7       	brne	.-8      	; 0x11a4 <detection_left+0x166>
    11ac:	00 c0       	rjmp	.+0      	; 0x11ae <detection_left+0x170>
    11ae:	00 00       	nop
			
			_delay_ms(750);
			
			velocity(255,255);
    11b0:	8f ef       	ldi	r24, 0xFF	; 255
    11b2:	6f ef       	ldi	r22, 0xFF	; 255
    11b4:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
    11b8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef1();
    11bc:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			stop();
    11c0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    11c4:	8f ef       	ldi	r24, 0xFF	; 255
    11c6:	9f eb       	ldi	r25, 0xBF	; 191
    11c8:	a1 e2       	ldi	r26, 0x21	; 33
    11ca:	81 50       	subi	r24, 0x01	; 1
    11cc:	90 40       	sbci	r25, 0x00	; 0
    11ce:	a0 40       	sbci	r26, 0x00	; 0
    11d0:	e1 f7       	brne	.-8      	; 0x11ca <detection_left+0x18c>
    11d2:	00 c0       	rjmp	.+0      	; 0x11d4 <detection_left+0x196>
    11d4:	00 00       	nop
			
			_delay_ms(750);
			
			velocity(255,255);
    11d6:	8f ef       	ldi	r24, 0xFF	; 255
    11d8:	6f ef       	ldi	r22, 0xFF	; 255
    11da:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
    11de:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(72);
    11e2:	88 e4       	ldi	r24, 0x48	; 72
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    11ea:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    11ee:	8f ef       	ldi	r24, 0xFF	; 255
    11f0:	9f eb       	ldi	r25, 0xBF	; 191
    11f2:	a1 e2       	ldi	r26, 0x21	; 33
    11f4:	81 50       	subi	r24, 0x01	; 1
    11f6:	90 40       	sbci	r25, 0x00	; 0
    11f8:	a0 40       	sbci	r26, 0x00	; 0
    11fa:	e1 f7       	brne	.-8      	; 0x11f4 <detection_left+0x1b6>
    11fc:	00 c0       	rjmp	.+0      	; 0x11fe <detection_left+0x1c0>
    11fe:	00 00       	nop
			
			_delay_ms(750);
			
			left_degrees(93);
    1200:	8d e5       	ldi	r24, 0x5D	; 93
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
			stop();
    1208:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    120c:	8f ef       	ldi	r24, 0xFF	; 255
    120e:	9f eb       	ldi	r25, 0xBF	; 191
    1210:	a1 e2       	ldi	r26, 0x21	; 33
    1212:	81 50       	subi	r24, 0x01	; 1
    1214:	90 40       	sbci	r25, 0x00	; 0
    1216:	a0 40       	sbci	r26, 0x00	; 0
    1218:	e1 f7       	brne	.-8      	; 0x1212 <detection_left+0x1d4>
    121a:	00 c0       	rjmp	.+0      	; 0x121c <detection_left+0x1de>
    121c:	00 00       	nop
			
			_delay_ms(750);
			
			velocity(255,255);
    121e:	8f ef       	ldi	r24, 0xFF	; 255
    1220:	6f ef       	ldi	r22, 0xFF	; 255
    1222:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
    1226:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef1();
    122a:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			stop();
    122e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1232:	8f ef       	ldi	r24, 0xFF	; 255
    1234:	9f eb       	ldi	r25, 0xBF	; 191
    1236:	a1 e2       	ldi	r26, 0x21	; 33
    1238:	81 50       	subi	r24, 0x01	; 1
    123a:	90 40       	sbci	r25, 0x00	; 0
    123c:	a0 40       	sbci	r26, 0x00	; 0
    123e:	e1 f7       	brne	.-8      	; 0x1238 <detection_left+0x1fa>
    1240:	00 c0       	rjmp	.+0      	; 0x1242 <detection_left+0x204>
    1242:	00 00       	nop
    1244:	08 95       	ret
			

		}
		else
		{
			stop();
    1246:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    124a:	8f ef       	ldi	r24, 0xFF	; 255
    124c:	9f eb       	ldi	r25, 0xBF	; 191
    124e:	a1 e2       	ldi	r26, 0x21	; 33
    1250:	81 50       	subi	r24, 0x01	; 1
    1252:	90 40       	sbci	r25, 0x00	; 0
    1254:	a0 40       	sbci	r26, 0x00	; 0
    1256:	e1 f7       	brne	.-8      	; 0x1250 <detection_left+0x212>
    1258:	00 c0       	rjmp	.+0      	; 0x125a <detection_left+0x21c>
    125a:	00 00       	nop
			_delay_ms(750);
			
			left_degrees(90);
    125c:	8a e5       	ldi	r24, 0x5A	; 90
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
			stop();
    1264:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1268:	8f ef       	ldi	r24, 0xFF	; 255
    126a:	9f eb       	ldi	r25, 0xBF	; 191
    126c:	a1 e2       	ldi	r26, 0x21	; 33
    126e:	81 50       	subi	r24, 0x01	; 1
    1270:	90 40       	sbci	r25, 0x00	; 0
    1272:	a0 40       	sbci	r26, 0x00	; 0
    1274:	e1 f7       	brne	.-8      	; 0x126e <detection_left+0x230>
    1276:	00 c0       	rjmp	.+0      	; 0x1278 <detection_left+0x23a>
    1278:	00 00       	nop
			
			_delay_ms(750);
			
			left_degrees(90);
    127a:	8a e5       	ldi	r24, 0x5A	; 90
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
			stop();
    1282:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1286:	8f ef       	ldi	r24, 0xFF	; 255
    1288:	9f eb       	ldi	r25, 0xBF	; 191
    128a:	a1 e2       	ldi	r26, 0x21	; 33
    128c:	81 50       	subi	r24, 0x01	; 1
    128e:	90 40       	sbci	r25, 0x00	; 0
    1290:	a0 40       	sbci	r26, 0x00	; 0
    1292:	e1 f7       	brne	.-8      	; 0x128c <detection_left+0x24e>
    1294:	00 c0       	rjmp	.+0      	; 0x1296 <detection_left+0x258>
    1296:	00 00       	nop
			
			_delay_ms(750);
			
			velocity(255,255);
    1298:	8f ef       	ldi	r24, 0xFF	; 255
    129a:	6f ef       	ldi	r22, 0xFF	; 255
    129c:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
    12a0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef1();
    12a4:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			stop();
    12a8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    12ac:	8f ef       	ldi	r24, 0xFF	; 255
    12ae:	9f eb       	ldi	r25, 0xBF	; 191
    12b0:	a1 e2       	ldi	r26, 0x21	; 33
    12b2:	81 50       	subi	r24, 0x01	; 1
    12b4:	90 40       	sbci	r25, 0x00	; 0
    12b6:	a0 40       	sbci	r26, 0x00	; 0
    12b8:	e1 f7       	brne	.-8      	; 0x12b2 <detection_left+0x274>
    12ba:	00 c0       	rjmp	.+0      	; 0x12bc <detection_left+0x27e>
    12bc:	00 00       	nop
			
			_delay_ms(750);
			
			velocity(255,255);
    12be:	8f ef       	ldi	r24, 0xFF	; 255
    12c0:	6f ef       	ldi	r22, 0xFF	; 255
    12c2:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
    12c6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(40);
    12ca:	88 e2       	ldi	r24, 0x28	; 40
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    12d2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    12d6:	8f ef       	ldi	r24, 0xFF	; 255
    12d8:	9f eb       	ldi	r25, 0xBF	; 191
    12da:	a1 e2       	ldi	r26, 0x21	; 33
    12dc:	81 50       	subi	r24, 0x01	; 1
    12de:	90 40       	sbci	r25, 0x00	; 0
    12e0:	a0 40       	sbci	r26, 0x00	; 0
    12e2:	e1 f7       	brne	.-8      	; 0x12dc <detection_left+0x29e>
    12e4:	00 c0       	rjmp	.+0      	; 0x12e6 <detection_left+0x2a8>
    12e6:	00 00       	nop
			
			_delay_ms(750);
			
			velocity(255,255);
    12e8:	8f ef       	ldi	r24, 0xFF	; 255
    12ea:	6f ef       	ldi	r22, 0xFF	; 255
    12ec:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
    12f0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef1();
    12f4:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			stop();
    12f8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    12fc:	8f ef       	ldi	r24, 0xFF	; 255
    12fe:	9f eb       	ldi	r25, 0xBF	; 191
    1300:	a1 e2       	ldi	r26, 0x21	; 33
    1302:	81 50       	subi	r24, 0x01	; 1
    1304:	90 40       	sbci	r25, 0x00	; 0
    1306:	a0 40       	sbci	r26, 0x00	; 0
    1308:	e1 f7       	brne	.-8      	; 0x1302 <detection_left+0x2c4>
    130a:	00 c0       	rjmp	.+0      	; 0x130c <detection_left+0x2ce>
    130c:	00 00       	nop
			
			_delay_ms(750);
			
			velocity(255,255);
    130e:	8f ef       	ldi	r24, 0xFF	; 255
    1310:	6f ef       	ldi	r22, 0xFF	; 255
    1312:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
    1316:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(72);
    131a:	88 e4       	ldi	r24, 0x48	; 72
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    1322:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1326:	8f ef       	ldi	r24, 0xFF	; 255
    1328:	9f eb       	ldi	r25, 0xBF	; 191
    132a:	a1 e2       	ldi	r26, 0x21	; 33
    132c:	81 50       	subi	r24, 0x01	; 1
    132e:	90 40       	sbci	r25, 0x00	; 0
    1330:	a0 40       	sbci	r26, 0x00	; 0
    1332:	e1 f7       	brne	.-8      	; 0x132c <detection_left+0x2ee>
    1334:	00 c0       	rjmp	.+0      	; 0x1336 <detection_left+0x2f8>
    1336:	00 00       	nop
			
			_delay_ms(750);
			
			left_degrees(93);
    1338:	8d e5       	ldi	r24, 0x5D	; 93
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
			stop();
    1340:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1344:	8f ef       	ldi	r24, 0xFF	; 255
    1346:	9f eb       	ldi	r25, 0xBF	; 191
    1348:	a1 e2       	ldi	r26, 0x21	; 33
    134a:	81 50       	subi	r24, 0x01	; 1
    134c:	90 40       	sbci	r25, 0x00	; 0
    134e:	a0 40       	sbci	r26, 0x00	; 0
    1350:	e1 f7       	brne	.-8      	; 0x134a <detection_left+0x30c>
    1352:	00 c0       	rjmp	.+0      	; 0x1354 <detection_left+0x316>
    1354:	00 00       	nop
			
			_delay_ms(750);
			
			velocity(255,255);
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	6f ef       	ldi	r22, 0xFF	; 255
    135a:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
    135e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef1();
    1362:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			stop();
    1366:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    136a:	8f ef       	ldi	r24, 0xFF	; 255
    136c:	9f eb       	ldi	r25, 0xBF	; 191
    136e:	a1 e2       	ldi	r26, 0x21	; 33
    1370:	81 50       	subi	r24, 0x01	; 1
    1372:	90 40       	sbci	r25, 0x00	; 0
    1374:	a0 40       	sbci	r26, 0x00	; 0
    1376:	e1 f7       	brne	.-8      	; 0x1370 <detection_left+0x332>
    1378:	00 c0       	rjmp	.+0      	; 0x137a <detection_left+0x33c>
    137a:	00 00       	nop
    137c:	08 95       	ret

0000137e <single_block_detection>:



void single_block_detection(void)
{
	sharp = ADC_Conversion(9);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    137e:	89 e0       	ldi	r24, 0x09	; 9
    1380:	0e 94 b1 03 	call	0x762	; 0x762 <ADC_Conversion>
    1384:	80 93 18 02 	sts	0x0218, r24
	value1 = Sharp_GP2D12_estimation(sharp);
    1388:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Sharp_GP2D12_estimation>
    138c:	90 93 1a 02 	sts	0x021A, r25
    1390:	80 93 19 02 	sts	0x0219, r24
	
	

	if ( value1 == 800 || value1 < 50)
    1394:	23 e0       	ldi	r18, 0x03	; 3
    1396:	80 32       	cpi	r24, 0x20	; 32
    1398:	92 07       	cpc	r25, r18
    139a:	19 f0       	breq	.+6      	; 0x13a2 <single_block_detection+0x24>
    139c:	82 33       	cpi	r24, 0x32	; 50
    139e:	91 05       	cpc	r25, r1
    13a0:	18 f4       	brcc	.+6      	; 0x13a8 <single_block_detection+0x2a>
	stop();
    13a2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    13a6:	bf c1       	rjmp	.+894    	; 0x1726 <single_block_detection+0x3a8>
	else if( value1 > 50 && value1 < 150 )
    13a8:	9c 01       	movw	r18, r24
    13aa:	23 53       	subi	r18, 0x33	; 51
    13ac:	30 40       	sbci	r19, 0x00	; 0
    13ae:	23 36       	cpi	r18, 0x63	; 99
    13b0:	31 05       	cpc	r19, r1
    13b2:	08 f0       	brcs	.+2      	; 0x13b6 <single_block_detection+0x38>
    13b4:	f0 c0       	rjmp	.+480    	; 0x1596 <single_block_detection+0x218>
	{
			velocity(255,255);
    13b6:	8f ef       	ldi	r24, 0xFF	; 255
    13b8:	6f ef       	ldi	r22, 0xFF	; 255
    13ba:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
    13be:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(32);
    13c2:	80 e2       	ldi	r24, 0x20	; 32
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    13ca:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    13ce:	8f ef       	ldi	r24, 0xFF	; 255
    13d0:	9f eb       	ldi	r25, 0xBF	; 191
    13d2:	a1 e2       	ldi	r26, 0x21	; 33
    13d4:	81 50       	subi	r24, 0x01	; 1
    13d6:	90 40       	sbci	r25, 0x00	; 0
    13d8:	a0 40       	sbci	r26, 0x00	; 0
    13da:	e1 f7       	brne	.-8      	; 0x13d4 <single_block_detection+0x56>
    13dc:	00 c0       	rjmp	.+0      	; 0x13de <single_block_detection+0x60>
    13de:	00 00       	nop
			_delay_ms(750);
			left_degrees(93);
    13e0:	8d e5       	ldi	r24, 0x5D	; 93
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
			stop();
    13e8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    13ec:	8f ef       	ldi	r24, 0xFF	; 255
    13ee:	9f eb       	ldi	r25, 0xBF	; 191
    13f0:	a1 e2       	ldi	r26, 0x21	; 33
    13f2:	81 50       	subi	r24, 0x01	; 1
    13f4:	90 40       	sbci	r25, 0x00	; 0
    13f6:	a0 40       	sbci	r26, 0x00	; 0
    13f8:	e1 f7       	brne	.-8      	; 0x13f2 <single_block_detection+0x74>
    13fa:	00 c0       	rjmp	.+0      	; 0x13fc <single_block_detection+0x7e>
    13fc:	00 00       	nop
			_delay_ms(750);
			
			velocity(255,255);
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	6f ef       	ldi	r22, 0xFF	; 255
    1402:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			back();
    1406:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
			linef(15);
    140a:	8f e0       	ldi	r24, 0x0F	; 15
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    1412:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1416:	8f ef       	ldi	r24, 0xFF	; 255
    1418:	9f eb       	ldi	r25, 0xBF	; 191
    141a:	a1 e2       	ldi	r26, 0x21	; 33
    141c:	81 50       	subi	r24, 0x01	; 1
    141e:	90 40       	sbci	r25, 0x00	; 0
    1420:	a0 40       	sbci	r26, 0x00	; 0
    1422:	e1 f7       	brne	.-8      	; 0x141c <single_block_detection+0x9e>
    1424:	00 c0       	rjmp	.+0      	; 0x1426 <single_block_detection+0xa8>
    1426:	00 00       	nop
			_delay_ms(750);
			
			rotate();
    1428:	0e 94 cc 03 	call	0x798	; 0x798 <rotate>
			stop();
    142c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
			
			back();
    1430:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
			linef1();
    1434:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			
			
			velocity( 255, 255 );
    1438:	8f ef       	ldi	r24, 0xFF	; 255
    143a:	6f ef       	ldi	r22, 0xFF	; 255
    143c:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
    1440:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(40);
    1444:	88 e2       	ldi	r24, 0x28	; 40
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    144c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1450:	8f ef       	ldi	r24, 0xFF	; 255
    1452:	9f eb       	ldi	r25, 0xBF	; 191
    1454:	a1 e2       	ldi	r26, 0x21	; 33
    1456:	81 50       	subi	r24, 0x01	; 1
    1458:	90 40       	sbci	r25, 0x00	; 0
    145a:	a0 40       	sbci	r26, 0x00	; 0
    145c:	e1 f7       	brne	.-8      	; 0x1456 <single_block_detection+0xd8>
    145e:	00 c0       	rjmp	.+0      	; 0x1460 <single_block_detection+0xe2>
    1460:	00 00       	nop
			_delay_ms(750);
			forward();
    1462:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(35);
    1466:	83 e2       	ldi	r24, 0x23	; 35
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    146e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1472:	8f ef       	ldi	r24, 0xFF	; 255
    1474:	9f eb       	ldi	r25, 0xBF	; 191
    1476:	a1 e2       	ldi	r26, 0x21	; 33
    1478:	81 50       	subi	r24, 0x01	; 1
    147a:	90 40       	sbci	r25, 0x00	; 0
    147c:	a0 40       	sbci	r26, 0x00	; 0
    147e:	e1 f7       	brne	.-8      	; 0x1478 <single_block_detection+0xfa>
    1480:	00 c0       	rjmp	.+0      	; 0x1482 <single_block_detection+0x104>
    1482:	00 00       	nop
			_delay_ms(750);
			left_degrees(93);
    1484:	8d e5       	ldi	r24, 0x5D	; 93
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
			stop();
    148c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1490:	8f ef       	ldi	r24, 0xFF	; 255
    1492:	9f eb       	ldi	r25, 0xBF	; 191
    1494:	a1 e2       	ldi	r26, 0x21	; 33
    1496:	81 50       	subi	r24, 0x01	; 1
    1498:	90 40       	sbci	r25, 0x00	; 0
    149a:	a0 40       	sbci	r26, 0x00	; 0
    149c:	e1 f7       	brne	.-8      	; 0x1496 <single_block_detection+0x118>
    149e:	00 c0       	rjmp	.+0      	; 0x14a0 <single_block_detection+0x122>
    14a0:	00 00       	nop
			_delay_ms(750);
			forward();
    14a2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef1();
    14a6:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			stop();
    14aa:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	9f eb       	ldi	r25, 0xBF	; 191
    14b2:	a1 e2       	ldi	r26, 0x21	; 33
    14b4:	81 50       	subi	r24, 0x01	; 1
    14b6:	90 40       	sbci	r25, 0x00	; 0
    14b8:	a0 40       	sbci	r26, 0x00	; 0
    14ba:	e1 f7       	brne	.-8      	; 0x14b4 <single_block_detection+0x136>
    14bc:	00 c0       	rjmp	.+0      	; 0x14be <single_block_detection+0x140>
    14be:	00 00       	nop
			_delay_ms(750);
			forward();
    14c0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(40);
    14c4:	88 e2       	ldi	r24, 0x28	; 40
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    14cc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    14d0:	8f ef       	ldi	r24, 0xFF	; 255
    14d2:	9f eb       	ldi	r25, 0xBF	; 191
    14d4:	a1 e2       	ldi	r26, 0x21	; 33
    14d6:	81 50       	subi	r24, 0x01	; 1
    14d8:	90 40       	sbci	r25, 0x00	; 0
    14da:	a0 40       	sbci	r26, 0x00	; 0
    14dc:	e1 f7       	brne	.-8      	; 0x14d6 <single_block_detection+0x158>
    14de:	00 c0       	rjmp	.+0      	; 0x14e0 <single_block_detection+0x162>
    14e0:	00 00       	nop
			_delay_ms(750);
			forward();
    14e2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(35);
    14e6:	83 e2       	ldi	r24, 0x23	; 35
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    14ee:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    14f2:	8f ef       	ldi	r24, 0xFF	; 255
    14f4:	9f eb       	ldi	r25, 0xBF	; 191
    14f6:	a1 e2       	ldi	r26, 0x21	; 33
    14f8:	81 50       	subi	r24, 0x01	; 1
    14fa:	90 40       	sbci	r25, 0x00	; 0
    14fc:	a0 40       	sbci	r26, 0x00	; 0
    14fe:	e1 f7       	brne	.-8      	; 0x14f8 <single_block_detection+0x17a>
    1500:	00 c0       	rjmp	.+0      	; 0x1502 <single_block_detection+0x184>
    1502:	00 00       	nop
			_delay_ms(750);
			right_degrees(93);
    1504:	8d e5       	ldi	r24, 0x5D	; 93
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
			stop();
    150c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1510:	8f ef       	ldi	r24, 0xFF	; 255
    1512:	9f eb       	ldi	r25, 0xBF	; 191
    1514:	a1 e2       	ldi	r26, 0x21	; 33
    1516:	81 50       	subi	r24, 0x01	; 1
    1518:	90 40       	sbci	r25, 0x00	; 0
    151a:	a0 40       	sbci	r26, 0x00	; 0
    151c:	e1 f7       	brne	.-8      	; 0x1516 <single_block_detection+0x198>
    151e:	00 c0       	rjmp	.+0      	; 0x1520 <single_block_detection+0x1a2>
    1520:	00 00       	nop
			_delay_ms(750);
			forward();
    1522:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef1();
    1526:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			stop();
    152a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    152e:	8f ef       	ldi	r24, 0xFF	; 255
    1530:	9f eb       	ldi	r25, 0xBF	; 191
    1532:	a1 e2       	ldi	r26, 0x21	; 33
    1534:	81 50       	subi	r24, 0x01	; 1
    1536:	90 40       	sbci	r25, 0x00	; 0
    1538:	a0 40       	sbci	r26, 0x00	; 0
    153a:	e1 f7       	brne	.-8      	; 0x1534 <single_block_detection+0x1b6>
    153c:	00 c0       	rjmp	.+0      	; 0x153e <single_block_detection+0x1c0>
    153e:	00 00       	nop
			_delay_ms(750);
			forward();
    1540:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(40);
    1544:	88 e2       	ldi	r24, 0x28	; 40
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    154c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
			forward();
    1550:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef1();
    1554:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			stop();
    1558:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    155c:	8f ef       	ldi	r24, 0xFF	; 255
    155e:	9f eb       	ldi	r25, 0xBF	; 191
    1560:	a1 e2       	ldi	r26, 0x21	; 33
    1562:	81 50       	subi	r24, 0x01	; 1
    1564:	90 40       	sbci	r25, 0x00	; 0
    1566:	a0 40       	sbci	r26, 0x00	; 0
    1568:	e1 f7       	brne	.-8      	; 0x1562 <single_block_detection+0x1e4>
    156a:	00 c0       	rjmp	.+0      	; 0x156c <single_block_detection+0x1ee>
    156c:	00 00       	nop
			_delay_ms(750);

			forward();
    156e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(40);
    1572:	88 e2       	ldi	r24, 0x28	; 40
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    157a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    157e:	8f ef       	ldi	r24, 0xFF	; 255
    1580:	9f eb       	ldi	r25, 0xBF	; 191
    1582:	a1 e2       	ldi	r26, 0x21	; 33
    1584:	81 50       	subi	r24, 0x01	; 1
    1586:	90 40       	sbci	r25, 0x00	; 0
    1588:	a0 40       	sbci	r26, 0x00	; 0
    158a:	e1 f7       	brne	.-8      	; 0x1584 <single_block_detection+0x206>
    158c:	00 c0       	rjmp	.+0      	; 0x158e <single_block_detection+0x210>
    158e:	00 00       	nop
			_delay_ms(750);
			detection_left();
    1590:	0e 94 1f 08 	call	0x103e	; 0x103e <detection_left>
			goto stopp;
    1594:	9b c2       	rjmp	.+1334   	; 0x1acc <single_block_detection+0x74e>
			
			
	}
	else if( value1 > 300 && value1 < 450 )
    1596:	8d 52       	subi	r24, 0x2D	; 45
    1598:	91 40       	sbci	r25, 0x01	; 1
    159a:	85 39       	cpi	r24, 0x95	; 149
    159c:	91 05       	cpc	r25, r1
    159e:	08 f0       	brcs	.+2      	; 0x15a2 <single_block_detection+0x224>
    15a0:	c2 c0       	rjmp	.+388    	; 0x1726 <single_block_detection+0x3a8>
	{
		velocity(255,255);
    15a2:	8f ef       	ldi	r24, 0xFF	; 255
    15a4:	6f ef       	ldi	r22, 0xFF	; 255
    15a6:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    15aa:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(32);
    15ae:	80 e2       	ldi	r24, 0x20	; 32
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    15b6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    15ba:	8f ef       	ldi	r24, 0xFF	; 255
    15bc:	9f eb       	ldi	r25, 0xBF	; 191
    15be:	a1 e2       	ldi	r26, 0x21	; 33
    15c0:	81 50       	subi	r24, 0x01	; 1
    15c2:	90 40       	sbci	r25, 0x00	; 0
    15c4:	a0 40       	sbci	r26, 0x00	; 0
    15c6:	e1 f7       	brne	.-8      	; 0x15c0 <single_block_detection+0x242>
    15c8:	00 c0       	rjmp	.+0      	; 0x15ca <single_block_detection+0x24c>
    15ca:	00 00       	nop
		_delay_ms(750);
		left_degrees(93);
    15cc:	8d e5       	ldi	r24, 0x5D	; 93
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
		stop();
    15d4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    15d8:	8f ef       	ldi	r24, 0xFF	; 255
    15da:	9f eb       	ldi	r25, 0xBF	; 191
    15dc:	a1 e2       	ldi	r26, 0x21	; 33
    15de:	81 50       	subi	r24, 0x01	; 1
    15e0:	90 40       	sbci	r25, 0x00	; 0
    15e2:	a0 40       	sbci	r26, 0x00	; 0
    15e4:	e1 f7       	brne	.-8      	; 0x15de <single_block_detection+0x260>
    15e6:	00 c0       	rjmp	.+0      	; 0x15e8 <single_block_detection+0x26a>
    15e8:	00 00       	nop
		_delay_ms(750);
		velocity(255,255);
    15ea:	8f ef       	ldi	r24, 0xFF	; 255
    15ec:	6f ef       	ldi	r22, 0xFF	; 255
    15ee:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    15f2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef1();
    15f6:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    15fa:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    15fe:	8f ef       	ldi	r24, 0xFF	; 255
    1600:	9f eb       	ldi	r25, 0xBF	; 191
    1602:	a1 e2       	ldi	r26, 0x21	; 33
    1604:	81 50       	subi	r24, 0x01	; 1
    1606:	90 40       	sbci	r25, 0x00	; 0
    1608:	a0 40       	sbci	r26, 0x00	; 0
    160a:	e1 f7       	brne	.-8      	; 0x1604 <single_block_detection+0x286>
    160c:	00 c0       	rjmp	.+0      	; 0x160e <single_block_detection+0x290>
    160e:	00 00       	nop
		
		_delay_ms(750);
		
		velocity(255,255);
    1610:	8f ef       	ldi	r24, 0xFF	; 255
    1612:	6f ef       	ldi	r22, 0xFF	; 255
    1614:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    1618:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(70);
    161c:	86 e4       	ldi	r24, 0x46	; 70
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1624:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1628:	8f ef       	ldi	r24, 0xFF	; 255
    162a:	9f eb       	ldi	r25, 0xBF	; 191
    162c:	a1 e2       	ldi	r26, 0x21	; 33
    162e:	81 50       	subi	r24, 0x01	; 1
    1630:	90 40       	sbci	r25, 0x00	; 0
    1632:	a0 40       	sbci	r26, 0x00	; 0
    1634:	e1 f7       	brne	.-8      	; 0x162e <single_block_detection+0x2b0>
    1636:	00 c0       	rjmp	.+0      	; 0x1638 <single_block_detection+0x2ba>
    1638:	00 00       	nop
		
		_delay_ms(750);
		
		rotate();
    163a:	0e 94 cc 03 	call	0x798	; 0x798 <rotate>
		stop();
    163e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1642:	8f ef       	ldi	r24, 0xFF	; 255
    1644:	9f eb       	ldi	r25, 0xBF	; 191
    1646:	a1 e2       	ldi	r26, 0x21	; 33
    1648:	81 50       	subi	r24, 0x01	; 1
    164a:	90 40       	sbci	r25, 0x00	; 0
    164c:	a0 40       	sbci	r26, 0x00	; 0
    164e:	e1 f7       	brne	.-8      	; 0x1648 <single_block_detection+0x2ca>
    1650:	00 c0       	rjmp	.+0      	; 0x1652 <single_block_detection+0x2d4>
    1652:	00 00       	nop
		
		_delay_ms(750);
		
		left_degrees(90);
    1654:	8a e5       	ldi	r24, 0x5A	; 90
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
		stop();
    165c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1660:	8f ef       	ldi	r24, 0xFF	; 255
    1662:	9f eb       	ldi	r25, 0xBF	; 191
    1664:	a1 e2       	ldi	r26, 0x21	; 33
    1666:	81 50       	subi	r24, 0x01	; 1
    1668:	90 40       	sbci	r25, 0x00	; 0
    166a:	a0 40       	sbci	r26, 0x00	; 0
    166c:	e1 f7       	brne	.-8      	; 0x1666 <single_block_detection+0x2e8>
    166e:	00 c0       	rjmp	.+0      	; 0x1670 <single_block_detection+0x2f2>
    1670:	00 00       	nop
		
		_delay_ms(750);
		
		left_degrees(90);
    1672:	8a e5       	ldi	r24, 0x5A	; 90
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
		stop();
    167a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    167e:	8f ef       	ldi	r24, 0xFF	; 255
    1680:	9f eb       	ldi	r25, 0xBF	; 191
    1682:	a1 e2       	ldi	r26, 0x21	; 33
    1684:	81 50       	subi	r24, 0x01	; 1
    1686:	90 40       	sbci	r25, 0x00	; 0
    1688:	a0 40       	sbci	r26, 0x00	; 0
    168a:	e1 f7       	brne	.-8      	; 0x1684 <single_block_detection+0x306>
    168c:	00 c0       	rjmp	.+0      	; 0x168e <single_block_detection+0x310>
    168e:	00 00       	nop
		
		_delay_ms(750);
		
		velocity(255,255);
    1690:	8f ef       	ldi	r24, 0xFF	; 255
    1692:	6f ef       	ldi	r22, 0xFF	; 255
    1694:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    1698:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef1();
    169c:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    16a0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    16a4:	8f ef       	ldi	r24, 0xFF	; 255
    16a6:	9f eb       	ldi	r25, 0xBF	; 191
    16a8:	a1 e2       	ldi	r26, 0x21	; 33
    16aa:	81 50       	subi	r24, 0x01	; 1
    16ac:	90 40       	sbci	r25, 0x00	; 0
    16ae:	a0 40       	sbci	r26, 0x00	; 0
    16b0:	e1 f7       	brne	.-8      	; 0x16aa <single_block_detection+0x32c>
    16b2:	00 c0       	rjmp	.+0      	; 0x16b4 <single_block_detection+0x336>
    16b4:	00 00       	nop
		
		_delay_ms(750);
		
		velocity(255,255);
    16b6:	8f ef       	ldi	r24, 0xFF	; 255
    16b8:	6f ef       	ldi	r22, 0xFF	; 255
    16ba:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    16be:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(72);
    16c2:	88 e4       	ldi	r24, 0x48	; 72
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    16ca:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    16ce:	8f ef       	ldi	r24, 0xFF	; 255
    16d0:	9f eb       	ldi	r25, 0xBF	; 191
    16d2:	a1 e2       	ldi	r26, 0x21	; 33
    16d4:	81 50       	subi	r24, 0x01	; 1
    16d6:	90 40       	sbci	r25, 0x00	; 0
    16d8:	a0 40       	sbci	r26, 0x00	; 0
    16da:	e1 f7       	brne	.-8      	; 0x16d4 <single_block_detection+0x356>
    16dc:	00 c0       	rjmp	.+0      	; 0x16de <single_block_detection+0x360>
    16de:	00 00       	nop
		
		_delay_ms(750);
		
		left_degrees(93);
    16e0:	8d e5       	ldi	r24, 0x5D	; 93
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
		stop();
    16e8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    16ec:	8f ef       	ldi	r24, 0xFF	; 255
    16ee:	9f eb       	ldi	r25, 0xBF	; 191
    16f0:	a1 e2       	ldi	r26, 0x21	; 33
    16f2:	81 50       	subi	r24, 0x01	; 1
    16f4:	90 40       	sbci	r25, 0x00	; 0
    16f6:	a0 40       	sbci	r26, 0x00	; 0
    16f8:	e1 f7       	brne	.-8      	; 0x16f2 <single_block_detection+0x374>
    16fa:	00 c0       	rjmp	.+0      	; 0x16fc <single_block_detection+0x37e>
    16fc:	00 00       	nop
		
		_delay_ms(750);
		
		velocity(255,255);
    16fe:	8f ef       	ldi	r24, 0xFF	; 255
    1700:	6f ef       	ldi	r22, 0xFF	; 255
    1702:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		back();
    1706:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
		linef1();
    170a:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    170e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1712:	8f ef       	ldi	r24, 0xFF	; 255
    1714:	9f eb       	ldi	r25, 0xBF	; 191
    1716:	a1 e2       	ldi	r26, 0x21	; 33
    1718:	81 50       	subi	r24, 0x01	; 1
    171a:	90 40       	sbci	r25, 0x00	; 0
    171c:	a0 40       	sbci	r26, 0x00	; 0
    171e:	e1 f7       	brne	.-8      	; 0x1718 <single_block_detection+0x39a>
    1720:	00 c0       	rjmp	.+0      	; 0x1722 <single_block_detection+0x3a4>
    1722:	00 00       	nop
    1724:	d3 c1       	rjmp	.+934    	; 0x1acc <single_block_detection+0x74e>
		_delay_ms(750);
		goto stopp;

		
	}             
	sharp1 = ADC_Conversion(13);						
    1726:	8d e0       	ldi	r24, 0x0D	; 13
    1728:	0e 94 b1 03 	call	0x762	; 0x762 <ADC_Conversion>
    172c:	80 93 15 02 	sts	0x0215, r24
	value2 = Sharp_GP2D12_estimation(sharp1);
    1730:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Sharp_GP2D12_estimation>
    1734:	90 93 17 02 	sts	0x0217, r25
    1738:	80 93 16 02 	sts	0x0216, r24
	
	if ( value2 == 800 || value2 < 50)
    173c:	a3 e0       	ldi	r26, 0x03	; 3
    173e:	80 32       	cpi	r24, 0x20	; 32
    1740:	9a 07       	cpc	r25, r26
    1742:	19 f0       	breq	.+6      	; 0x174a <single_block_detection+0x3cc>
    1744:	82 33       	cpi	r24, 0x32	; 50
    1746:	91 05       	cpc	r25, r1
    1748:	18 f4       	brcc	.+6      	; 0x1750 <single_block_detection+0x3d2>
	stop();
    174a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    174e:	be c1       	rjmp	.+892    	; 0x1acc <single_block_detection+0x74e>
	else if( value2 > 50 && value2 < 150 )
    1750:	9c 01       	movw	r18, r24
    1752:	23 53       	subi	r18, 0x33	; 51
    1754:	30 40       	sbci	r19, 0x00	; 0
    1756:	23 36       	cpi	r18, 0x63	; 99
    1758:	31 05       	cpc	r19, r1
    175a:	08 f0       	brcs	.+2      	; 0x175e <single_block_detection+0x3e0>
    175c:	f0 c0       	rjmp	.+480    	; 0x193e <single_block_detection+0x5c0>
	{
		velocity(255,255);
    175e:	8f ef       	ldi	r24, 0xFF	; 255
    1760:	6f ef       	ldi	r22, 0xFF	; 255
    1762:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    1766:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(32);
    176a:	80 e2       	ldi	r24, 0x20	; 32
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1772:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1776:	8f ef       	ldi	r24, 0xFF	; 255
    1778:	9f eb       	ldi	r25, 0xBF	; 191
    177a:	a1 e2       	ldi	r26, 0x21	; 33
    177c:	81 50       	subi	r24, 0x01	; 1
    177e:	90 40       	sbci	r25, 0x00	; 0
    1780:	a0 40       	sbci	r26, 0x00	; 0
    1782:	e1 f7       	brne	.-8      	; 0x177c <single_block_detection+0x3fe>
    1784:	00 c0       	rjmp	.+0      	; 0x1786 <single_block_detection+0x408>
    1786:	00 00       	nop
		_delay_ms(750);
		right_degrees(93);
    1788:	8d e5       	ldi	r24, 0x5D	; 93
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
		stop();
    1790:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1794:	8f ef       	ldi	r24, 0xFF	; 255
    1796:	9f eb       	ldi	r25, 0xBF	; 191
    1798:	a1 e2       	ldi	r26, 0x21	; 33
    179a:	81 50       	subi	r24, 0x01	; 1
    179c:	90 40       	sbci	r25, 0x00	; 0
    179e:	a0 40       	sbci	r26, 0x00	; 0
    17a0:	e1 f7       	brne	.-8      	; 0x179a <single_block_detection+0x41c>
    17a2:	00 c0       	rjmp	.+0      	; 0x17a4 <single_block_detection+0x426>
    17a4:	00 00       	nop
		_delay_ms(750);
		
		velocity(255,255);
    17a6:	8f ef       	ldi	r24, 0xFF	; 255
    17a8:	6f ef       	ldi	r22, 0xFF	; 255
    17aa:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		back();
    17ae:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
		linef(15);
    17b2:	8f e0       	ldi	r24, 0x0F	; 15
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    17ba:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    17be:	8f ef       	ldi	r24, 0xFF	; 255
    17c0:	9f eb       	ldi	r25, 0xBF	; 191
    17c2:	a1 e2       	ldi	r26, 0x21	; 33
    17c4:	81 50       	subi	r24, 0x01	; 1
    17c6:	90 40       	sbci	r25, 0x00	; 0
    17c8:	a0 40       	sbci	r26, 0x00	; 0
    17ca:	e1 f7       	brne	.-8      	; 0x17c4 <single_block_detection+0x446>
    17cc:	00 c0       	rjmp	.+0      	; 0x17ce <single_block_detection+0x450>
    17ce:	00 00       	nop
		_delay_ms(750);
	
		rotate();
    17d0:	0e 94 cc 03 	call	0x798	; 0x798 <rotate>
		stop();
    17d4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
		
			back();
    17d8:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
			linef1();
    17dc:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			
			
			velocity( 255, 255 );
    17e0:	8f ef       	ldi	r24, 0xFF	; 255
    17e2:	6f ef       	ldi	r22, 0xFF	; 255
    17e4:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
			forward();
    17e8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(40);
    17ec:	88 e2       	ldi	r24, 0x28	; 40
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    17f4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    17f8:	8f ef       	ldi	r24, 0xFF	; 255
    17fa:	9f eb       	ldi	r25, 0xBF	; 191
    17fc:	a1 e2       	ldi	r26, 0x21	; 33
    17fe:	81 50       	subi	r24, 0x01	; 1
    1800:	90 40       	sbci	r25, 0x00	; 0
    1802:	a0 40       	sbci	r26, 0x00	; 0
    1804:	e1 f7       	brne	.-8      	; 0x17fe <single_block_detection+0x480>
    1806:	00 c0       	rjmp	.+0      	; 0x1808 <single_block_detection+0x48a>
    1808:	00 00       	nop
			_delay_ms(750);
			forward();
    180a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(35);
    180e:	83 e2       	ldi	r24, 0x23	; 35
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    1816:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    181a:	8f ef       	ldi	r24, 0xFF	; 255
    181c:	9f eb       	ldi	r25, 0xBF	; 191
    181e:	a1 e2       	ldi	r26, 0x21	; 33
    1820:	81 50       	subi	r24, 0x01	; 1
    1822:	90 40       	sbci	r25, 0x00	; 0
    1824:	a0 40       	sbci	r26, 0x00	; 0
    1826:	e1 f7       	brne	.-8      	; 0x1820 <single_block_detection+0x4a2>
    1828:	00 c0       	rjmp	.+0      	; 0x182a <single_block_detection+0x4ac>
    182a:	00 00       	nop
			_delay_ms(750);
			right_degrees(93);
    182c:	8d e5       	ldi	r24, 0x5D	; 93
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
			stop();
    1834:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1838:	8f ef       	ldi	r24, 0xFF	; 255
    183a:	9f eb       	ldi	r25, 0xBF	; 191
    183c:	a1 e2       	ldi	r26, 0x21	; 33
    183e:	81 50       	subi	r24, 0x01	; 1
    1840:	90 40       	sbci	r25, 0x00	; 0
    1842:	a0 40       	sbci	r26, 0x00	; 0
    1844:	e1 f7       	brne	.-8      	; 0x183e <single_block_detection+0x4c0>
    1846:	00 c0       	rjmp	.+0      	; 0x1848 <single_block_detection+0x4ca>
    1848:	00 00       	nop
			_delay_ms(750);
			forward();
    184a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef1();
    184e:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			stop();
    1852:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1856:	8f ef       	ldi	r24, 0xFF	; 255
    1858:	9f eb       	ldi	r25, 0xBF	; 191
    185a:	a1 e2       	ldi	r26, 0x21	; 33
    185c:	81 50       	subi	r24, 0x01	; 1
    185e:	90 40       	sbci	r25, 0x00	; 0
    1860:	a0 40       	sbci	r26, 0x00	; 0
    1862:	e1 f7       	brne	.-8      	; 0x185c <single_block_detection+0x4de>
    1864:	00 c0       	rjmp	.+0      	; 0x1866 <single_block_detection+0x4e8>
    1866:	00 00       	nop
			_delay_ms(750);
			forward();
    1868:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(40);
    186c:	88 e2       	ldi	r24, 0x28	; 40
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    1874:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1878:	8f ef       	ldi	r24, 0xFF	; 255
    187a:	9f eb       	ldi	r25, 0xBF	; 191
    187c:	a1 e2       	ldi	r26, 0x21	; 33
    187e:	81 50       	subi	r24, 0x01	; 1
    1880:	90 40       	sbci	r25, 0x00	; 0
    1882:	a0 40       	sbci	r26, 0x00	; 0
    1884:	e1 f7       	brne	.-8      	; 0x187e <single_block_detection+0x500>
    1886:	00 c0       	rjmp	.+0      	; 0x1888 <single_block_detection+0x50a>
    1888:	00 00       	nop
			_delay_ms(750);
			forward();
    188a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(35);
    188e:	83 e2       	ldi	r24, 0x23	; 35
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    1896:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    189a:	8f ef       	ldi	r24, 0xFF	; 255
    189c:	9f eb       	ldi	r25, 0xBF	; 191
    189e:	a1 e2       	ldi	r26, 0x21	; 33
    18a0:	81 50       	subi	r24, 0x01	; 1
    18a2:	90 40       	sbci	r25, 0x00	; 0
    18a4:	a0 40       	sbci	r26, 0x00	; 0
    18a6:	e1 f7       	brne	.-8      	; 0x18a0 <single_block_detection+0x522>
    18a8:	00 c0       	rjmp	.+0      	; 0x18aa <single_block_detection+0x52c>
    18aa:	00 00       	nop
			_delay_ms(750);
			left_degrees(93);
    18ac:	8d e5       	ldi	r24, 0x5D	; 93
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
			stop();
    18b4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    18b8:	8f ef       	ldi	r24, 0xFF	; 255
    18ba:	9f eb       	ldi	r25, 0xBF	; 191
    18bc:	a1 e2       	ldi	r26, 0x21	; 33
    18be:	81 50       	subi	r24, 0x01	; 1
    18c0:	90 40       	sbci	r25, 0x00	; 0
    18c2:	a0 40       	sbci	r26, 0x00	; 0
    18c4:	e1 f7       	brne	.-8      	; 0x18be <single_block_detection+0x540>
    18c6:	00 c0       	rjmp	.+0      	; 0x18c8 <single_block_detection+0x54a>
    18c8:	00 00       	nop
			_delay_ms(750);
			forward();
    18ca:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef1();
    18ce:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			stop();
    18d2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    18d6:	8f ef       	ldi	r24, 0xFF	; 255
    18d8:	9f eb       	ldi	r25, 0xBF	; 191
    18da:	a1 e2       	ldi	r26, 0x21	; 33
    18dc:	81 50       	subi	r24, 0x01	; 1
    18de:	90 40       	sbci	r25, 0x00	; 0
    18e0:	a0 40       	sbci	r26, 0x00	; 0
    18e2:	e1 f7       	brne	.-8      	; 0x18dc <single_block_detection+0x55e>
    18e4:	00 c0       	rjmp	.+0      	; 0x18e6 <single_block_detection+0x568>
    18e6:	00 00       	nop
			_delay_ms(750);
			forward();
    18e8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(40);
    18ec:	88 e2       	ldi	r24, 0x28	; 40
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    18f4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
			forward();
    18f8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef1();
    18fc:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
			stop();
    1900:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	9f eb       	ldi	r25, 0xBF	; 191
    1908:	a1 e2       	ldi	r26, 0x21	; 33
    190a:	81 50       	subi	r24, 0x01	; 1
    190c:	90 40       	sbci	r25, 0x00	; 0
    190e:	a0 40       	sbci	r26, 0x00	; 0
    1910:	e1 f7       	brne	.-8      	; 0x190a <single_block_detection+0x58c>
    1912:	00 c0       	rjmp	.+0      	; 0x1914 <single_block_detection+0x596>
    1914:	00 00       	nop
			_delay_ms(750);

			forward();
    1916:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
			linef(40);
    191a:	88 e2       	ldi	r24, 0x28	; 40
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 04 04 	call	0x808	; 0x808 <linef>
			stop();
    1922:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1926:	8f ef       	ldi	r24, 0xFF	; 255
    1928:	9f eb       	ldi	r25, 0xBF	; 191
    192a:	a1 e2       	ldi	r26, 0x21	; 33
    192c:	81 50       	subi	r24, 0x01	; 1
    192e:	90 40       	sbci	r25, 0x00	; 0
    1930:	a0 40       	sbci	r26, 0x00	; 0
    1932:	e1 f7       	brne	.-8      	; 0x192c <single_block_detection+0x5ae>
    1934:	00 c0       	rjmp	.+0      	; 0x1936 <single_block_detection+0x5b8>
    1936:	00 00       	nop
			_delay_ms(750);
			detection_right();
    1938:	0e 94 b0 04 	call	0x960	; 0x960 <detection_right>
			goto stopp;
    193c:	c7 c0       	rjmp	.+398    	; 0x1acc <single_block_detection+0x74e>
			
			
	}
	else if( value2 > 300 && value2 < 450 )
    193e:	8d 52       	subi	r24, 0x2D	; 45
    1940:	91 40       	sbci	r25, 0x01	; 1
    1942:	85 39       	cpi	r24, 0x95	; 149
    1944:	91 05       	cpc	r25, r1
    1946:	08 f0       	brcs	.+2      	; 0x194a <single_block_detection+0x5cc>
    1948:	c1 c0       	rjmp	.+386    	; 0x1acc <single_block_detection+0x74e>
	{
		velocity(255,255);
    194a:	8f ef       	ldi	r24, 0xFF	; 255
    194c:	6f ef       	ldi	r22, 0xFF	; 255
    194e:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    1952:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(32);
    1956:	80 e2       	ldi	r24, 0x20	; 32
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    195e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1962:	8f ef       	ldi	r24, 0xFF	; 255
    1964:	9f eb       	ldi	r25, 0xBF	; 191
    1966:	a1 e2       	ldi	r26, 0x21	; 33
    1968:	81 50       	subi	r24, 0x01	; 1
    196a:	90 40       	sbci	r25, 0x00	; 0
    196c:	a0 40       	sbci	r26, 0x00	; 0
    196e:	e1 f7       	brne	.-8      	; 0x1968 <single_block_detection+0x5ea>
    1970:	00 c0       	rjmp	.+0      	; 0x1972 <single_block_detection+0x5f4>
    1972:	00 00       	nop
		_delay_ms(750);
		right_degrees(93);
    1974:	8d e5       	ldi	r24, 0x5D	; 93
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
		stop();
    197c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1980:	8f ef       	ldi	r24, 0xFF	; 255
    1982:	9f eb       	ldi	r25, 0xBF	; 191
    1984:	a1 e2       	ldi	r26, 0x21	; 33
    1986:	81 50       	subi	r24, 0x01	; 1
    1988:	90 40       	sbci	r25, 0x00	; 0
    198a:	a0 40       	sbci	r26, 0x00	; 0
    198c:	e1 f7       	brne	.-8      	; 0x1986 <single_block_detection+0x608>
    198e:	00 c0       	rjmp	.+0      	; 0x1990 <single_block_detection+0x612>
    1990:	00 00       	nop
		_delay_ms(750);
		velocity(255,255);
    1992:	8f ef       	ldi	r24, 0xFF	; 255
    1994:	6f ef       	ldi	r22, 0xFF	; 255
    1996:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    199a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef1();
    199e:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    19a2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    19a6:	8f ef       	ldi	r24, 0xFF	; 255
    19a8:	9f eb       	ldi	r25, 0xBF	; 191
    19aa:	a1 e2       	ldi	r26, 0x21	; 33
    19ac:	81 50       	subi	r24, 0x01	; 1
    19ae:	90 40       	sbci	r25, 0x00	; 0
    19b0:	a0 40       	sbci	r26, 0x00	; 0
    19b2:	e1 f7       	brne	.-8      	; 0x19ac <single_block_detection+0x62e>
    19b4:	00 c0       	rjmp	.+0      	; 0x19b6 <single_block_detection+0x638>
    19b6:	00 00       	nop
		
		_delay_ms(750);
		
		velocity(255,255);
    19b8:	8f ef       	ldi	r24, 0xFF	; 255
    19ba:	6f ef       	ldi	r22, 0xFF	; 255
    19bc:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    19c0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(70);
    19c4:	86 e4       	ldi	r24, 0x46	; 70
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    19cc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    19d0:	8f ef       	ldi	r24, 0xFF	; 255
    19d2:	9f eb       	ldi	r25, 0xBF	; 191
    19d4:	a1 e2       	ldi	r26, 0x21	; 33
    19d6:	81 50       	subi	r24, 0x01	; 1
    19d8:	90 40       	sbci	r25, 0x00	; 0
    19da:	a0 40       	sbci	r26, 0x00	; 0
    19dc:	e1 f7       	brne	.-8      	; 0x19d6 <single_block_detection+0x658>
    19de:	00 c0       	rjmp	.+0      	; 0x19e0 <single_block_detection+0x662>
    19e0:	00 00       	nop
		
		_delay_ms(750);
		
		rotate();
    19e2:	0e 94 cc 03 	call	0x798	; 0x798 <rotate>
		stop();
    19e6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    19ea:	8f ef       	ldi	r24, 0xFF	; 255
    19ec:	9f eb       	ldi	r25, 0xBF	; 191
    19ee:	a1 e2       	ldi	r26, 0x21	; 33
    19f0:	81 50       	subi	r24, 0x01	; 1
    19f2:	90 40       	sbci	r25, 0x00	; 0
    19f4:	a0 40       	sbci	r26, 0x00	; 0
    19f6:	e1 f7       	brne	.-8      	; 0x19f0 <single_block_detection+0x672>
    19f8:	00 c0       	rjmp	.+0      	; 0x19fa <single_block_detection+0x67c>
    19fa:	00 00       	nop
		
		_delay_ms(750);
		
		right_degrees(90);
    19fc:	8a e5       	ldi	r24, 0x5A	; 90
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
		stop();
    1a04:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1a08:	8f ef       	ldi	r24, 0xFF	; 255
    1a0a:	9f eb       	ldi	r25, 0xBF	; 191
    1a0c:	a1 e2       	ldi	r26, 0x21	; 33
    1a0e:	81 50       	subi	r24, 0x01	; 1
    1a10:	90 40       	sbci	r25, 0x00	; 0
    1a12:	a0 40       	sbci	r26, 0x00	; 0
    1a14:	e1 f7       	brne	.-8      	; 0x1a0e <single_block_detection+0x690>
    1a16:	00 c0       	rjmp	.+0      	; 0x1a18 <single_block_detection+0x69a>
    1a18:	00 00       	nop
			
		_delay_ms(750);
		
		right_degrees(90);
    1a1a:	8a e5       	ldi	r24, 0x5A	; 90
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
		stop();
    1a22:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1a26:	8f ef       	ldi	r24, 0xFF	; 255
    1a28:	9f eb       	ldi	r25, 0xBF	; 191
    1a2a:	a1 e2       	ldi	r26, 0x21	; 33
    1a2c:	81 50       	subi	r24, 0x01	; 1
    1a2e:	90 40       	sbci	r25, 0x00	; 0
    1a30:	a0 40       	sbci	r26, 0x00	; 0
    1a32:	e1 f7       	brne	.-8      	; 0x1a2c <single_block_detection+0x6ae>
    1a34:	00 c0       	rjmp	.+0      	; 0x1a36 <single_block_detection+0x6b8>
    1a36:	00 00       	nop
		
		_delay_ms(750);
		
		velocity(255,255);
    1a38:	8f ef       	ldi	r24, 0xFF	; 255
    1a3a:	6f ef       	ldi	r22, 0xFF	; 255
    1a3c:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    1a40:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef1();
    1a44:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    1a48:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1a4c:	8f ef       	ldi	r24, 0xFF	; 255
    1a4e:	9f eb       	ldi	r25, 0xBF	; 191
    1a50:	a1 e2       	ldi	r26, 0x21	; 33
    1a52:	81 50       	subi	r24, 0x01	; 1
    1a54:	90 40       	sbci	r25, 0x00	; 0
    1a56:	a0 40       	sbci	r26, 0x00	; 0
    1a58:	e1 f7       	brne	.-8      	; 0x1a52 <single_block_detection+0x6d4>
    1a5a:	00 c0       	rjmp	.+0      	; 0x1a5c <single_block_detection+0x6de>
    1a5c:	00 00       	nop
		
		_delay_ms(750);
		
		velocity(255,255);
    1a5e:	8f ef       	ldi	r24, 0xFF	; 255
    1a60:	6f ef       	ldi	r22, 0xFF	; 255
    1a62:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    1a66:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(72);
    1a6a:	88 e4       	ldi	r24, 0x48	; 72
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1a72:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1a76:	8f ef       	ldi	r24, 0xFF	; 255
    1a78:	9f eb       	ldi	r25, 0xBF	; 191
    1a7a:	a1 e2       	ldi	r26, 0x21	; 33
    1a7c:	81 50       	subi	r24, 0x01	; 1
    1a7e:	90 40       	sbci	r25, 0x00	; 0
    1a80:	a0 40       	sbci	r26, 0x00	; 0
    1a82:	e1 f7       	brne	.-8      	; 0x1a7c <single_block_detection+0x6fe>
    1a84:	00 c0       	rjmp	.+0      	; 0x1a86 <single_block_detection+0x708>
    1a86:	00 00       	nop
		
		_delay_ms(750);
		
		right_degrees(93);
    1a88:	8d e5       	ldi	r24, 0x5D	; 93
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
		stop();
    1a90:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1a94:	8f ef       	ldi	r24, 0xFF	; 255
    1a96:	9f eb       	ldi	r25, 0xBF	; 191
    1a98:	a1 e2       	ldi	r26, 0x21	; 33
    1a9a:	81 50       	subi	r24, 0x01	; 1
    1a9c:	90 40       	sbci	r25, 0x00	; 0
    1a9e:	a0 40       	sbci	r26, 0x00	; 0
    1aa0:	e1 f7       	brne	.-8      	; 0x1a9a <single_block_detection+0x71c>
    1aa2:	00 c0       	rjmp	.+0      	; 0x1aa4 <single_block_detection+0x726>
    1aa4:	00 00       	nop
		
		_delay_ms(750);
		
		velocity(255,255);
    1aa6:	8f ef       	ldi	r24, 0xFF	; 255
    1aa8:	6f ef       	ldi	r22, 0xFF	; 255
    1aaa:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		back();
    1aae:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
		linef1();
    1ab2:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    1ab6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1aba:	8f ef       	ldi	r24, 0xFF	; 255
    1abc:	9f eb       	ldi	r25, 0xBF	; 191
    1abe:	a1 e2       	ldi	r26, 0x21	; 33
    1ac0:	81 50       	subi	r24, 0x01	; 1
    1ac2:	90 40       	sbci	r25, 0x00	; 0
    1ac4:	a0 40       	sbci	r26, 0x00	; 0
    1ac6:	e1 f7       	brne	.-8      	; 0x1ac0 <single_block_detection+0x742>
    1ac8:	00 c0       	rjmp	.+0      	; 0x1aca <single_block_detection+0x74c>
    1aca:	00 00       	nop
		goto stopp;
		
		
	
	}		
	stopp:stop();
    1acc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1ad0:	8f ef       	ldi	r24, 0xFF	; 255
    1ad2:	9f eb       	ldi	r25, 0xBF	; 191
    1ad4:	a1 e2       	ldi	r26, 0x21	; 33
    1ad6:	81 50       	subi	r24, 0x01	; 1
    1ad8:	90 40       	sbci	r25, 0x00	; 0
    1ada:	a0 40       	sbci	r26, 0x00	; 0
    1adc:	e1 f7       	brne	.-8      	; 0x1ad6 <single_block_detection+0x758>
    1ade:	00 c0       	rjmp	.+0      	; 0x1ae0 <single_block_detection+0x762>
    1ae0:	00 00       	nop
			_delay_ms(750);
	
}
    1ae2:	08 95       	ret

00001ae4 <short_left_long_right_detection>:
		
		
	}

void short_left_long_right_detection(void){
		velocity(255,255);
    1ae4:	8f ef       	ldi	r24, 0xFF	; 255
    1ae6:	6f ef       	ldi	r22, 0xFF	; 255
    1ae8:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    1aec:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(32);
    1af0:	80 e2       	ldi	r24, 0x20	; 32
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1af8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1afc:	8f ef       	ldi	r24, 0xFF	; 255
    1afe:	9f eb       	ldi	r25, 0xBF	; 191
    1b00:	a1 e2       	ldi	r26, 0x21	; 33
    1b02:	81 50       	subi	r24, 0x01	; 1
    1b04:	90 40       	sbci	r25, 0x00	; 0
    1b06:	a0 40       	sbci	r26, 0x00	; 0
    1b08:	e1 f7       	brne	.-8      	; 0x1b02 <short_left_long_right_detection+0x1e>
    1b0a:	00 c0       	rjmp	.+0      	; 0x1b0c <short_left_long_right_detection+0x28>
    1b0c:	00 00       	nop
		_delay_ms(750);
		left_degrees(93);
    1b0e:	8d e5       	ldi	r24, 0x5D	; 93
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
		stop();
    1b16:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1b1a:	8f ef       	ldi	r24, 0xFF	; 255
    1b1c:	9f eb       	ldi	r25, 0xBF	; 191
    1b1e:	a1 e2       	ldi	r26, 0x21	; 33
    1b20:	81 50       	subi	r24, 0x01	; 1
    1b22:	90 40       	sbci	r25, 0x00	; 0
    1b24:	a0 40       	sbci	r26, 0x00	; 0
    1b26:	e1 f7       	brne	.-8      	; 0x1b20 <short_left_long_right_detection+0x3c>
    1b28:	00 c0       	rjmp	.+0      	; 0x1b2a <short_left_long_right_detection+0x46>
    1b2a:	00 00       	nop
		_delay_ms(750);
		
		velocity(255,255);
    1b2c:	8f ef       	ldi	r24, 0xFF	; 255
    1b2e:	6f ef       	ldi	r22, 0xFF	; 255
    1b30:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		back();
    1b34:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
		linef(15);
    1b38:	8f e0       	ldi	r24, 0x0F	; 15
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1b40:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1b44:	8f ef       	ldi	r24, 0xFF	; 255
    1b46:	9f eb       	ldi	r25, 0xBF	; 191
    1b48:	a1 e2       	ldi	r26, 0x21	; 33
    1b4a:	81 50       	subi	r24, 0x01	; 1
    1b4c:	90 40       	sbci	r25, 0x00	; 0
    1b4e:	a0 40       	sbci	r26, 0x00	; 0
    1b50:	e1 f7       	brne	.-8      	; 0x1b4a <short_left_long_right_detection+0x66>
    1b52:	00 c0       	rjmp	.+0      	; 0x1b54 <short_left_long_right_detection+0x70>
    1b54:	00 00       	nop
		_delay_ms(750);
		
		rotate();
    1b56:	0e 94 cc 03 	call	0x798	; 0x798 <rotate>
		stop();
    1b5a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
		
		back();
    1b5e:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
		linef1();
    1b62:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		
		
		velocity( 255, 255 );
    1b66:	8f ef       	ldi	r24, 0xFF	; 255
    1b68:	6f ef       	ldi	r22, 0xFF	; 255
    1b6a:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    1b6e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(40);
    1b72:	88 e2       	ldi	r24, 0x28	; 40
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1b7a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1b7e:	8f ef       	ldi	r24, 0xFF	; 255
    1b80:	9f eb       	ldi	r25, 0xBF	; 191
    1b82:	a1 e2       	ldi	r26, 0x21	; 33
    1b84:	81 50       	subi	r24, 0x01	; 1
    1b86:	90 40       	sbci	r25, 0x00	; 0
    1b88:	a0 40       	sbci	r26, 0x00	; 0
    1b8a:	e1 f7       	brne	.-8      	; 0x1b84 <short_left_long_right_detection+0xa0>
    1b8c:	00 c0       	rjmp	.+0      	; 0x1b8e <short_left_long_right_detection+0xaa>
    1b8e:	00 00       	nop
		_delay_ms(750);
		forward();
    1b90:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(35);
    1b94:	83 e2       	ldi	r24, 0x23	; 35
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1b9c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1ba0:	8f ef       	ldi	r24, 0xFF	; 255
    1ba2:	9f eb       	ldi	r25, 0xBF	; 191
    1ba4:	a1 e2       	ldi	r26, 0x21	; 33
    1ba6:	81 50       	subi	r24, 0x01	; 1
    1ba8:	90 40       	sbci	r25, 0x00	; 0
    1baa:	a0 40       	sbci	r26, 0x00	; 0
    1bac:	e1 f7       	brne	.-8      	; 0x1ba6 <short_left_long_right_detection+0xc2>
    1bae:	00 c0       	rjmp	.+0      	; 0x1bb0 <short_left_long_right_detection+0xcc>
    1bb0:	00 00       	nop
		_delay_ms(750);
		left_degrees(93);
    1bb2:	8d e5       	ldi	r24, 0x5D	; 93
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
		stop();
    1bba:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1bbe:	8f ef       	ldi	r24, 0xFF	; 255
    1bc0:	9f eb       	ldi	r25, 0xBF	; 191
    1bc2:	a1 e2       	ldi	r26, 0x21	; 33
    1bc4:	81 50       	subi	r24, 0x01	; 1
    1bc6:	90 40       	sbci	r25, 0x00	; 0
    1bc8:	a0 40       	sbci	r26, 0x00	; 0
    1bca:	e1 f7       	brne	.-8      	; 0x1bc4 <short_left_long_right_detection+0xe0>
    1bcc:	00 c0       	rjmp	.+0      	; 0x1bce <short_left_long_right_detection+0xea>
    1bce:	00 00       	nop
		_delay_ms(750);
		forward();
    1bd0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef1();
    1bd4:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    1bd8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1bdc:	8f ef       	ldi	r24, 0xFF	; 255
    1bde:	9f eb       	ldi	r25, 0xBF	; 191
    1be0:	a1 e2       	ldi	r26, 0x21	; 33
    1be2:	81 50       	subi	r24, 0x01	; 1
    1be4:	90 40       	sbci	r25, 0x00	; 0
    1be6:	a0 40       	sbci	r26, 0x00	; 0
    1be8:	e1 f7       	brne	.-8      	; 0x1be2 <short_left_long_right_detection+0xfe>
    1bea:	00 c0       	rjmp	.+0      	; 0x1bec <short_left_long_right_detection+0x108>
    1bec:	00 00       	nop
		_delay_ms(750);
		forward();
    1bee:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(40);
    1bf2:	88 e2       	ldi	r24, 0x28	; 40
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1bfa:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1bfe:	8f ef       	ldi	r24, 0xFF	; 255
    1c00:	9f eb       	ldi	r25, 0xBF	; 191
    1c02:	a1 e2       	ldi	r26, 0x21	; 33
    1c04:	81 50       	subi	r24, 0x01	; 1
    1c06:	90 40       	sbci	r25, 0x00	; 0
    1c08:	a0 40       	sbci	r26, 0x00	; 0
    1c0a:	e1 f7       	brne	.-8      	; 0x1c04 <short_left_long_right_detection+0x120>
    1c0c:	00 c0       	rjmp	.+0      	; 0x1c0e <short_left_long_right_detection+0x12a>
    1c0e:	00 00       	nop
		_delay_ms(750);
		forward();
    1c10:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(35);
    1c14:	83 e2       	ldi	r24, 0x23	; 35
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1c1c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1c20:	8f ef       	ldi	r24, 0xFF	; 255
    1c22:	9f eb       	ldi	r25, 0xBF	; 191
    1c24:	a1 e2       	ldi	r26, 0x21	; 33
    1c26:	81 50       	subi	r24, 0x01	; 1
    1c28:	90 40       	sbci	r25, 0x00	; 0
    1c2a:	a0 40       	sbci	r26, 0x00	; 0
    1c2c:	e1 f7       	brne	.-8      	; 0x1c26 <short_left_long_right_detection+0x142>
    1c2e:	00 c0       	rjmp	.+0      	; 0x1c30 <short_left_long_right_detection+0x14c>
    1c30:	00 00       	nop
		_delay_ms(750);
		right_degrees(93);
    1c32:	8d e5       	ldi	r24, 0x5D	; 93
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
		stop();
    1c3a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1c3e:	8f ef       	ldi	r24, 0xFF	; 255
    1c40:	9f eb       	ldi	r25, 0xBF	; 191
    1c42:	a1 e2       	ldi	r26, 0x21	; 33
    1c44:	81 50       	subi	r24, 0x01	; 1
    1c46:	90 40       	sbci	r25, 0x00	; 0
    1c48:	a0 40       	sbci	r26, 0x00	; 0
    1c4a:	e1 f7       	brne	.-8      	; 0x1c44 <short_left_long_right_detection+0x160>
    1c4c:	00 c0       	rjmp	.+0      	; 0x1c4e <short_left_long_right_detection+0x16a>
    1c4e:	00 00       	nop
		_delay_ms(750);
		forward();
    1c50:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef1();
    1c54:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    1c58:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1c5c:	8f ef       	ldi	r24, 0xFF	; 255
    1c5e:	9f eb       	ldi	r25, 0xBF	; 191
    1c60:	a1 e2       	ldi	r26, 0x21	; 33
    1c62:	81 50       	subi	r24, 0x01	; 1
    1c64:	90 40       	sbci	r25, 0x00	; 0
    1c66:	a0 40       	sbci	r26, 0x00	; 0
    1c68:	e1 f7       	brne	.-8      	; 0x1c62 <short_left_long_right_detection+0x17e>
    1c6a:	00 c0       	rjmp	.+0      	; 0x1c6c <short_left_long_right_detection+0x188>
    1c6c:	00 00       	nop
		_delay_ms(750);
		forward();
    1c6e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(40);
    1c72:	88 e2       	ldi	r24, 0x28	; 40
    1c74:	90 e0       	ldi	r25, 0x00	; 0
    1c76:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1c7a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
		forward();
    1c7e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef1();
    1c82:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    1c86:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1c8a:	8f ef       	ldi	r24, 0xFF	; 255
    1c8c:	9f eb       	ldi	r25, 0xBF	; 191
    1c8e:	a1 e2       	ldi	r26, 0x21	; 33
    1c90:	81 50       	subi	r24, 0x01	; 1
    1c92:	90 40       	sbci	r25, 0x00	; 0
    1c94:	a0 40       	sbci	r26, 0x00	; 0
    1c96:	e1 f7       	brne	.-8      	; 0x1c90 <short_left_long_right_detection+0x1ac>
    1c98:	00 c0       	rjmp	.+0      	; 0x1c9a <short_left_long_right_detection+0x1b6>
    1c9a:	00 00       	nop
		_delay_ms(750);

		forward();
    1c9c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(40);
    1ca0:	88 e2       	ldi	r24, 0x28	; 40
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1ca8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1cac:	8f ef       	ldi	r24, 0xFF	; 255
    1cae:	9f eb       	ldi	r25, 0xBF	; 191
    1cb0:	a1 e2       	ldi	r26, 0x21	; 33
    1cb2:	81 50       	subi	r24, 0x01	; 1
    1cb4:	90 40       	sbci	r25, 0x00	; 0
    1cb6:	a0 40       	sbci	r26, 0x00	; 0
    1cb8:	e1 f7       	brne	.-8      	; 0x1cb2 <short_left_long_right_detection+0x1ce>
    1cba:	00 c0       	rjmp	.+0      	; 0x1cbc <short_left_long_right_detection+0x1d8>
    1cbc:	00 00       	nop
		_delay_ms(750);
		detection_left();
    1cbe:	0e 94 1f 08 	call	0x103e	; 0x103e <detection_left>
    1cc2:	8f ef       	ldi	r24, 0xFF	; 255
    1cc4:	9f eb       	ldi	r25, 0xBF	; 191
    1cc6:	a1 e2       	ldi	r26, 0x21	; 33
    1cc8:	81 50       	subi	r24, 0x01	; 1
    1cca:	90 40       	sbci	r25, 0x00	; 0
    1ccc:	a0 40       	sbci	r26, 0x00	; 0
    1cce:	e1 f7       	brne	.-8      	; 0x1cc8 <short_left_long_right_detection+0x1e4>
    1cd0:	00 c0       	rjmp	.+0      	; 0x1cd2 <short_left_long_right_detection+0x1ee>
    1cd2:	00 00       	nop
		_delay_ms(750);
		
		/////
		
		velocity(255,255);
    1cd4:	8f ef       	ldi	r24, 0xFF	; 255
    1cd6:	6f ef       	ldi	r22, 0xFF	; 255
    1cd8:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    1cdc:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(40);
    1ce0:	88 e2       	ldi	r24, 0x28	; 40
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1ce8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1cec:	8f ef       	ldi	r24, 0xFF	; 255
    1cee:	9f eb       	ldi	r25, 0xBF	; 191
    1cf0:	a1 e2       	ldi	r26, 0x21	; 33
    1cf2:	81 50       	subi	r24, 0x01	; 1
    1cf4:	90 40       	sbci	r25, 0x00	; 0
    1cf6:	a0 40       	sbci	r26, 0x00	; 0
    1cf8:	e1 f7       	brne	.-8      	; 0x1cf2 <short_left_long_right_detection+0x20e>
    1cfa:	00 c0       	rjmp	.+0      	; 0x1cfc <short_left_long_right_detection+0x218>
    1cfc:	00 00       	nop
		_delay_ms(750);
		
		
		velocity(255,255);
    1cfe:	8f ef       	ldi	r24, 0xFF	; 255
    1d00:	6f ef       	ldi	r22, 0xFF	; 255
    1d02:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    1d06:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(32);
    1d0a:	80 e2       	ldi	r24, 0x20	; 32
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1d12:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1d16:	8f ef       	ldi	r24, 0xFF	; 255
    1d18:	9f eb       	ldi	r25, 0xBF	; 191
    1d1a:	a1 e2       	ldi	r26, 0x21	; 33
    1d1c:	81 50       	subi	r24, 0x01	; 1
    1d1e:	90 40       	sbci	r25, 0x00	; 0
    1d20:	a0 40       	sbci	r26, 0x00	; 0
    1d22:	e1 f7       	brne	.-8      	; 0x1d1c <short_left_long_right_detection+0x238>
    1d24:	00 c0       	rjmp	.+0      	; 0x1d26 <short_left_long_right_detection+0x242>
    1d26:	00 00       	nop
		_delay_ms(750);
		right_degrees(93);
    1d28:	8d e5       	ldi	r24, 0x5D	; 93
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
		stop();
    1d30:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1d34:	8f ef       	ldi	r24, 0xFF	; 255
    1d36:	9f eb       	ldi	r25, 0xBF	; 191
    1d38:	a1 e2       	ldi	r26, 0x21	; 33
    1d3a:	81 50       	subi	r24, 0x01	; 1
    1d3c:	90 40       	sbci	r25, 0x00	; 0
    1d3e:	a0 40       	sbci	r26, 0x00	; 0
    1d40:	e1 f7       	brne	.-8      	; 0x1d3a <short_left_long_right_detection+0x256>
    1d42:	00 c0       	rjmp	.+0      	; 0x1d44 <short_left_long_right_detection+0x260>
    1d44:	00 00       	nop
		_delay_ms(750);
		velocity(255,255);
    1d46:	8f ef       	ldi	r24, 0xFF	; 255
    1d48:	6f ef       	ldi	r22, 0xFF	; 255
    1d4a:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    1d4e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef1();
    1d52:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    1d56:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1d5a:	8f ef       	ldi	r24, 0xFF	; 255
    1d5c:	9f eb       	ldi	r25, 0xBF	; 191
    1d5e:	a1 e2       	ldi	r26, 0x21	; 33
    1d60:	81 50       	subi	r24, 0x01	; 1
    1d62:	90 40       	sbci	r25, 0x00	; 0
    1d64:	a0 40       	sbci	r26, 0x00	; 0
    1d66:	e1 f7       	brne	.-8      	; 0x1d60 <short_left_long_right_detection+0x27c>
    1d68:	00 c0       	rjmp	.+0      	; 0x1d6a <short_left_long_right_detection+0x286>
    1d6a:	00 00       	nop
		
		_delay_ms(750);
		
		velocity(255,255);
    1d6c:	8f ef       	ldi	r24, 0xFF	; 255
    1d6e:	6f ef       	ldi	r22, 0xFF	; 255
    1d70:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    1d74:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(70);
    1d78:	86 e4       	ldi	r24, 0x46	; 70
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1d80:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1d84:	8f ef       	ldi	r24, 0xFF	; 255
    1d86:	9f eb       	ldi	r25, 0xBF	; 191
    1d88:	a1 e2       	ldi	r26, 0x21	; 33
    1d8a:	81 50       	subi	r24, 0x01	; 1
    1d8c:	90 40       	sbci	r25, 0x00	; 0
    1d8e:	a0 40       	sbci	r26, 0x00	; 0
    1d90:	e1 f7       	brne	.-8      	; 0x1d8a <short_left_long_right_detection+0x2a6>
    1d92:	00 c0       	rjmp	.+0      	; 0x1d94 <short_left_long_right_detection+0x2b0>
    1d94:	00 00       	nop
		
		_delay_ms(750);
		
		rotate();
    1d96:	0e 94 cc 03 	call	0x798	; 0x798 <rotate>
		stop();
    1d9a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1d9e:	8f ef       	ldi	r24, 0xFF	; 255
    1da0:	9f eb       	ldi	r25, 0xBF	; 191
    1da2:	a1 e2       	ldi	r26, 0x21	; 33
    1da4:	81 50       	subi	r24, 0x01	; 1
    1da6:	90 40       	sbci	r25, 0x00	; 0
    1da8:	a0 40       	sbci	r26, 0x00	; 0
    1daa:	e1 f7       	brne	.-8      	; 0x1da4 <short_left_long_right_detection+0x2c0>
    1dac:	00 c0       	rjmp	.+0      	; 0x1dae <short_left_long_right_detection+0x2ca>
    1dae:	00 00       	nop
		
		_delay_ms(750);
		
		right_degrees(90);
    1db0:	8a e5       	ldi	r24, 0x5A	; 90
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
		stop();
    1db8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1dbc:	8f ef       	ldi	r24, 0xFF	; 255
    1dbe:	9f eb       	ldi	r25, 0xBF	; 191
    1dc0:	a1 e2       	ldi	r26, 0x21	; 33
    1dc2:	81 50       	subi	r24, 0x01	; 1
    1dc4:	90 40       	sbci	r25, 0x00	; 0
    1dc6:	a0 40       	sbci	r26, 0x00	; 0
    1dc8:	e1 f7       	brne	.-8      	; 0x1dc2 <short_left_long_right_detection+0x2de>
    1dca:	00 c0       	rjmp	.+0      	; 0x1dcc <short_left_long_right_detection+0x2e8>
    1dcc:	00 00       	nop
		
		_delay_ms(750);
		
		right_degrees(90);
    1dce:	8a e5       	ldi	r24, 0x5A	; 90
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
		stop();
    1dd6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1dda:	8f ef       	ldi	r24, 0xFF	; 255
    1ddc:	9f eb       	ldi	r25, 0xBF	; 191
    1dde:	a1 e2       	ldi	r26, 0x21	; 33
    1de0:	81 50       	subi	r24, 0x01	; 1
    1de2:	90 40       	sbci	r25, 0x00	; 0
    1de4:	a0 40       	sbci	r26, 0x00	; 0
    1de6:	e1 f7       	brne	.-8      	; 0x1de0 <short_left_long_right_detection+0x2fc>
    1de8:	00 c0       	rjmp	.+0      	; 0x1dea <short_left_long_right_detection+0x306>
    1dea:	00 00       	nop
		
		_delay_ms(750);
		
		velocity(255,255);
    1dec:	8f ef       	ldi	r24, 0xFF	; 255
    1dee:	6f ef       	ldi	r22, 0xFF	; 255
    1df0:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    1df4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef1();
    1df8:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    1dfc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1e00:	8f ef       	ldi	r24, 0xFF	; 255
    1e02:	9f eb       	ldi	r25, 0xBF	; 191
    1e04:	a1 e2       	ldi	r26, 0x21	; 33
    1e06:	81 50       	subi	r24, 0x01	; 1
    1e08:	90 40       	sbci	r25, 0x00	; 0
    1e0a:	a0 40       	sbci	r26, 0x00	; 0
    1e0c:	e1 f7       	brne	.-8      	; 0x1e06 <short_left_long_right_detection+0x322>
    1e0e:	00 c0       	rjmp	.+0      	; 0x1e10 <short_left_long_right_detection+0x32c>
    1e10:	00 00       	nop
		
		_delay_ms(750);
		
		velocity(255,255);
    1e12:	8f ef       	ldi	r24, 0xFF	; 255
    1e14:	6f ef       	ldi	r22, 0xFF	; 255
    1e16:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    1e1a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(72);
    1e1e:	88 e4       	ldi	r24, 0x48	; 72
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1e26:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1e2a:	8f ef       	ldi	r24, 0xFF	; 255
    1e2c:	9f eb       	ldi	r25, 0xBF	; 191
    1e2e:	a1 e2       	ldi	r26, 0x21	; 33
    1e30:	81 50       	subi	r24, 0x01	; 1
    1e32:	90 40       	sbci	r25, 0x00	; 0
    1e34:	a0 40       	sbci	r26, 0x00	; 0
    1e36:	e1 f7       	brne	.-8      	; 0x1e30 <short_left_long_right_detection+0x34c>
    1e38:	00 c0       	rjmp	.+0      	; 0x1e3a <short_left_long_right_detection+0x356>
    1e3a:	00 00       	nop
		
		_delay_ms(750);
		
		right_degrees(93);
    1e3c:	8d e5       	ldi	r24, 0x5D	; 93
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
		stop();
    1e44:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1e48:	8f ef       	ldi	r24, 0xFF	; 255
    1e4a:	9f eb       	ldi	r25, 0xBF	; 191
    1e4c:	a1 e2       	ldi	r26, 0x21	; 33
    1e4e:	81 50       	subi	r24, 0x01	; 1
    1e50:	90 40       	sbci	r25, 0x00	; 0
    1e52:	a0 40       	sbci	r26, 0x00	; 0
    1e54:	e1 f7       	brne	.-8      	; 0x1e4e <short_left_long_right_detection+0x36a>
    1e56:	00 c0       	rjmp	.+0      	; 0x1e58 <short_left_long_right_detection+0x374>
    1e58:	00 00       	nop
		
		_delay_ms(750);
		
		velocity(255,255);
    1e5a:	8f ef       	ldi	r24, 0xFF	; 255
    1e5c:	6f ef       	ldi	r22, 0xFF	; 255
    1e5e:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		back();
    1e62:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
		linef1();
    1e66:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    1e6a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1e6e:	8f ef       	ldi	r24, 0xFF	; 255
    1e70:	9f eb       	ldi	r25, 0xBF	; 191
    1e72:	a1 e2       	ldi	r26, 0x21	; 33
    1e74:	81 50       	subi	r24, 0x01	; 1
    1e76:	90 40       	sbci	r25, 0x00	; 0
    1e78:	a0 40       	sbci	r26, 0x00	; 0
    1e7a:	e1 f7       	brne	.-8      	; 0x1e74 <short_left_long_right_detection+0x390>
    1e7c:	00 c0       	rjmp	.+0      	; 0x1e7e <short_left_long_right_detection+0x39a>
    1e7e:	00 00       	nop
		
		_delay_ms(750);
	
}
    1e80:	08 95       	ret

00001e82 <short_double_detection>:
void short_double_detection()
{
	
	
	
		velocity(255,255);
    1e82:	8f ef       	ldi	r24, 0xFF	; 255
    1e84:	6f ef       	ldi	r22, 0xFF	; 255
    1e86:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    1e8a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(32);
    1e8e:	80 e2       	ldi	r24, 0x20	; 32
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1e96:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1e9a:	8f ef       	ldi	r24, 0xFF	; 255
    1e9c:	9f eb       	ldi	r25, 0xBF	; 191
    1e9e:	a1 e2       	ldi	r26, 0x21	; 33
    1ea0:	81 50       	subi	r24, 0x01	; 1
    1ea2:	90 40       	sbci	r25, 0x00	; 0
    1ea4:	a0 40       	sbci	r26, 0x00	; 0
    1ea6:	e1 f7       	brne	.-8      	; 0x1ea0 <short_double_detection+0x1e>
    1ea8:	00 c0       	rjmp	.+0      	; 0x1eaa <short_double_detection+0x28>
    1eaa:	00 00       	nop
		_delay_ms(750);
		left_degrees(93);
    1eac:	8d e5       	ldi	r24, 0x5D	; 93
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
		stop();
    1eb4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1eb8:	8f ef       	ldi	r24, 0xFF	; 255
    1eba:	9f eb       	ldi	r25, 0xBF	; 191
    1ebc:	a1 e2       	ldi	r26, 0x21	; 33
    1ebe:	81 50       	subi	r24, 0x01	; 1
    1ec0:	90 40       	sbci	r25, 0x00	; 0
    1ec2:	a0 40       	sbci	r26, 0x00	; 0
    1ec4:	e1 f7       	brne	.-8      	; 0x1ebe <short_double_detection+0x3c>
    1ec6:	00 c0       	rjmp	.+0      	; 0x1ec8 <short_double_detection+0x46>
    1ec8:	00 00       	nop
		_delay_ms(750);
		
		velocity(255,255);
    1eca:	8f ef       	ldi	r24, 0xFF	; 255
    1ecc:	6f ef       	ldi	r22, 0xFF	; 255
    1ece:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		back();
    1ed2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
		linef(15);
    1ed6:	8f e0       	ldi	r24, 0x0F	; 15
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1ede:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1ee2:	8f ef       	ldi	r24, 0xFF	; 255
    1ee4:	9f eb       	ldi	r25, 0xBF	; 191
    1ee6:	a1 e2       	ldi	r26, 0x21	; 33
    1ee8:	81 50       	subi	r24, 0x01	; 1
    1eea:	90 40       	sbci	r25, 0x00	; 0
    1eec:	a0 40       	sbci	r26, 0x00	; 0
    1eee:	e1 f7       	brne	.-8      	; 0x1ee8 <short_double_detection+0x66>
    1ef0:	00 c0       	rjmp	.+0      	; 0x1ef2 <short_double_detection+0x70>
    1ef2:	00 00       	nop
		_delay_ms(750);
		
		rotate();
    1ef4:	0e 94 cc 03 	call	0x798	; 0x798 <rotate>
		stop();
    1ef8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
		
		back();
    1efc:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
		linef1();
    1f00:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		
		
		velocity( 255, 255 );
    1f04:	8f ef       	ldi	r24, 0xFF	; 255
    1f06:	6f ef       	ldi	r22, 0xFF	; 255
    1f08:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    1f0c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(40);
    1f10:	88 e2       	ldi	r24, 0x28	; 40
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1f18:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1f1c:	8f ef       	ldi	r24, 0xFF	; 255
    1f1e:	9f eb       	ldi	r25, 0xBF	; 191
    1f20:	a1 e2       	ldi	r26, 0x21	; 33
    1f22:	81 50       	subi	r24, 0x01	; 1
    1f24:	90 40       	sbci	r25, 0x00	; 0
    1f26:	a0 40       	sbci	r26, 0x00	; 0
    1f28:	e1 f7       	brne	.-8      	; 0x1f22 <short_double_detection+0xa0>
    1f2a:	00 c0       	rjmp	.+0      	; 0x1f2c <short_double_detection+0xaa>
    1f2c:	00 00       	nop
		_delay_ms(750);
		forward();
    1f2e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(35);
    1f32:	83 e2       	ldi	r24, 0x23	; 35
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1f3a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1f3e:	8f ef       	ldi	r24, 0xFF	; 255
    1f40:	9f eb       	ldi	r25, 0xBF	; 191
    1f42:	a1 e2       	ldi	r26, 0x21	; 33
    1f44:	81 50       	subi	r24, 0x01	; 1
    1f46:	90 40       	sbci	r25, 0x00	; 0
    1f48:	a0 40       	sbci	r26, 0x00	; 0
    1f4a:	e1 f7       	brne	.-8      	; 0x1f44 <short_double_detection+0xc2>
    1f4c:	00 c0       	rjmp	.+0      	; 0x1f4e <short_double_detection+0xcc>
    1f4e:	00 00       	nop
		_delay_ms(750);
		left_degrees(93);
    1f50:	8d e5       	ldi	r24, 0x5D	; 93
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
		stop();
    1f58:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1f5c:	8f ef       	ldi	r24, 0xFF	; 255
    1f5e:	9f eb       	ldi	r25, 0xBF	; 191
    1f60:	a1 e2       	ldi	r26, 0x21	; 33
    1f62:	81 50       	subi	r24, 0x01	; 1
    1f64:	90 40       	sbci	r25, 0x00	; 0
    1f66:	a0 40       	sbci	r26, 0x00	; 0
    1f68:	e1 f7       	brne	.-8      	; 0x1f62 <short_double_detection+0xe0>
    1f6a:	00 c0       	rjmp	.+0      	; 0x1f6c <short_double_detection+0xea>
    1f6c:	00 00       	nop
		_delay_ms(750);
		forward();
    1f6e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef1();
    1f72:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    1f76:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1f7a:	8f ef       	ldi	r24, 0xFF	; 255
    1f7c:	9f eb       	ldi	r25, 0xBF	; 191
    1f7e:	a1 e2       	ldi	r26, 0x21	; 33
    1f80:	81 50       	subi	r24, 0x01	; 1
    1f82:	90 40       	sbci	r25, 0x00	; 0
    1f84:	a0 40       	sbci	r26, 0x00	; 0
    1f86:	e1 f7       	brne	.-8      	; 0x1f80 <short_double_detection+0xfe>
    1f88:	00 c0       	rjmp	.+0      	; 0x1f8a <short_double_detection+0x108>
    1f8a:	00 00       	nop
		_delay_ms(750);
		forward();
    1f8c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(40);
    1f90:	88 e2       	ldi	r24, 0x28	; 40
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1f98:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1f9c:	8f ef       	ldi	r24, 0xFF	; 255
    1f9e:	9f eb       	ldi	r25, 0xBF	; 191
    1fa0:	a1 e2       	ldi	r26, 0x21	; 33
    1fa2:	81 50       	subi	r24, 0x01	; 1
    1fa4:	90 40       	sbci	r25, 0x00	; 0
    1fa6:	a0 40       	sbci	r26, 0x00	; 0
    1fa8:	e1 f7       	brne	.-8      	; 0x1fa2 <short_double_detection+0x120>
    1faa:	00 c0       	rjmp	.+0      	; 0x1fac <short_double_detection+0x12a>
    1fac:	00 00       	nop
		_delay_ms(750);
		forward();
    1fae:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(35);
    1fb2:	83 e2       	ldi	r24, 0x23	; 35
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    1fba:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1fbe:	8f ef       	ldi	r24, 0xFF	; 255
    1fc0:	9f eb       	ldi	r25, 0xBF	; 191
    1fc2:	a1 e2       	ldi	r26, 0x21	; 33
    1fc4:	81 50       	subi	r24, 0x01	; 1
    1fc6:	90 40       	sbci	r25, 0x00	; 0
    1fc8:	a0 40       	sbci	r26, 0x00	; 0
    1fca:	e1 f7       	brne	.-8      	; 0x1fc4 <short_double_detection+0x142>
    1fcc:	00 c0       	rjmp	.+0      	; 0x1fce <short_double_detection+0x14c>
    1fce:	00 00       	nop
		_delay_ms(750);
		right_degrees(93);
    1fd0:	8d e5       	ldi	r24, 0x5D	; 93
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
		stop();
    1fd8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1fdc:	8f ef       	ldi	r24, 0xFF	; 255
    1fde:	9f eb       	ldi	r25, 0xBF	; 191
    1fe0:	a1 e2       	ldi	r26, 0x21	; 33
    1fe2:	81 50       	subi	r24, 0x01	; 1
    1fe4:	90 40       	sbci	r25, 0x00	; 0
    1fe6:	a0 40       	sbci	r26, 0x00	; 0
    1fe8:	e1 f7       	brne	.-8      	; 0x1fe2 <short_double_detection+0x160>
    1fea:	00 c0       	rjmp	.+0      	; 0x1fec <short_double_detection+0x16a>
    1fec:	00 00       	nop
		_delay_ms(750);
		forward();
    1fee:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef1();
    1ff2:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    1ff6:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    1ffa:	8f ef       	ldi	r24, 0xFF	; 255
    1ffc:	9f eb       	ldi	r25, 0xBF	; 191
    1ffe:	a1 e2       	ldi	r26, 0x21	; 33
    2000:	81 50       	subi	r24, 0x01	; 1
    2002:	90 40       	sbci	r25, 0x00	; 0
    2004:	a0 40       	sbci	r26, 0x00	; 0
    2006:	e1 f7       	brne	.-8      	; 0x2000 <short_double_detection+0x17e>
    2008:	00 c0       	rjmp	.+0      	; 0x200a <short_double_detection+0x188>
    200a:	00 00       	nop
		_delay_ms(750);
		forward();
    200c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(40);
    2010:	88 e2       	ldi	r24, 0x28	; 40
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    2018:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
		forward();
    201c:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef1();
    2020:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    2024:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    2028:	8f ef       	ldi	r24, 0xFF	; 255
    202a:	9f eb       	ldi	r25, 0xBF	; 191
    202c:	a1 e2       	ldi	r26, 0x21	; 33
    202e:	81 50       	subi	r24, 0x01	; 1
    2030:	90 40       	sbci	r25, 0x00	; 0
    2032:	a0 40       	sbci	r26, 0x00	; 0
    2034:	e1 f7       	brne	.-8      	; 0x202e <short_double_detection+0x1ac>
    2036:	00 c0       	rjmp	.+0      	; 0x2038 <short_double_detection+0x1b6>
    2038:	00 00       	nop
		_delay_ms(750);

		forward();
    203a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(40);
    203e:	88 e2       	ldi	r24, 0x28	; 40
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    2046:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    204a:	8f ef       	ldi	r24, 0xFF	; 255
    204c:	9f eb       	ldi	r25, 0xBF	; 191
    204e:	a1 e2       	ldi	r26, 0x21	; 33
    2050:	81 50       	subi	r24, 0x01	; 1
    2052:	90 40       	sbci	r25, 0x00	; 0
    2054:	a0 40       	sbci	r26, 0x00	; 0
    2056:	e1 f7       	brne	.-8      	; 0x2050 <short_double_detection+0x1ce>
    2058:	00 c0       	rjmp	.+0      	; 0x205a <short_double_detection+0x1d8>
    205a:	00 00       	nop
		_delay_ms(750);
		detection_left();
    205c:	0e 94 1f 08 	call	0x103e	; 0x103e <detection_left>
    2060:	8f ef       	ldi	r24, 0xFF	; 255
    2062:	9f eb       	ldi	r25, 0xBF	; 191
    2064:	a1 e2       	ldi	r26, 0x21	; 33
    2066:	81 50       	subi	r24, 0x01	; 1
    2068:	90 40       	sbci	r25, 0x00	; 0
    206a:	a0 40       	sbci	r26, 0x00	; 0
    206c:	e1 f7       	brne	.-8      	; 0x2066 <short_double_detection+0x1e4>
    206e:	00 c0       	rjmp	.+0      	; 0x2070 <short_double_detection+0x1ee>
    2070:	00 00       	nop
		_delay_ms(750);
		
		
		velocity(255,255);
    2072:	8f ef       	ldi	r24, 0xFF	; 255
    2074:	6f ef       	ldi	r22, 0xFF	; 255
    2076:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    207a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(40);
    207e:	88 e2       	ldi	r24, 0x28	; 40
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    2086:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    208a:	8f ef       	ldi	r24, 0xFF	; 255
    208c:	9f eb       	ldi	r25, 0xBF	; 191
    208e:	a1 e2       	ldi	r26, 0x21	; 33
    2090:	81 50       	subi	r24, 0x01	; 1
    2092:	90 40       	sbci	r25, 0x00	; 0
    2094:	a0 40       	sbci	r26, 0x00	; 0
    2096:	e1 f7       	brne	.-8      	; 0x2090 <short_double_detection+0x20e>
    2098:	00 c0       	rjmp	.+0      	; 0x209a <short_double_detection+0x218>
    209a:	00 00       	nop
		_delay_ms(750);
		
		velocity(255,255);
    209c:	8f ef       	ldi	r24, 0xFF	; 255
    209e:	6f ef       	ldi	r22, 0xFF	; 255
    20a0:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    20a4:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(32);
    20a8:	80 e2       	ldi	r24, 0x20	; 32
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    20b0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    20b4:	8f ef       	ldi	r24, 0xFF	; 255
    20b6:	9f eb       	ldi	r25, 0xBF	; 191
    20b8:	a1 e2       	ldi	r26, 0x21	; 33
    20ba:	81 50       	subi	r24, 0x01	; 1
    20bc:	90 40       	sbci	r25, 0x00	; 0
    20be:	a0 40       	sbci	r26, 0x00	; 0
    20c0:	e1 f7       	brne	.-8      	; 0x20ba <short_double_detection+0x238>
    20c2:	00 c0       	rjmp	.+0      	; 0x20c4 <short_double_detection+0x242>
    20c4:	00 00       	nop
		_delay_ms(750);
		right_degrees(93);
    20c6:	8d e5       	ldi	r24, 0x5D	; 93
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
		stop();
    20ce:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    20d2:	8f ef       	ldi	r24, 0xFF	; 255
    20d4:	9f eb       	ldi	r25, 0xBF	; 191
    20d6:	a1 e2       	ldi	r26, 0x21	; 33
    20d8:	81 50       	subi	r24, 0x01	; 1
    20da:	90 40       	sbci	r25, 0x00	; 0
    20dc:	a0 40       	sbci	r26, 0x00	; 0
    20de:	e1 f7       	brne	.-8      	; 0x20d8 <short_double_detection+0x256>
    20e0:	00 c0       	rjmp	.+0      	; 0x20e2 <short_double_detection+0x260>
    20e2:	00 00       	nop
		_delay_ms(750);
		
		velocity(255,255);
    20e4:	8f ef       	ldi	r24, 0xFF	; 255
    20e6:	6f ef       	ldi	r22, 0xFF	; 255
    20e8:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		back();
    20ec:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
		linef(15);
    20f0:	8f e0       	ldi	r24, 0x0F	; 15
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    20f8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    20fc:	8f ef       	ldi	r24, 0xFF	; 255
    20fe:	9f eb       	ldi	r25, 0xBF	; 191
    2100:	a1 e2       	ldi	r26, 0x21	; 33
    2102:	81 50       	subi	r24, 0x01	; 1
    2104:	90 40       	sbci	r25, 0x00	; 0
    2106:	a0 40       	sbci	r26, 0x00	; 0
    2108:	e1 f7       	brne	.-8      	; 0x2102 <short_double_detection+0x280>
    210a:	00 c0       	rjmp	.+0      	; 0x210c <short_double_detection+0x28a>
    210c:	00 00       	nop
		_delay_ms(750);
		
		rotate();
    210e:	0e 94 cc 03 	call	0x798	; 0x798 <rotate>
		stop();
    2112:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
		
		back();
    2116:	0e 94 d5 01 	call	0x3aa	; 0x3aa <back>
		linef1();
    211a:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		
		
		velocity( 255, 255 );
    211e:	8f ef       	ldi	r24, 0xFF	; 255
    2120:	6f ef       	ldi	r22, 0xFF	; 255
    2122:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    2126:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(40);
    212a:	88 e2       	ldi	r24, 0x28	; 40
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    2132:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    2136:	8f ef       	ldi	r24, 0xFF	; 255
    2138:	9f eb       	ldi	r25, 0xBF	; 191
    213a:	a1 e2       	ldi	r26, 0x21	; 33
    213c:	81 50       	subi	r24, 0x01	; 1
    213e:	90 40       	sbci	r25, 0x00	; 0
    2140:	a0 40       	sbci	r26, 0x00	; 0
    2142:	e1 f7       	brne	.-8      	; 0x213c <short_double_detection+0x2ba>
    2144:	00 c0       	rjmp	.+0      	; 0x2146 <short_double_detection+0x2c4>
    2146:	00 00       	nop
		_delay_ms(750);
		forward();
    2148:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(32);
    214c:	80 e2       	ldi	r24, 0x20	; 32
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    2154:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    2158:	8f ef       	ldi	r24, 0xFF	; 255
    215a:	9f eb       	ldi	r25, 0xBF	; 191
    215c:	a1 e2       	ldi	r26, 0x21	; 33
    215e:	81 50       	subi	r24, 0x01	; 1
    2160:	90 40       	sbci	r25, 0x00	; 0
    2162:	a0 40       	sbci	r26, 0x00	; 0
    2164:	e1 f7       	brne	.-8      	; 0x215e <short_double_detection+0x2dc>
    2166:	00 c0       	rjmp	.+0      	; 0x2168 <short_double_detection+0x2e6>
    2168:	00 00       	nop
		_delay_ms(750);
		right_degrees(93);
    216a:	8d e5       	ldi	r24, 0x5D	; 93
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	0e 94 b8 02 	call	0x570	; 0x570 <right_degrees>
		stop();
    2172:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    2176:	8f ef       	ldi	r24, 0xFF	; 255
    2178:	9f eb       	ldi	r25, 0xBF	; 191
    217a:	a1 e2       	ldi	r26, 0x21	; 33
    217c:	81 50       	subi	r24, 0x01	; 1
    217e:	90 40       	sbci	r25, 0x00	; 0
    2180:	a0 40       	sbci	r26, 0x00	; 0
    2182:	e1 f7       	brne	.-8      	; 0x217c <short_double_detection+0x2fa>
    2184:	00 c0       	rjmp	.+0      	; 0x2186 <short_double_detection+0x304>
    2186:	00 00       	nop
		_delay_ms(750);
		forward();
    2188:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef1();
    218c:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    2190:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    2194:	8f ef       	ldi	r24, 0xFF	; 255
    2196:	9f eb       	ldi	r25, 0xBF	; 191
    2198:	a1 e2       	ldi	r26, 0x21	; 33
    219a:	81 50       	subi	r24, 0x01	; 1
    219c:	90 40       	sbci	r25, 0x00	; 0
    219e:	a0 40       	sbci	r26, 0x00	; 0
    21a0:	e1 f7       	brne	.-8      	; 0x219a <short_double_detection+0x318>
    21a2:	00 c0       	rjmp	.+0      	; 0x21a4 <short_double_detection+0x322>
    21a4:	00 00       	nop
		_delay_ms(750);
		forward();
    21a6:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(40);
    21aa:	88 e2       	ldi	r24, 0x28	; 40
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    21b2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    21b6:	8f ef       	ldi	r24, 0xFF	; 255
    21b8:	9f eb       	ldi	r25, 0xBF	; 191
    21ba:	a1 e2       	ldi	r26, 0x21	; 33
    21bc:	81 50       	subi	r24, 0x01	; 1
    21be:	90 40       	sbci	r25, 0x00	; 0
    21c0:	a0 40       	sbci	r26, 0x00	; 0
    21c2:	e1 f7       	brne	.-8      	; 0x21bc <short_double_detection+0x33a>
    21c4:	00 c0       	rjmp	.+0      	; 0x21c6 <short_double_detection+0x344>
    21c6:	00 00       	nop
		_delay_ms(750);
		forward();
    21c8:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(35);
    21cc:	83 e2       	ldi	r24, 0x23	; 35
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    21d4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    21d8:	8f ef       	ldi	r24, 0xFF	; 255
    21da:	9f eb       	ldi	r25, 0xBF	; 191
    21dc:	a1 e2       	ldi	r26, 0x21	; 33
    21de:	81 50       	subi	r24, 0x01	; 1
    21e0:	90 40       	sbci	r25, 0x00	; 0
    21e2:	a0 40       	sbci	r26, 0x00	; 0
    21e4:	e1 f7       	brne	.-8      	; 0x21de <short_double_detection+0x35c>
    21e6:	00 c0       	rjmp	.+0      	; 0x21e8 <short_double_detection+0x366>
    21e8:	00 00       	nop
		_delay_ms(750);
		left_degrees(93);
    21ea:	8d e5       	ldi	r24, 0x5D	; 93
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	0e 94 ad 02 	call	0x55a	; 0x55a <left_degrees>
		stop();
    21f2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    21f6:	8f ef       	ldi	r24, 0xFF	; 255
    21f8:	9f eb       	ldi	r25, 0xBF	; 191
    21fa:	a1 e2       	ldi	r26, 0x21	; 33
    21fc:	81 50       	subi	r24, 0x01	; 1
    21fe:	90 40       	sbci	r25, 0x00	; 0
    2200:	a0 40       	sbci	r26, 0x00	; 0
    2202:	e1 f7       	brne	.-8      	; 0x21fc <short_double_detection+0x37a>
    2204:	00 c0       	rjmp	.+0      	; 0x2206 <__stack+0x7>
    2206:	00 00       	nop
		_delay_ms(750);
		forward();
    2208:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef1();
    220c:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    2210:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    2214:	8f ef       	ldi	r24, 0xFF	; 255
    2216:	9f eb       	ldi	r25, 0xBF	; 191
    2218:	a1 e2       	ldi	r26, 0x21	; 33
    221a:	81 50       	subi	r24, 0x01	; 1
    221c:	90 40       	sbci	r25, 0x00	; 0
    221e:	a0 40       	sbci	r26, 0x00	; 0
    2220:	e1 f7       	brne	.-8      	; 0x221a <__stack+0x1b>
    2222:	00 c0       	rjmp	.+0      	; 0x2224 <__stack+0x25>
    2224:	00 00       	nop
		_delay_ms(750);
		forward();
    2226:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(40);
    222a:	88 e2       	ldi	r24, 0x28	; 40
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    2232:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
		forward();
    2236:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef1();
    223a:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    223e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    2242:	8f ef       	ldi	r24, 0xFF	; 255
    2244:	9f eb       	ldi	r25, 0xBF	; 191
    2246:	a1 e2       	ldi	r26, 0x21	; 33
    2248:	81 50       	subi	r24, 0x01	; 1
    224a:	90 40       	sbci	r25, 0x00	; 0
    224c:	a0 40       	sbci	r26, 0x00	; 0
    224e:	e1 f7       	brne	.-8      	; 0x2248 <__stack+0x49>
    2250:	00 c0       	rjmp	.+0      	; 0x2252 <__stack+0x53>
    2252:	00 00       	nop
		_delay_ms(750);

		forward();
    2254:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(40);
    2258:	88 e2       	ldi	r24, 0x28	; 40
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    2260:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    2264:	8f ef       	ldi	r24, 0xFF	; 255
    2266:	9f eb       	ldi	r25, 0xBF	; 191
    2268:	a1 e2       	ldi	r26, 0x21	; 33
    226a:	81 50       	subi	r24, 0x01	; 1
    226c:	90 40       	sbci	r25, 0x00	; 0
    226e:	a0 40       	sbci	r26, 0x00	; 0
    2270:	e1 f7       	brne	.-8      	; 0x226a <__stack+0x6b>
    2272:	00 c0       	rjmp	.+0      	; 0x2274 <__stack+0x75>
    2274:	00 00       	nop
		_delay_ms(750);
		detection_right();
    2276:	0e 94 b0 04 	call	0x960	; 0x960 <detection_right>
    227a:	8f ef       	ldi	r24, 0xFF	; 255
    227c:	9f ef       	ldi	r25, 0xFF	; 255
    227e:	a9 e5       	ldi	r26, 0x59	; 89
    2280:	81 50       	subi	r24, 0x01	; 1
    2282:	90 40       	sbci	r25, 0x00	; 0
    2284:	a0 40       	sbci	r26, 0x00	; 0
    2286:	e1 f7       	brne	.-8      	; 0x2280 <__stack+0x81>
    2288:	00 c0       	rjmp	.+0      	; 0x228a <__stack+0x8b>
    228a:	00 00       	nop
		_delay_ms(2000);
		
		
		
	}
    228c:	08 95       	ret

0000228e <detection>:
		
		
		
	}
void detection(void){
	sharp = ADC_Conversion(9);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    228e:	89 e0       	ldi	r24, 0x09	; 9
    2290:	0e 94 b1 03 	call	0x762	; 0x762 <ADC_Conversion>
    2294:	80 93 18 02 	sts	0x0218, r24
	value1 = Sharp_GP2D12_estimation(sharp);
    2298:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Sharp_GP2D12_estimation>
    229c:	90 93 1a 02 	sts	0x021A, r25
    22a0:	80 93 19 02 	sts	0x0219, r24
	sharp1 = ADC_Conversion(13);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
    22a4:	8d e0       	ldi	r24, 0x0D	; 13
    22a6:	0e 94 b1 03 	call	0x762	; 0x762 <ADC_Conversion>
    22aa:	80 93 15 02 	sts	0x0215, r24
	value2 = Sharp_GP2D12_estimation(sharp1);
    22ae:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <Sharp_GP2D12_estimation>
    22b2:	90 93 17 02 	sts	0x0217, r25
    22b6:	80 93 16 02 	sts	0x0216, r24
	
	if(value1 > 50 && value1 < 150 && value2 > 50 && value2 < 150)
    22ba:	20 91 19 02 	lds	r18, 0x0219
    22be:	30 91 1a 02 	lds	r19, 0x021A
    22c2:	a9 01       	movw	r20, r18
    22c4:	43 53       	subi	r20, 0x33	; 51
    22c6:	50 40       	sbci	r21, 0x00	; 0
    22c8:	43 36       	cpi	r20, 0x63	; 99
    22ca:	51 05       	cpc	r21, r1
    22cc:	a0 f4       	brcc	.+40     	; 0x22f6 <detection+0x68>
    22ce:	83 33       	cpi	r24, 0x33	; 51
    22d0:	91 05       	cpc	r25, r1
    22d2:	30 f0       	brcs	.+12     	; 0x22e0 <detection+0x52>
    22d4:	86 39       	cpi	r24, 0x96	; 150
    22d6:	91 05       	cpc	r25, r1
    22d8:	18 f4       	brcc	.+6      	; 0x22e0 <detection+0x52>
	{
		
		short_double_detection();
    22da:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <short_double_detection>
	value1 = Sharp_GP2D12_estimation(sharp);
	sharp1 = ADC_Conversion(13);						//Stores the Analog value of front sharp connected to ADC channel 11 into variable "sharp"
	value2 = Sharp_GP2D12_estimation(sharp1);
	
	if(value1 > 50 && value1 < 150 && value2 > 50 && value2 < 150)
	{
    22de:	1c c0       	rjmp	.+56     	; 0x2318 <detection+0x8a>
		
		short_double_detection();
	}
	else if(value1 > 50 && value1 < 150 && value2 > 300 && value2 < 450)
    22e0:	41 e0       	ldi	r20, 0x01	; 1
    22e2:	8d 32       	cpi	r24, 0x2D	; 45
    22e4:	94 07       	cpc	r25, r20
    22e6:	38 f0       	brcs	.+14     	; 0x22f6 <detection+0x68>
    22e8:	a1 e0       	ldi	r26, 0x01	; 1
    22ea:	82 3c       	cpi	r24, 0xC2	; 194
    22ec:	9a 07       	cpc	r25, r26
    22ee:	18 f4       	brcc	.+6      	; 0x22f6 <detection+0x68>
	{
		
		short_left_long_right_detection();
    22f0:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <short_left_long_right_detection>
	{
		
		short_double_detection();
	}
	else if(value1 > 50 && value1 < 150 && value2 > 300 && value2 < 450)
	{
    22f4:	11 c0       	rjmp	.+34     	; 0x2318 <detection+0x8a>
		
		short_left_long_right_detection();
	}
	else if(value2 > 50 && value2 < 150 && value1 > 300 && value1 < 450)
    22f6:	c3 97       	sbiw	r24, 0x33	; 51
    22f8:	83 36       	cpi	r24, 0x63	; 99
    22fa:	91 05       	cpc	r25, r1
    22fc:	58 f4       	brcc	.+22     	; 0x2314 <detection+0x86>
    22fe:	b1 e0       	ldi	r27, 0x01	; 1
    2300:	2d 32       	cpi	r18, 0x2D	; 45
    2302:	3b 07       	cpc	r19, r27
    2304:	38 f0       	brcs	.+14     	; 0x2314 <detection+0x86>
    2306:	41 e0       	ldi	r20, 0x01	; 1
    2308:	22 3c       	cpi	r18, 0xC2	; 194
    230a:	34 07       	cpc	r19, r20
    230c:	18 f4       	brcc	.+6      	; 0x2314 <detection+0x86>
	{
		short_right_long_left_detection();
    230e:	0e 94 50 06 	call	0xca0	; 0xca0 <short_right_long_left_detection>
	{
		
		short_left_long_right_detection();
	}
	else if(value2 > 50 && value2 < 150 && value1 > 300 && value1 < 450)
	{
    2312:	02 c0       	rjmp	.+4      	; 0x2318 <detection+0x8a>
		short_right_long_left_detection();
	}
	else
	{
		single_block_detection();
    2314:	0e 94 bf 09 	call	0x137e	; 0x137e <single_block_detection>
	}
	velocity(255,255);
    2318:	8f ef       	ldi	r24, 0xFF	; 255
    231a:	6f ef       	ldi	r22, 0xFF	; 255
    231c:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
	forward();
    2320:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef(40);
    2324:	88 e2       	ldi	r24, 0x28	; 40
    2326:	90 e0       	ldi	r25, 0x00	; 0
    2328:	0e 94 04 04 	call	0x808	; 0x808 <linef>
	stop();
    232c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    2330:	8f ef       	ldi	r24, 0xFF	; 255
    2332:	9f eb       	ldi	r25, 0xBF	; 191
    2334:	a1 e2       	ldi	r26, 0x21	; 33
    2336:	81 50       	subi	r24, 0x01	; 1
    2338:	90 40       	sbci	r25, 0x00	; 0
    233a:	a0 40       	sbci	r26, 0x00	; 0
    233c:	e1 f7       	brne	.-8      	; 0x2336 <detection+0xa8>
    233e:	00 c0       	rjmp	.+0      	; 0x2340 <detection+0xb2>
    2340:	00 00       	nop
	
	_delay_ms(750);
	
	velocity(255,255);
    2342:	8f ef       	ldi	r24, 0xFF	; 255
    2344:	6f ef       	ldi	r22, 0xFF	; 255
    2346:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
	forward();
    234a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef1();
    234e:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
	stop();
    2352:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    2356:	8f ef       	ldi	r24, 0xFF	; 255
    2358:	9f eb       	ldi	r25, 0xBF	; 191
    235a:	a1 e2       	ldi	r26, 0x21	; 33
    235c:	81 50       	subi	r24, 0x01	; 1
    235e:	90 40       	sbci	r25, 0x00	; 0
    2360:	a0 40       	sbci	r26, 0x00	; 0
    2362:	e1 f7       	brne	.-8      	; 0x235c <detection+0xce>
    2364:	00 c0       	rjmp	.+0      	; 0x2366 <detection+0xd8>
    2366:	00 00       	nop
	
	_delay_ms(750);
	
	velocity(255,255);
    2368:	8f ef       	ldi	r24, 0xFF	; 255
    236a:	6f ef       	ldi	r22, 0xFF	; 255
    236c:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
	forward();
    2370:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
	linef(40);
    2374:	88 e2       	ldi	r24, 0x28	; 40
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	0e 94 04 04 	call	0x808	; 0x808 <linef>
	stop();
    237c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    2380:	8f ef       	ldi	r24, 0xFF	; 255
    2382:	9f eb       	ldi	r25, 0xBF	; 191
    2384:	a1 e2       	ldi	r26, 0x21	; 33
    2386:	81 50       	subi	r24, 0x01	; 1
    2388:	90 40       	sbci	r25, 0x00	; 0
    238a:	a0 40       	sbci	r26, 0x00	; 0
    238c:	e1 f7       	brne	.-8      	; 0x2386 <detection+0xf8>
    238e:	00 c0       	rjmp	.+0      	; 0x2390 <detection+0x102>
    2390:	00 00       	nop
	
	
	
	
	
}
    2392:	08 95       	ret

00002394 <row5>:
			_delay_ms(750);
	
}
void row5(void)
{	
	detection();	
    2394:	0e 94 47 11 	call	0x228e	; 0x228e <detection>
}
    2398:	08 95       	ret

0000239a <main>:

//Main Function

int main(void)
{
		init_devices();
    239a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <init_devices>
		init_devices1();
    239e:	0e 94 43 03 	call	0x686	; 0x686 <init_devices1>
		init_devices2();
    23a2:	0e 94 4a 03 	call	0x694	; 0x694 <init_devices2>
		servo_1(90);
    23a6:	8a e5       	ldi	r24, 0x5A	; 90
    23a8:	0e 94 51 03 	call	0x6a2	; 0x6a2 <servo_1>
		servo_2(1);
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <servo_2>
		
		velocity(255,255);
    23b2:	8f ef       	ldi	r24, 0xFF	; 255
    23b4:	6f ef       	ldi	r22, 0xFF	; 255
    23b6:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    23ba:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef1();
    23be:	0e 94 75 04 	call	0x8ea	; 0x8ea <linef1>
		stop();
    23c2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    23c6:	8f ef       	ldi	r24, 0xFF	; 255
    23c8:	9f eb       	ldi	r25, 0xBF	; 191
    23ca:	a1 e2       	ldi	r26, 0x21	; 33
    23cc:	81 50       	subi	r24, 0x01	; 1
    23ce:	90 40       	sbci	r25, 0x00	; 0
    23d0:	a0 40       	sbci	r26, 0x00	; 0
    23d2:	e1 f7       	brne	.-8      	; 0x23cc <main+0x32>
    23d4:	00 c0       	rjmp	.+0      	; 0x23d6 <main+0x3c>
    23d6:	00 00       	nop
		
		_delay_ms(750);
		
		velocity(255,255);
    23d8:	8f ef       	ldi	r24, 0xFF	; 255
    23da:	6f ef       	ldi	r22, 0xFF	; 255
    23dc:	0e 94 3e 03 	call	0x67c	; 0x67c <velocity>
		forward();
    23e0:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <forward>
		linef(40);
    23e4:	88 e2       	ldi	r24, 0x28	; 40
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	0e 94 04 04 	call	0x808	; 0x808 <linef>
		stop();
    23ec:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <stop>
    23f0:	8f ef       	ldi	r24, 0xFF	; 255
    23f2:	9f eb       	ldi	r25, 0xBF	; 191
    23f4:	a1 e2       	ldi	r26, 0x21	; 33
    23f6:	81 50       	subi	r24, 0x01	; 1
    23f8:	90 40       	sbci	r25, 0x00	; 0
    23fa:	a0 40       	sbci	r26, 0x00	; 0
    23fc:	e1 f7       	brne	.-8      	; 0x23f6 <main+0x5c>
    23fe:	00 c0       	rjmp	.+0      	; 0x2400 <main+0x66>
    2400:	00 00       	nop
		
		_delay_ms(750);
		
		row5();
    2402:	0e 94 ca 11 	call	0x2394	; 0x2394 <row5>
		
}
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	08 95       	ret

0000240c <__subsf3>:
    240c:	50 58       	subi	r21, 0x80	; 128

0000240e <__addsf3>:
    240e:	bb 27       	eor	r27, r27
    2410:	aa 27       	eor	r26, r26
    2412:	0e d0       	rcall	.+28     	; 0x2430 <__addsf3x>
    2414:	4d c1       	rjmp	.+666    	; 0x26b0 <__fp_round>
    2416:	3e d1       	rcall	.+636    	; 0x2694 <__fp_pscA>
    2418:	30 f0       	brcs	.+12     	; 0x2426 <__addsf3+0x18>
    241a:	43 d1       	rcall	.+646    	; 0x26a2 <__fp_pscB>
    241c:	20 f0       	brcs	.+8      	; 0x2426 <__addsf3+0x18>
    241e:	31 f4       	brne	.+12     	; 0x242c <__addsf3+0x1e>
    2420:	9f 3f       	cpi	r25, 0xFF	; 255
    2422:	11 f4       	brne	.+4      	; 0x2428 <__addsf3+0x1a>
    2424:	1e f4       	brtc	.+6      	; 0x242c <__addsf3+0x1e>
    2426:	33 c1       	rjmp	.+614    	; 0x268e <__fp_nan>
    2428:	0e f4       	brtc	.+2      	; 0x242c <__addsf3+0x1e>
    242a:	e0 95       	com	r30
    242c:	e7 fb       	bst	r30, 7
    242e:	29 c1       	rjmp	.+594    	; 0x2682 <__fp_inf>

00002430 <__addsf3x>:
    2430:	e9 2f       	mov	r30, r25
    2432:	4f d1       	rcall	.+670    	; 0x26d2 <__fp_split3>
    2434:	80 f3       	brcs	.-32     	; 0x2416 <__addsf3+0x8>
    2436:	ba 17       	cp	r27, r26
    2438:	62 07       	cpc	r22, r18
    243a:	73 07       	cpc	r23, r19
    243c:	84 07       	cpc	r24, r20
    243e:	95 07       	cpc	r25, r21
    2440:	18 f0       	brcs	.+6      	; 0x2448 <__addsf3x+0x18>
    2442:	71 f4       	brne	.+28     	; 0x2460 <__addsf3x+0x30>
    2444:	9e f5       	brtc	.+102    	; 0x24ac <__addsf3x+0x7c>
    2446:	67 c1       	rjmp	.+718    	; 0x2716 <__fp_zero>
    2448:	0e f4       	brtc	.+2      	; 0x244c <__addsf3x+0x1c>
    244a:	e0 95       	com	r30
    244c:	0b 2e       	mov	r0, r27
    244e:	ba 2f       	mov	r27, r26
    2450:	a0 2d       	mov	r26, r0
    2452:	0b 01       	movw	r0, r22
    2454:	b9 01       	movw	r22, r18
    2456:	90 01       	movw	r18, r0
    2458:	0c 01       	movw	r0, r24
    245a:	ca 01       	movw	r24, r20
    245c:	a0 01       	movw	r20, r0
    245e:	11 24       	eor	r1, r1
    2460:	ff 27       	eor	r31, r31
    2462:	59 1b       	sub	r21, r25
    2464:	99 f0       	breq	.+38     	; 0x248c <__addsf3x+0x5c>
    2466:	59 3f       	cpi	r21, 0xF9	; 249
    2468:	50 f4       	brcc	.+20     	; 0x247e <__addsf3x+0x4e>
    246a:	50 3e       	cpi	r21, 0xE0	; 224
    246c:	68 f1       	brcs	.+90     	; 0x24c8 <__addsf3x+0x98>
    246e:	1a 16       	cp	r1, r26
    2470:	f0 40       	sbci	r31, 0x00	; 0
    2472:	a2 2f       	mov	r26, r18
    2474:	23 2f       	mov	r18, r19
    2476:	34 2f       	mov	r19, r20
    2478:	44 27       	eor	r20, r20
    247a:	58 5f       	subi	r21, 0xF8	; 248
    247c:	f3 cf       	rjmp	.-26     	; 0x2464 <__addsf3x+0x34>
    247e:	46 95       	lsr	r20
    2480:	37 95       	ror	r19
    2482:	27 95       	ror	r18
    2484:	a7 95       	ror	r26
    2486:	f0 40       	sbci	r31, 0x00	; 0
    2488:	53 95       	inc	r21
    248a:	c9 f7       	brne	.-14     	; 0x247e <__addsf3x+0x4e>
    248c:	7e f4       	brtc	.+30     	; 0x24ac <__addsf3x+0x7c>
    248e:	1f 16       	cp	r1, r31
    2490:	ba 0b       	sbc	r27, r26
    2492:	62 0b       	sbc	r22, r18
    2494:	73 0b       	sbc	r23, r19
    2496:	84 0b       	sbc	r24, r20
    2498:	ba f0       	brmi	.+46     	; 0x24c8 <__addsf3x+0x98>
    249a:	91 50       	subi	r25, 0x01	; 1
    249c:	a1 f0       	breq	.+40     	; 0x24c6 <__addsf3x+0x96>
    249e:	ff 0f       	add	r31, r31
    24a0:	bb 1f       	adc	r27, r27
    24a2:	66 1f       	adc	r22, r22
    24a4:	77 1f       	adc	r23, r23
    24a6:	88 1f       	adc	r24, r24
    24a8:	c2 f7       	brpl	.-16     	; 0x249a <__addsf3x+0x6a>
    24aa:	0e c0       	rjmp	.+28     	; 0x24c8 <__addsf3x+0x98>
    24ac:	ba 0f       	add	r27, r26
    24ae:	62 1f       	adc	r22, r18
    24b0:	73 1f       	adc	r23, r19
    24b2:	84 1f       	adc	r24, r20
    24b4:	48 f4       	brcc	.+18     	; 0x24c8 <__addsf3x+0x98>
    24b6:	87 95       	ror	r24
    24b8:	77 95       	ror	r23
    24ba:	67 95       	ror	r22
    24bc:	b7 95       	ror	r27
    24be:	f7 95       	ror	r31
    24c0:	9e 3f       	cpi	r25, 0xFE	; 254
    24c2:	08 f0       	brcs	.+2      	; 0x24c6 <__addsf3x+0x96>
    24c4:	b3 cf       	rjmp	.-154    	; 0x242c <__addsf3+0x1e>
    24c6:	93 95       	inc	r25
    24c8:	88 0f       	add	r24, r24
    24ca:	08 f0       	brcs	.+2      	; 0x24ce <__addsf3x+0x9e>
    24cc:	99 27       	eor	r25, r25
    24ce:	ee 0f       	add	r30, r30
    24d0:	97 95       	ror	r25
    24d2:	87 95       	ror	r24
    24d4:	08 95       	ret

000024d6 <__divsf3>:
    24d6:	0c d0       	rcall	.+24     	; 0x24f0 <__divsf3x>
    24d8:	eb c0       	rjmp	.+470    	; 0x26b0 <__fp_round>
    24da:	e3 d0       	rcall	.+454    	; 0x26a2 <__fp_pscB>
    24dc:	40 f0       	brcs	.+16     	; 0x24ee <__divsf3+0x18>
    24de:	da d0       	rcall	.+436    	; 0x2694 <__fp_pscA>
    24e0:	30 f0       	brcs	.+12     	; 0x24ee <__divsf3+0x18>
    24e2:	21 f4       	brne	.+8      	; 0x24ec <__divsf3+0x16>
    24e4:	5f 3f       	cpi	r21, 0xFF	; 255
    24e6:	19 f0       	breq	.+6      	; 0x24ee <__divsf3+0x18>
    24e8:	cc c0       	rjmp	.+408    	; 0x2682 <__fp_inf>
    24ea:	51 11       	cpse	r21, r1
    24ec:	15 c1       	rjmp	.+554    	; 0x2718 <__fp_szero>
    24ee:	cf c0       	rjmp	.+414    	; 0x268e <__fp_nan>

000024f0 <__divsf3x>:
    24f0:	f0 d0       	rcall	.+480    	; 0x26d2 <__fp_split3>
    24f2:	98 f3       	brcs	.-26     	; 0x24da <__divsf3+0x4>

000024f4 <__divsf3_pse>:
    24f4:	99 23       	and	r25, r25
    24f6:	c9 f3       	breq	.-14     	; 0x24ea <__divsf3+0x14>
    24f8:	55 23       	and	r21, r21
    24fa:	b1 f3       	breq	.-20     	; 0x24e8 <__divsf3+0x12>
    24fc:	95 1b       	sub	r25, r21
    24fe:	55 0b       	sbc	r21, r21
    2500:	bb 27       	eor	r27, r27
    2502:	aa 27       	eor	r26, r26
    2504:	62 17       	cp	r22, r18
    2506:	73 07       	cpc	r23, r19
    2508:	84 07       	cpc	r24, r20
    250a:	38 f0       	brcs	.+14     	; 0x251a <__divsf3_pse+0x26>
    250c:	9f 5f       	subi	r25, 0xFF	; 255
    250e:	5f 4f       	sbci	r21, 0xFF	; 255
    2510:	22 0f       	add	r18, r18
    2512:	33 1f       	adc	r19, r19
    2514:	44 1f       	adc	r20, r20
    2516:	aa 1f       	adc	r26, r26
    2518:	a9 f3       	breq	.-22     	; 0x2504 <__divsf3_pse+0x10>
    251a:	33 d0       	rcall	.+102    	; 0x2582 <__divsf3_pse+0x8e>
    251c:	0e 2e       	mov	r0, r30
    251e:	3a f0       	brmi	.+14     	; 0x252e <__divsf3_pse+0x3a>
    2520:	e0 e8       	ldi	r30, 0x80	; 128
    2522:	30 d0       	rcall	.+96     	; 0x2584 <__divsf3_pse+0x90>
    2524:	91 50       	subi	r25, 0x01	; 1
    2526:	50 40       	sbci	r21, 0x00	; 0
    2528:	e6 95       	lsr	r30
    252a:	00 1c       	adc	r0, r0
    252c:	ca f7       	brpl	.-14     	; 0x2520 <__divsf3_pse+0x2c>
    252e:	29 d0       	rcall	.+82     	; 0x2582 <__divsf3_pse+0x8e>
    2530:	fe 2f       	mov	r31, r30
    2532:	27 d0       	rcall	.+78     	; 0x2582 <__divsf3_pse+0x8e>
    2534:	66 0f       	add	r22, r22
    2536:	77 1f       	adc	r23, r23
    2538:	88 1f       	adc	r24, r24
    253a:	bb 1f       	adc	r27, r27
    253c:	26 17       	cp	r18, r22
    253e:	37 07       	cpc	r19, r23
    2540:	48 07       	cpc	r20, r24
    2542:	ab 07       	cpc	r26, r27
    2544:	b0 e8       	ldi	r27, 0x80	; 128
    2546:	09 f0       	breq	.+2      	; 0x254a <__divsf3_pse+0x56>
    2548:	bb 0b       	sbc	r27, r27
    254a:	80 2d       	mov	r24, r0
    254c:	bf 01       	movw	r22, r30
    254e:	ff 27       	eor	r31, r31
    2550:	93 58       	subi	r25, 0x83	; 131
    2552:	5f 4f       	sbci	r21, 0xFF	; 255
    2554:	2a f0       	brmi	.+10     	; 0x2560 <__divsf3_pse+0x6c>
    2556:	9e 3f       	cpi	r25, 0xFE	; 254
    2558:	51 05       	cpc	r21, r1
    255a:	68 f0       	brcs	.+26     	; 0x2576 <__divsf3_pse+0x82>
    255c:	92 c0       	rjmp	.+292    	; 0x2682 <__fp_inf>
    255e:	dc c0       	rjmp	.+440    	; 0x2718 <__fp_szero>
    2560:	5f 3f       	cpi	r21, 0xFF	; 255
    2562:	ec f3       	brlt	.-6      	; 0x255e <__divsf3_pse+0x6a>
    2564:	98 3e       	cpi	r25, 0xE8	; 232
    2566:	dc f3       	brlt	.-10     	; 0x255e <__divsf3_pse+0x6a>
    2568:	86 95       	lsr	r24
    256a:	77 95       	ror	r23
    256c:	67 95       	ror	r22
    256e:	b7 95       	ror	r27
    2570:	f7 95       	ror	r31
    2572:	9f 5f       	subi	r25, 0xFF	; 255
    2574:	c9 f7       	brne	.-14     	; 0x2568 <__divsf3_pse+0x74>
    2576:	88 0f       	add	r24, r24
    2578:	91 1d       	adc	r25, r1
    257a:	96 95       	lsr	r25
    257c:	87 95       	ror	r24
    257e:	97 f9       	bld	r25, 7
    2580:	08 95       	ret
    2582:	e1 e0       	ldi	r30, 0x01	; 1
    2584:	66 0f       	add	r22, r22
    2586:	77 1f       	adc	r23, r23
    2588:	88 1f       	adc	r24, r24
    258a:	bb 1f       	adc	r27, r27
    258c:	62 17       	cp	r22, r18
    258e:	73 07       	cpc	r23, r19
    2590:	84 07       	cpc	r24, r20
    2592:	ba 07       	cpc	r27, r26
    2594:	20 f0       	brcs	.+8      	; 0x259e <__divsf3_pse+0xaa>
    2596:	62 1b       	sub	r22, r18
    2598:	73 0b       	sbc	r23, r19
    259a:	84 0b       	sbc	r24, r20
    259c:	ba 0b       	sbc	r27, r26
    259e:	ee 1f       	adc	r30, r30
    25a0:	88 f7       	brcc	.-30     	; 0x2584 <__divsf3_pse+0x90>
    25a2:	e0 95       	com	r30
    25a4:	08 95       	ret

000025a6 <__fixsfsi>:
    25a6:	04 d0       	rcall	.+8      	; 0x25b0 <__fixunssfsi>
    25a8:	68 94       	set
    25aa:	b1 11       	cpse	r27, r1
    25ac:	b5 c0       	rjmp	.+362    	; 0x2718 <__fp_szero>
    25ae:	08 95       	ret

000025b0 <__fixunssfsi>:
    25b0:	98 d0       	rcall	.+304    	; 0x26e2 <__fp_splitA>
    25b2:	88 f0       	brcs	.+34     	; 0x25d6 <__fixunssfsi+0x26>
    25b4:	9f 57       	subi	r25, 0x7F	; 127
    25b6:	90 f0       	brcs	.+36     	; 0x25dc <__fixunssfsi+0x2c>
    25b8:	b9 2f       	mov	r27, r25
    25ba:	99 27       	eor	r25, r25
    25bc:	b7 51       	subi	r27, 0x17	; 23
    25be:	a0 f0       	brcs	.+40     	; 0x25e8 <__fixunssfsi+0x38>
    25c0:	d1 f0       	breq	.+52     	; 0x25f6 <__fixunssfsi+0x46>
    25c2:	66 0f       	add	r22, r22
    25c4:	77 1f       	adc	r23, r23
    25c6:	88 1f       	adc	r24, r24
    25c8:	99 1f       	adc	r25, r25
    25ca:	1a f0       	brmi	.+6      	; 0x25d2 <__fixunssfsi+0x22>
    25cc:	ba 95       	dec	r27
    25ce:	c9 f7       	brne	.-14     	; 0x25c2 <__fixunssfsi+0x12>
    25d0:	12 c0       	rjmp	.+36     	; 0x25f6 <__fixunssfsi+0x46>
    25d2:	b1 30       	cpi	r27, 0x01	; 1
    25d4:	81 f0       	breq	.+32     	; 0x25f6 <__fixunssfsi+0x46>
    25d6:	9f d0       	rcall	.+318    	; 0x2716 <__fp_zero>
    25d8:	b1 e0       	ldi	r27, 0x01	; 1
    25da:	08 95       	ret
    25dc:	9c c0       	rjmp	.+312    	; 0x2716 <__fp_zero>
    25de:	67 2f       	mov	r22, r23
    25e0:	78 2f       	mov	r23, r24
    25e2:	88 27       	eor	r24, r24
    25e4:	b8 5f       	subi	r27, 0xF8	; 248
    25e6:	39 f0       	breq	.+14     	; 0x25f6 <__fixunssfsi+0x46>
    25e8:	b9 3f       	cpi	r27, 0xF9	; 249
    25ea:	cc f3       	brlt	.-14     	; 0x25de <__fixunssfsi+0x2e>
    25ec:	86 95       	lsr	r24
    25ee:	77 95       	ror	r23
    25f0:	67 95       	ror	r22
    25f2:	b3 95       	inc	r27
    25f4:	d9 f7       	brne	.-10     	; 0x25ec <__fixunssfsi+0x3c>
    25f6:	3e f4       	brtc	.+14     	; 0x2606 <__fixunssfsi+0x56>
    25f8:	90 95       	com	r25
    25fa:	80 95       	com	r24
    25fc:	70 95       	com	r23
    25fe:	61 95       	neg	r22
    2600:	7f 4f       	sbci	r23, 0xFF	; 255
    2602:	8f 4f       	sbci	r24, 0xFF	; 255
    2604:	9f 4f       	sbci	r25, 0xFF	; 255
    2606:	08 95       	ret

00002608 <__floatunsisf>:
    2608:	e8 94       	clt
    260a:	09 c0       	rjmp	.+18     	; 0x261e <__floatsisf+0x12>

0000260c <__floatsisf>:
    260c:	97 fb       	bst	r25, 7
    260e:	3e f4       	brtc	.+14     	; 0x261e <__floatsisf+0x12>
    2610:	90 95       	com	r25
    2612:	80 95       	com	r24
    2614:	70 95       	com	r23
    2616:	61 95       	neg	r22
    2618:	7f 4f       	sbci	r23, 0xFF	; 255
    261a:	8f 4f       	sbci	r24, 0xFF	; 255
    261c:	9f 4f       	sbci	r25, 0xFF	; 255
    261e:	99 23       	and	r25, r25
    2620:	a9 f0       	breq	.+42     	; 0x264c <__floatsisf+0x40>
    2622:	f9 2f       	mov	r31, r25
    2624:	96 e9       	ldi	r25, 0x96	; 150
    2626:	bb 27       	eor	r27, r27
    2628:	93 95       	inc	r25
    262a:	f6 95       	lsr	r31
    262c:	87 95       	ror	r24
    262e:	77 95       	ror	r23
    2630:	67 95       	ror	r22
    2632:	b7 95       	ror	r27
    2634:	f1 11       	cpse	r31, r1
    2636:	f8 cf       	rjmp	.-16     	; 0x2628 <__floatsisf+0x1c>
    2638:	fa f4       	brpl	.+62     	; 0x2678 <__floatsisf+0x6c>
    263a:	bb 0f       	add	r27, r27
    263c:	11 f4       	brne	.+4      	; 0x2642 <__floatsisf+0x36>
    263e:	60 ff       	sbrs	r22, 0
    2640:	1b c0       	rjmp	.+54     	; 0x2678 <__floatsisf+0x6c>
    2642:	6f 5f       	subi	r22, 0xFF	; 255
    2644:	7f 4f       	sbci	r23, 0xFF	; 255
    2646:	8f 4f       	sbci	r24, 0xFF	; 255
    2648:	9f 4f       	sbci	r25, 0xFF	; 255
    264a:	16 c0       	rjmp	.+44     	; 0x2678 <__floatsisf+0x6c>
    264c:	88 23       	and	r24, r24
    264e:	11 f0       	breq	.+4      	; 0x2654 <__floatsisf+0x48>
    2650:	96 e9       	ldi	r25, 0x96	; 150
    2652:	11 c0       	rjmp	.+34     	; 0x2676 <__floatsisf+0x6a>
    2654:	77 23       	and	r23, r23
    2656:	21 f0       	breq	.+8      	; 0x2660 <__floatsisf+0x54>
    2658:	9e e8       	ldi	r25, 0x8E	; 142
    265a:	87 2f       	mov	r24, r23
    265c:	76 2f       	mov	r23, r22
    265e:	05 c0       	rjmp	.+10     	; 0x266a <__floatsisf+0x5e>
    2660:	66 23       	and	r22, r22
    2662:	71 f0       	breq	.+28     	; 0x2680 <__floatsisf+0x74>
    2664:	96 e8       	ldi	r25, 0x86	; 134
    2666:	86 2f       	mov	r24, r22
    2668:	70 e0       	ldi	r23, 0x00	; 0
    266a:	60 e0       	ldi	r22, 0x00	; 0
    266c:	2a f0       	brmi	.+10     	; 0x2678 <__floatsisf+0x6c>
    266e:	9a 95       	dec	r25
    2670:	66 0f       	add	r22, r22
    2672:	77 1f       	adc	r23, r23
    2674:	88 1f       	adc	r24, r24
    2676:	da f7       	brpl	.-10     	; 0x266e <__floatsisf+0x62>
    2678:	88 0f       	add	r24, r24
    267a:	96 95       	lsr	r25
    267c:	87 95       	ror	r24
    267e:	97 f9       	bld	r25, 7
    2680:	08 95       	ret

00002682 <__fp_inf>:
    2682:	97 f9       	bld	r25, 7
    2684:	9f 67       	ori	r25, 0x7F	; 127
    2686:	80 e8       	ldi	r24, 0x80	; 128
    2688:	70 e0       	ldi	r23, 0x00	; 0
    268a:	60 e0       	ldi	r22, 0x00	; 0
    268c:	08 95       	ret

0000268e <__fp_nan>:
    268e:	9f ef       	ldi	r25, 0xFF	; 255
    2690:	80 ec       	ldi	r24, 0xC0	; 192
    2692:	08 95       	ret

00002694 <__fp_pscA>:
    2694:	00 24       	eor	r0, r0
    2696:	0a 94       	dec	r0
    2698:	16 16       	cp	r1, r22
    269a:	17 06       	cpc	r1, r23
    269c:	18 06       	cpc	r1, r24
    269e:	09 06       	cpc	r0, r25
    26a0:	08 95       	ret

000026a2 <__fp_pscB>:
    26a2:	00 24       	eor	r0, r0
    26a4:	0a 94       	dec	r0
    26a6:	12 16       	cp	r1, r18
    26a8:	13 06       	cpc	r1, r19
    26aa:	14 06       	cpc	r1, r20
    26ac:	05 06       	cpc	r0, r21
    26ae:	08 95       	ret

000026b0 <__fp_round>:
    26b0:	09 2e       	mov	r0, r25
    26b2:	03 94       	inc	r0
    26b4:	00 0c       	add	r0, r0
    26b6:	11 f4       	brne	.+4      	; 0x26bc <__fp_round+0xc>
    26b8:	88 23       	and	r24, r24
    26ba:	52 f0       	brmi	.+20     	; 0x26d0 <__fp_round+0x20>
    26bc:	bb 0f       	add	r27, r27
    26be:	40 f4       	brcc	.+16     	; 0x26d0 <__fp_round+0x20>
    26c0:	bf 2b       	or	r27, r31
    26c2:	11 f4       	brne	.+4      	; 0x26c8 <__fp_round+0x18>
    26c4:	60 ff       	sbrs	r22, 0
    26c6:	04 c0       	rjmp	.+8      	; 0x26d0 <__fp_round+0x20>
    26c8:	6f 5f       	subi	r22, 0xFF	; 255
    26ca:	7f 4f       	sbci	r23, 0xFF	; 255
    26cc:	8f 4f       	sbci	r24, 0xFF	; 255
    26ce:	9f 4f       	sbci	r25, 0xFF	; 255
    26d0:	08 95       	ret

000026d2 <__fp_split3>:
    26d2:	57 fd       	sbrc	r21, 7
    26d4:	90 58       	subi	r25, 0x80	; 128
    26d6:	44 0f       	add	r20, r20
    26d8:	55 1f       	adc	r21, r21
    26da:	59 f0       	breq	.+22     	; 0x26f2 <__fp_splitA+0x10>
    26dc:	5f 3f       	cpi	r21, 0xFF	; 255
    26de:	71 f0       	breq	.+28     	; 0x26fc <__fp_splitA+0x1a>
    26e0:	47 95       	ror	r20

000026e2 <__fp_splitA>:
    26e2:	88 0f       	add	r24, r24
    26e4:	97 fb       	bst	r25, 7
    26e6:	99 1f       	adc	r25, r25
    26e8:	61 f0       	breq	.+24     	; 0x2702 <__fp_splitA+0x20>
    26ea:	9f 3f       	cpi	r25, 0xFF	; 255
    26ec:	79 f0       	breq	.+30     	; 0x270c <__fp_splitA+0x2a>
    26ee:	87 95       	ror	r24
    26f0:	08 95       	ret
    26f2:	12 16       	cp	r1, r18
    26f4:	13 06       	cpc	r1, r19
    26f6:	14 06       	cpc	r1, r20
    26f8:	55 1f       	adc	r21, r21
    26fa:	f2 cf       	rjmp	.-28     	; 0x26e0 <__fp_split3+0xe>
    26fc:	46 95       	lsr	r20
    26fe:	f1 df       	rcall	.-30     	; 0x26e2 <__fp_splitA>
    2700:	08 c0       	rjmp	.+16     	; 0x2712 <__fp_splitA+0x30>
    2702:	16 16       	cp	r1, r22
    2704:	17 06       	cpc	r1, r23
    2706:	18 06       	cpc	r1, r24
    2708:	99 1f       	adc	r25, r25
    270a:	f1 cf       	rjmp	.-30     	; 0x26ee <__fp_splitA+0xc>
    270c:	86 95       	lsr	r24
    270e:	71 05       	cpc	r23, r1
    2710:	61 05       	cpc	r22, r1
    2712:	08 94       	sec
    2714:	08 95       	ret

00002716 <__fp_zero>:
    2716:	e8 94       	clt

00002718 <__fp_szero>:
    2718:	bb 27       	eor	r27, r27
    271a:	66 27       	eor	r22, r22
    271c:	77 27       	eor	r23, r23
    271e:	cb 01       	movw	r24, r22
    2720:	97 f9       	bld	r25, 7
    2722:	08 95       	ret

00002724 <__mulsf3>:
    2724:	0b d0       	rcall	.+22     	; 0x273c <__mulsf3x>
    2726:	c4 cf       	rjmp	.-120    	; 0x26b0 <__fp_round>
    2728:	b5 df       	rcall	.-150    	; 0x2694 <__fp_pscA>
    272a:	28 f0       	brcs	.+10     	; 0x2736 <__mulsf3+0x12>
    272c:	ba df       	rcall	.-140    	; 0x26a2 <__fp_pscB>
    272e:	18 f0       	brcs	.+6      	; 0x2736 <__mulsf3+0x12>
    2730:	95 23       	and	r25, r21
    2732:	09 f0       	breq	.+2      	; 0x2736 <__mulsf3+0x12>
    2734:	a6 cf       	rjmp	.-180    	; 0x2682 <__fp_inf>
    2736:	ab cf       	rjmp	.-170    	; 0x268e <__fp_nan>
    2738:	11 24       	eor	r1, r1
    273a:	ee cf       	rjmp	.-36     	; 0x2718 <__fp_szero>

0000273c <__mulsf3x>:
    273c:	ca df       	rcall	.-108    	; 0x26d2 <__fp_split3>
    273e:	a0 f3       	brcs	.-24     	; 0x2728 <__mulsf3+0x4>

00002740 <__mulsf3_pse>:
    2740:	95 9f       	mul	r25, r21
    2742:	d1 f3       	breq	.-12     	; 0x2738 <__mulsf3+0x14>
    2744:	95 0f       	add	r25, r21
    2746:	50 e0       	ldi	r21, 0x00	; 0
    2748:	55 1f       	adc	r21, r21
    274a:	62 9f       	mul	r22, r18
    274c:	f0 01       	movw	r30, r0
    274e:	72 9f       	mul	r23, r18
    2750:	bb 27       	eor	r27, r27
    2752:	f0 0d       	add	r31, r0
    2754:	b1 1d       	adc	r27, r1
    2756:	63 9f       	mul	r22, r19
    2758:	aa 27       	eor	r26, r26
    275a:	f0 0d       	add	r31, r0
    275c:	b1 1d       	adc	r27, r1
    275e:	aa 1f       	adc	r26, r26
    2760:	64 9f       	mul	r22, r20
    2762:	66 27       	eor	r22, r22
    2764:	b0 0d       	add	r27, r0
    2766:	a1 1d       	adc	r26, r1
    2768:	66 1f       	adc	r22, r22
    276a:	82 9f       	mul	r24, r18
    276c:	22 27       	eor	r18, r18
    276e:	b0 0d       	add	r27, r0
    2770:	a1 1d       	adc	r26, r1
    2772:	62 1f       	adc	r22, r18
    2774:	73 9f       	mul	r23, r19
    2776:	b0 0d       	add	r27, r0
    2778:	a1 1d       	adc	r26, r1
    277a:	62 1f       	adc	r22, r18
    277c:	83 9f       	mul	r24, r19
    277e:	a0 0d       	add	r26, r0
    2780:	61 1d       	adc	r22, r1
    2782:	22 1f       	adc	r18, r18
    2784:	74 9f       	mul	r23, r20
    2786:	33 27       	eor	r19, r19
    2788:	a0 0d       	add	r26, r0
    278a:	61 1d       	adc	r22, r1
    278c:	23 1f       	adc	r18, r19
    278e:	84 9f       	mul	r24, r20
    2790:	60 0d       	add	r22, r0
    2792:	21 1d       	adc	r18, r1
    2794:	82 2f       	mov	r24, r18
    2796:	76 2f       	mov	r23, r22
    2798:	6a 2f       	mov	r22, r26
    279a:	11 24       	eor	r1, r1
    279c:	9f 57       	subi	r25, 0x7F	; 127
    279e:	50 40       	sbci	r21, 0x00	; 0
    27a0:	8a f0       	brmi	.+34     	; 0x27c4 <__mulsf3_pse+0x84>
    27a2:	e1 f0       	breq	.+56     	; 0x27dc <__mulsf3_pse+0x9c>
    27a4:	88 23       	and	r24, r24
    27a6:	4a f0       	brmi	.+18     	; 0x27ba <__mulsf3_pse+0x7a>
    27a8:	ee 0f       	add	r30, r30
    27aa:	ff 1f       	adc	r31, r31
    27ac:	bb 1f       	adc	r27, r27
    27ae:	66 1f       	adc	r22, r22
    27b0:	77 1f       	adc	r23, r23
    27b2:	88 1f       	adc	r24, r24
    27b4:	91 50       	subi	r25, 0x01	; 1
    27b6:	50 40       	sbci	r21, 0x00	; 0
    27b8:	a9 f7       	brne	.-22     	; 0x27a4 <__mulsf3_pse+0x64>
    27ba:	9e 3f       	cpi	r25, 0xFE	; 254
    27bc:	51 05       	cpc	r21, r1
    27be:	70 f0       	brcs	.+28     	; 0x27dc <__mulsf3_pse+0x9c>
    27c0:	60 cf       	rjmp	.-320    	; 0x2682 <__fp_inf>
    27c2:	aa cf       	rjmp	.-172    	; 0x2718 <__fp_szero>
    27c4:	5f 3f       	cpi	r21, 0xFF	; 255
    27c6:	ec f3       	brlt	.-6      	; 0x27c2 <__mulsf3_pse+0x82>
    27c8:	98 3e       	cpi	r25, 0xE8	; 232
    27ca:	dc f3       	brlt	.-10     	; 0x27c2 <__mulsf3_pse+0x82>
    27cc:	86 95       	lsr	r24
    27ce:	77 95       	ror	r23
    27d0:	67 95       	ror	r22
    27d2:	b7 95       	ror	r27
    27d4:	f7 95       	ror	r31
    27d6:	e7 95       	ror	r30
    27d8:	9f 5f       	subi	r25, 0xFF	; 255
    27da:	c1 f7       	brne	.-16     	; 0x27cc <__mulsf3_pse+0x8c>
    27dc:	fe 2b       	or	r31, r30
    27de:	88 0f       	add	r24, r24
    27e0:	91 1d       	adc	r25, r1
    27e2:	96 95       	lsr	r25
    27e4:	87 95       	ror	r24
    27e6:	97 f9       	bld	r25, 7
    27e8:	08 95       	ret

000027ea <pow>:
    27ea:	fa 01       	movw	r30, r20
    27ec:	ee 0f       	add	r30, r30
    27ee:	ff 1f       	adc	r31, r31
    27f0:	30 96       	adiw	r30, 0x00	; 0
    27f2:	21 05       	cpc	r18, r1
    27f4:	31 05       	cpc	r19, r1
    27f6:	99 f1       	breq	.+102    	; 0x285e <pow+0x74>
    27f8:	61 15       	cp	r22, r1
    27fa:	71 05       	cpc	r23, r1
    27fc:	61 f4       	brne	.+24     	; 0x2816 <pow+0x2c>
    27fe:	80 38       	cpi	r24, 0x80	; 128
    2800:	bf e3       	ldi	r27, 0x3F	; 63
    2802:	9b 07       	cpc	r25, r27
    2804:	49 f1       	breq	.+82     	; 0x2858 <pow+0x6e>
    2806:	68 94       	set
    2808:	90 38       	cpi	r25, 0x80	; 128
    280a:	81 05       	cpc	r24, r1
    280c:	61 f0       	breq	.+24     	; 0x2826 <pow+0x3c>
    280e:	80 38       	cpi	r24, 0x80	; 128
    2810:	bf ef       	ldi	r27, 0xFF	; 255
    2812:	9b 07       	cpc	r25, r27
    2814:	41 f0       	breq	.+16     	; 0x2826 <pow+0x3c>
    2816:	99 23       	and	r25, r25
    2818:	42 f5       	brpl	.+80     	; 0x286a <pow+0x80>
    281a:	ff 3f       	cpi	r31, 0xFF	; 255
    281c:	e1 05       	cpc	r30, r1
    281e:	31 05       	cpc	r19, r1
    2820:	21 05       	cpc	r18, r1
    2822:	11 f1       	breq	.+68     	; 0x2868 <pow+0x7e>
    2824:	e8 94       	clt
    2826:	08 94       	sec
    2828:	e7 95       	ror	r30
    282a:	d9 01       	movw	r26, r18
    282c:	aa 23       	and	r26, r26
    282e:	29 f4       	brne	.+10     	; 0x283a <pow+0x50>
    2830:	ab 2f       	mov	r26, r27
    2832:	be 2f       	mov	r27, r30
    2834:	f8 5f       	subi	r31, 0xF8	; 248
    2836:	d0 f3       	brcs	.-12     	; 0x282c <pow+0x42>
    2838:	10 c0       	rjmp	.+32     	; 0x285a <pow+0x70>
    283a:	ff 5f       	subi	r31, 0xFF	; 255
    283c:	70 f4       	brcc	.+28     	; 0x285a <pow+0x70>
    283e:	a6 95       	lsr	r26
    2840:	e0 f7       	brcc	.-8      	; 0x283a <pow+0x50>
    2842:	f7 39       	cpi	r31, 0x97	; 151
    2844:	50 f0       	brcs	.+20     	; 0x285a <pow+0x70>
    2846:	19 f0       	breq	.+6      	; 0x284e <pow+0x64>
    2848:	ff 3a       	cpi	r31, 0xAF	; 175
    284a:	38 f4       	brcc	.+14     	; 0x285a <pow+0x70>
    284c:	9f 77       	andi	r25, 0x7F	; 127
    284e:	9f 93       	push	r25
    2850:	0c d0       	rcall	.+24     	; 0x286a <pow+0x80>
    2852:	0f 90       	pop	r0
    2854:	07 fc       	sbrc	r0, 7
    2856:	90 58       	subi	r25, 0x80	; 128
    2858:	08 95       	ret
    285a:	3e f0       	brts	.+14     	; 0x286a <pow+0x80>
    285c:	18 cf       	rjmp	.-464    	; 0x268e <__fp_nan>
    285e:	60 e0       	ldi	r22, 0x00	; 0
    2860:	70 e0       	ldi	r23, 0x00	; 0
    2862:	80 e8       	ldi	r24, 0x80	; 128
    2864:	9f e3       	ldi	r25, 0x3F	; 63
    2866:	08 95       	ret
    2868:	4f e7       	ldi	r20, 0x7F	; 127
    286a:	9f 77       	andi	r25, 0x7F	; 127
    286c:	5f 93       	push	r21
    286e:	4f 93       	push	r20
    2870:	3f 93       	push	r19
    2872:	2f 93       	push	r18
    2874:	9e d0       	rcall	.+316    	; 0x29b2 <log>
    2876:	2f 91       	pop	r18
    2878:	3f 91       	pop	r19
    287a:	4f 91       	pop	r20
    287c:	5f 91       	pop	r21
    287e:	52 df       	rcall	.-348    	; 0x2724 <__mulsf3>
    2880:	05 c0       	rjmp	.+10     	; 0x288c <exp>
    2882:	19 f4       	brne	.+6      	; 0x288a <pow+0xa0>
    2884:	0e f0       	brts	.+2      	; 0x2888 <pow+0x9e>
    2886:	fd ce       	rjmp	.-518    	; 0x2682 <__fp_inf>
    2888:	46 cf       	rjmp	.-372    	; 0x2716 <__fp_zero>
    288a:	01 cf       	rjmp	.-510    	; 0x268e <__fp_nan>

0000288c <exp>:
    288c:	2a df       	rcall	.-428    	; 0x26e2 <__fp_splitA>
    288e:	c8 f3       	brcs	.-14     	; 0x2882 <pow+0x98>
    2890:	96 38       	cpi	r25, 0x86	; 134
    2892:	c0 f7       	brcc	.-16     	; 0x2884 <pow+0x9a>
    2894:	07 f8       	bld	r0, 7
    2896:	0f 92       	push	r0
    2898:	e8 94       	clt
    289a:	2b e3       	ldi	r18, 0x3B	; 59
    289c:	3a ea       	ldi	r19, 0xAA	; 170
    289e:	48 eb       	ldi	r20, 0xB8	; 184
    28a0:	5f e7       	ldi	r21, 0x7F	; 127
    28a2:	4e df       	rcall	.-356    	; 0x2740 <__mulsf3_pse>
    28a4:	0f 92       	push	r0
    28a6:	0f 92       	push	r0
    28a8:	0f 92       	push	r0
    28aa:	4d b7       	in	r20, 0x3d	; 61
    28ac:	5e b7       	in	r21, 0x3e	; 62
    28ae:	0f 92       	push	r0
    28b0:	c0 d0       	rcall	.+384    	; 0x2a32 <modf>
    28b2:	e4 ee       	ldi	r30, 0xE4	; 228
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	16 d0       	rcall	.+44     	; 0x28e4 <__fp_powser>
    28b8:	4f 91       	pop	r20
    28ba:	5f 91       	pop	r21
    28bc:	ef 91       	pop	r30
    28be:	ff 91       	pop	r31
    28c0:	e5 95       	asr	r30
    28c2:	ee 1f       	adc	r30, r30
    28c4:	ff 1f       	adc	r31, r31
    28c6:	49 f0       	breq	.+18     	; 0x28da <exp+0x4e>
    28c8:	fe 57       	subi	r31, 0x7E	; 126
    28ca:	e0 68       	ori	r30, 0x80	; 128
    28cc:	44 27       	eor	r20, r20
    28ce:	ee 0f       	add	r30, r30
    28d0:	44 1f       	adc	r20, r20
    28d2:	fa 95       	dec	r31
    28d4:	e1 f7       	brne	.-8      	; 0x28ce <exp+0x42>
    28d6:	41 95       	neg	r20
    28d8:	55 0b       	sbc	r21, r21
    28da:	32 d0       	rcall	.+100    	; 0x2940 <ldexp>
    28dc:	0f 90       	pop	r0
    28de:	07 fe       	sbrs	r0, 7
    28e0:	26 c0       	rjmp	.+76     	; 0x292e <inverse>
    28e2:	08 95       	ret

000028e4 <__fp_powser>:
    28e4:	df 93       	push	r29
    28e6:	cf 93       	push	r28
    28e8:	1f 93       	push	r17
    28ea:	0f 93       	push	r16
    28ec:	ff 92       	push	r15
    28ee:	ef 92       	push	r14
    28f0:	df 92       	push	r13
    28f2:	7b 01       	movw	r14, r22
    28f4:	8c 01       	movw	r16, r24
    28f6:	68 94       	set
    28f8:	05 c0       	rjmp	.+10     	; 0x2904 <__fp_powser+0x20>
    28fa:	da 2e       	mov	r13, r26
    28fc:	ef 01       	movw	r28, r30
    28fe:	1e df       	rcall	.-452    	; 0x273c <__mulsf3x>
    2900:	fe 01       	movw	r30, r28
    2902:	e8 94       	clt
    2904:	a5 91       	lpm	r26, Z+
    2906:	25 91       	lpm	r18, Z+
    2908:	35 91       	lpm	r19, Z+
    290a:	45 91       	lpm	r20, Z+
    290c:	55 91       	lpm	r21, Z+
    290e:	ae f3       	brts	.-22     	; 0x28fa <__fp_powser+0x16>
    2910:	ef 01       	movw	r28, r30
    2912:	8e dd       	rcall	.-1252   	; 0x2430 <__addsf3x>
    2914:	fe 01       	movw	r30, r28
    2916:	97 01       	movw	r18, r14
    2918:	a8 01       	movw	r20, r16
    291a:	da 94       	dec	r13
    291c:	79 f7       	brne	.-34     	; 0x28fc <__fp_powser+0x18>
    291e:	df 90       	pop	r13
    2920:	ef 90       	pop	r14
    2922:	ff 90       	pop	r15
    2924:	0f 91       	pop	r16
    2926:	1f 91       	pop	r17
    2928:	cf 91       	pop	r28
    292a:	df 91       	pop	r29
    292c:	08 95       	ret

0000292e <inverse>:
    292e:	9b 01       	movw	r18, r22
    2930:	ac 01       	movw	r20, r24
    2932:	60 e0       	ldi	r22, 0x00	; 0
    2934:	70 e0       	ldi	r23, 0x00	; 0
    2936:	80 e8       	ldi	r24, 0x80	; 128
    2938:	9f e3       	ldi	r25, 0x3F	; 63
    293a:	cd cd       	rjmp	.-1126   	; 0x24d6 <__divsf3>
    293c:	a2 ce       	rjmp	.-700    	; 0x2682 <__fp_inf>
    293e:	ac c0       	rjmp	.+344    	; 0x2a98 <__fp_mpack>

00002940 <ldexp>:
    2940:	d0 de       	rcall	.-608    	; 0x26e2 <__fp_splitA>
    2942:	e8 f3       	brcs	.-6      	; 0x293e <inverse+0x10>
    2944:	99 23       	and	r25, r25
    2946:	d9 f3       	breq	.-10     	; 0x293e <inverse+0x10>
    2948:	94 0f       	add	r25, r20
    294a:	51 1d       	adc	r21, r1
    294c:	bb f3       	brvs	.-18     	; 0x293c <inverse+0xe>
    294e:	91 50       	subi	r25, 0x01	; 1
    2950:	50 40       	sbci	r21, 0x00	; 0
    2952:	94 f0       	brlt	.+36     	; 0x2978 <ldexp+0x38>
    2954:	59 f0       	breq	.+22     	; 0x296c <ldexp+0x2c>
    2956:	88 23       	and	r24, r24
    2958:	32 f0       	brmi	.+12     	; 0x2966 <ldexp+0x26>
    295a:	66 0f       	add	r22, r22
    295c:	77 1f       	adc	r23, r23
    295e:	88 1f       	adc	r24, r24
    2960:	91 50       	subi	r25, 0x01	; 1
    2962:	50 40       	sbci	r21, 0x00	; 0
    2964:	c1 f7       	brne	.-16     	; 0x2956 <ldexp+0x16>
    2966:	9e 3f       	cpi	r25, 0xFE	; 254
    2968:	51 05       	cpc	r21, r1
    296a:	44 f7       	brge	.-48     	; 0x293c <inverse+0xe>
    296c:	88 0f       	add	r24, r24
    296e:	91 1d       	adc	r25, r1
    2970:	96 95       	lsr	r25
    2972:	87 95       	ror	r24
    2974:	97 f9       	bld	r25, 7
    2976:	08 95       	ret
    2978:	5f 3f       	cpi	r21, 0xFF	; 255
    297a:	ac f0       	brlt	.+42     	; 0x29a6 <ldexp+0x66>
    297c:	98 3e       	cpi	r25, 0xE8	; 232
    297e:	9c f0       	brlt	.+38     	; 0x29a6 <ldexp+0x66>
    2980:	bb 27       	eor	r27, r27
    2982:	86 95       	lsr	r24
    2984:	77 95       	ror	r23
    2986:	67 95       	ror	r22
    2988:	b7 95       	ror	r27
    298a:	08 f4       	brcc	.+2      	; 0x298e <ldexp+0x4e>
    298c:	b1 60       	ori	r27, 0x01	; 1
    298e:	93 95       	inc	r25
    2990:	c1 f7       	brne	.-16     	; 0x2982 <ldexp+0x42>
    2992:	bb 0f       	add	r27, r27
    2994:	58 f7       	brcc	.-42     	; 0x296c <ldexp+0x2c>
    2996:	11 f4       	brne	.+4      	; 0x299c <ldexp+0x5c>
    2998:	60 ff       	sbrs	r22, 0
    299a:	e8 cf       	rjmp	.-48     	; 0x296c <ldexp+0x2c>
    299c:	6f 5f       	subi	r22, 0xFF	; 255
    299e:	7f 4f       	sbci	r23, 0xFF	; 255
    29a0:	8f 4f       	sbci	r24, 0xFF	; 255
    29a2:	9f 4f       	sbci	r25, 0xFF	; 255
    29a4:	e3 cf       	rjmp	.-58     	; 0x296c <ldexp+0x2c>
    29a6:	b8 ce       	rjmp	.-656    	; 0x2718 <__fp_szero>
    29a8:	0e f0       	brts	.+2      	; 0x29ac <ldexp+0x6c>
    29aa:	76 c0       	rjmp	.+236    	; 0x2a98 <__fp_mpack>
    29ac:	70 ce       	rjmp	.-800    	; 0x268e <__fp_nan>
    29ae:	68 94       	set
    29b0:	68 ce       	rjmp	.-816    	; 0x2682 <__fp_inf>

000029b2 <log>:
    29b2:	97 de       	rcall	.-722    	; 0x26e2 <__fp_splitA>
    29b4:	c8 f3       	brcs	.-14     	; 0x29a8 <ldexp+0x68>
    29b6:	99 23       	and	r25, r25
    29b8:	d1 f3       	breq	.-12     	; 0x29ae <ldexp+0x6e>
    29ba:	c6 f3       	brts	.-16     	; 0x29ac <ldexp+0x6c>
    29bc:	df 93       	push	r29
    29be:	cf 93       	push	r28
    29c0:	1f 93       	push	r17
    29c2:	0f 93       	push	r16
    29c4:	ff 92       	push	r15
    29c6:	c9 2f       	mov	r28, r25
    29c8:	dd 27       	eor	r29, r29
    29ca:	88 23       	and	r24, r24
    29cc:	2a f0       	brmi	.+10     	; 0x29d8 <log+0x26>
    29ce:	21 97       	sbiw	r28, 0x01	; 1
    29d0:	66 0f       	add	r22, r22
    29d2:	77 1f       	adc	r23, r23
    29d4:	88 1f       	adc	r24, r24
    29d6:	da f7       	brpl	.-10     	; 0x29ce <log+0x1c>
    29d8:	20 e0       	ldi	r18, 0x00	; 0
    29da:	30 e0       	ldi	r19, 0x00	; 0
    29dc:	40 e8       	ldi	r20, 0x80	; 128
    29de:	5f eb       	ldi	r21, 0xBF	; 191
    29e0:	9f e3       	ldi	r25, 0x3F	; 63
    29e2:	88 39       	cpi	r24, 0x98	; 152
    29e4:	20 f0       	brcs	.+8      	; 0x29ee <log+0x3c>
    29e6:	80 3e       	cpi	r24, 0xE0	; 224
    29e8:	30 f0       	brcs	.+12     	; 0x29f6 <log+0x44>
    29ea:	21 96       	adiw	r28, 0x01	; 1
    29ec:	8f 77       	andi	r24, 0x7F	; 127
    29ee:	0f dd       	rcall	.-1506   	; 0x240e <__addsf3>
    29f0:	ec e0       	ldi	r30, 0x0C	; 12
    29f2:	f1 e0       	ldi	r31, 0x01	; 1
    29f4:	03 c0       	rjmp	.+6      	; 0x29fc <log+0x4a>
    29f6:	0b dd       	rcall	.-1514   	; 0x240e <__addsf3>
    29f8:	e9 e3       	ldi	r30, 0x39	; 57
    29fa:	f1 e0       	ldi	r31, 0x01	; 1
    29fc:	73 df       	rcall	.-282    	; 0x28e4 <__fp_powser>
    29fe:	8b 01       	movw	r16, r22
    2a00:	be 01       	movw	r22, r28
    2a02:	ec 01       	movw	r28, r24
    2a04:	fb 2e       	mov	r15, r27
    2a06:	6f 57       	subi	r22, 0x7F	; 127
    2a08:	71 09       	sbc	r23, r1
    2a0a:	75 95       	asr	r23
    2a0c:	77 1f       	adc	r23, r23
    2a0e:	88 0b       	sbc	r24, r24
    2a10:	99 0b       	sbc	r25, r25
    2a12:	fc dd       	rcall	.-1032   	; 0x260c <__floatsisf>
    2a14:	28 e1       	ldi	r18, 0x18	; 24
    2a16:	32 e7       	ldi	r19, 0x72	; 114
    2a18:	41 e3       	ldi	r20, 0x31	; 49
    2a1a:	5f e3       	ldi	r21, 0x3F	; 63
    2a1c:	8f de       	rcall	.-738    	; 0x273c <__mulsf3x>
    2a1e:	af 2d       	mov	r26, r15
    2a20:	98 01       	movw	r18, r16
    2a22:	ae 01       	movw	r20, r28
    2a24:	ff 90       	pop	r15
    2a26:	0f 91       	pop	r16
    2a28:	1f 91       	pop	r17
    2a2a:	cf 91       	pop	r28
    2a2c:	df 91       	pop	r29
    2a2e:	00 dd       	rcall	.-1536   	; 0x2430 <__addsf3x>
    2a30:	3f ce       	rjmp	.-898    	; 0x26b0 <__fp_round>

00002a32 <modf>:
    2a32:	fa 01       	movw	r30, r20
    2a34:	dc 01       	movw	r26, r24
    2a36:	aa 0f       	add	r26, r26
    2a38:	bb 1f       	adc	r27, r27
    2a3a:	9b 01       	movw	r18, r22
    2a3c:	ac 01       	movw	r20, r24
    2a3e:	bf 57       	subi	r27, 0x7F	; 127
    2a40:	28 f4       	brcc	.+10     	; 0x2a4c <modf+0x1a>
    2a42:	22 27       	eor	r18, r18
    2a44:	33 27       	eor	r19, r19
    2a46:	44 27       	eor	r20, r20
    2a48:	50 78       	andi	r21, 0x80	; 128
    2a4a:	1f c0       	rjmp	.+62     	; 0x2a8a <modf+0x58>
    2a4c:	b7 51       	subi	r27, 0x17	; 23
    2a4e:	88 f4       	brcc	.+34     	; 0x2a72 <modf+0x40>
    2a50:	ab 2f       	mov	r26, r27
    2a52:	00 24       	eor	r0, r0
    2a54:	46 95       	lsr	r20
    2a56:	37 95       	ror	r19
    2a58:	27 95       	ror	r18
    2a5a:	01 1c       	adc	r0, r1
    2a5c:	a3 95       	inc	r26
    2a5e:	d2 f3       	brmi	.-12     	; 0x2a54 <modf+0x22>
    2a60:	00 20       	and	r0, r0
    2a62:	69 f0       	breq	.+26     	; 0x2a7e <modf+0x4c>
    2a64:	22 0f       	add	r18, r18
    2a66:	33 1f       	adc	r19, r19
    2a68:	44 1f       	adc	r20, r20
    2a6a:	b3 95       	inc	r27
    2a6c:	da f3       	brmi	.-10     	; 0x2a64 <modf+0x32>
    2a6e:	0d d0       	rcall	.+26     	; 0x2a8a <modf+0x58>
    2a70:	cd cc       	rjmp	.-1638   	; 0x240c <__subsf3>
    2a72:	61 30       	cpi	r22, 0x01	; 1
    2a74:	71 05       	cpc	r23, r1
    2a76:	a0 e8       	ldi	r26, 0x80	; 128
    2a78:	8a 07       	cpc	r24, r26
    2a7a:	b9 46       	sbci	r27, 0x69	; 105
    2a7c:	30 f4       	brcc	.+12     	; 0x2a8a <modf+0x58>
    2a7e:	9b 01       	movw	r18, r22
    2a80:	ac 01       	movw	r20, r24
    2a82:	66 27       	eor	r22, r22
    2a84:	77 27       	eor	r23, r23
    2a86:	88 27       	eor	r24, r24
    2a88:	90 78       	andi	r25, 0x80	; 128
    2a8a:	30 96       	adiw	r30, 0x00	; 0
    2a8c:	21 f0       	breq	.+8      	; 0x2a96 <modf+0x64>
    2a8e:	20 83       	st	Z, r18
    2a90:	31 83       	std	Z+1, r19	; 0x01
    2a92:	42 83       	std	Z+2, r20	; 0x02
    2a94:	53 83       	std	Z+3, r21	; 0x03
    2a96:	08 95       	ret

00002a98 <__fp_mpack>:
    2a98:	9f 3f       	cpi	r25, 0xFF	; 255
    2a9a:	31 f0       	breq	.+12     	; 0x2aa8 <__fp_mpack_finite+0xc>

00002a9c <__fp_mpack_finite>:
    2a9c:	91 50       	subi	r25, 0x01	; 1
    2a9e:	20 f4       	brcc	.+8      	; 0x2aa8 <__fp_mpack_finite+0xc>
    2aa0:	87 95       	ror	r24
    2aa2:	77 95       	ror	r23
    2aa4:	67 95       	ror	r22
    2aa6:	b7 95       	ror	r27
    2aa8:	88 0f       	add	r24, r24
    2aaa:	91 1d       	adc	r25, r1
    2aac:	96 95       	lsr	r25
    2aae:	87 95       	ror	r24
    2ab0:	97 f9       	bld	r25, 7
    2ab2:	08 95       	ret

00002ab4 <_exit>:
    2ab4:	f8 94       	cli

00002ab6 <__stop_program>:
    2ab6:	ff cf       	rjmp	.-2      	; 0x2ab6 <__stop_program>
